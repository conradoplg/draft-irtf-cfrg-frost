{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2022-07-21T00:57:27.899642+00:00",
  "repo": "cfrg/draft-irtf-cfrg-frost",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "editorial",
      "description": "Editorial",
      "color": "59FAD3"
    },
    {
      "name": "interop",
      "description": "Interop-related issue",
      "color": "006b75"
    },
    {
      "name": "design",
      "description": "Design-related issue",
      "color": "d93f0b"
    },
    {
      "name": "blocked",
      "description": "",
      "color": "D0590D"
    },
    {
      "name": "discuss",
      "description": "",
      "color": "46C465"
    },
    {
      "name": "dependencies",
      "description": "Pull requests that update a dependency file",
      "color": "0366d6"
    },
    {
      "name": "next-version",
      "description": "Next draft version",
      "color": "ECD752"
    }
  ],
  "issues": [
    {
      "number": 5,
      "id": "MDU6SXNzdWU5NjM5NjI3NTI=",
      "title": "Ed25519 compatibility",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/5",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Beyond ristretto255, we should describe how to instantiate FROST with the [edwards25519 curve from RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-5.1). We might include the EdDSA verification procedure, too, listed below (bugs are my own):\r\n\r\n~~~\r\nEdDSA_verify(msg, sig, PK)\r\n\r\nInputs:\r\n- msg, message signed, an octet string\r\n- sig, message signature, a tuple of scalars (z, c)\r\n- PK, EdDSA public key\r\n\r\nOutputs: 1 if the signature is valid, and 0 otherwise\r\n\r\ndef EdDSA_verify(msg, sig, PK):\r\n  (z, c) = SIG\r\n  R' = (z * P) + (PK * c^-1)\r\n  c' = Hash(m, R')\r\n  if c == c':\r\n    return 1\r\n  return 0\r\n~~~",
      "createdAt": "2021-08-09T12:50:59Z",
      "updatedAt": "2021-12-13T23:49:23Z",
      "closedAt": "2021-12-13T23:49:23Z",
      "comments": []
    },
    {
      "number": 11,
      "id": "I_kwDOEpUZs84-1lXn",
      "title": "Add P-256 ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/11",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "interop"
      ],
      "body": "",
      "createdAt": "2021-11-15T23:14:32Z",
      "updatedAt": "2021-12-14T14:56:00Z",
      "closedAt": "2021-12-14T14:56:00Z",
      "comments": []
    },
    {
      "number": 12,
      "id": "I_kwDOEpUZs84-1li8",
      "title": "Always compute with a cofactor h, even if h = 1 for the ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/12",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2021-11-15T23:15:09Z",
      "updatedAt": "2022-02-28T19:07:44Z",
      "closedAt": "2022-02-28T19:07:43Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly are we OK to close this out?",
          "createdAt": "2022-02-23T23:27:24Z",
          "updatedAt": "2022-02-23T23:27:24Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> Specify signature encoding based on group Element and Scalar serialization #85\r\n\r\nI think the place we need to use the cofactor check is in `verify`, and to do that we need to enumerate the cofactor `h` for each ciphersuite\r\n\r\nExamples from `frost-redjubjub` which multiplies by the cofactor in `is_small_order()`:\r\nhttps://github.com/ZcashFoundation/frost/blob/8ce992541afa2e49fbe7606dd81ee8c2a8648446/frost-redjubjub/src/verification_key.rs#L196\r\nhttps://github.com/ZcashFoundation/frost/blob/f10a159c7039641fae63b53387e66e55a8604acf/frost-redjubjub/src/batch.rs#L258\r\n\r\n(Batch is not described in the spec but the Schnorr verification procedure leads directly to the batch verification procedure)\r\n\r\n<img width=\"510\" alt=\"image\" src=\"https://user-images.githubusercontent.com/552961/155616257-b1fbc1c6-c30d-4b5c-9bfc-8abad6d73cc7.png\">\r\n",
          "createdAt": "2022-02-24T22:12:20Z",
          "updatedAt": "2022-02-24T22:12:52Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly isn't that being tracked separately by #68?",
          "createdAt": "2022-02-24T22:57:32Z",
          "updatedAt": "2022-02-24T22:57:32Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "You are correct! I think we can close this",
          "createdAt": "2022-02-28T19:07:43Z",
          "updatedAt": "2022-02-28T19:07:43Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOEpUZs84-1lxO",
      "title": "Detail domain separation ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/13",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-15T23:15:57Z",
      "updatedAt": "2021-12-13T23:30:56Z",
      "closedAt": "2021-12-13T23:30:56Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This should be `PARAM_NAME_VARIABLE NAME`. So, for example, `RISTRETTO_RHO`",
          "createdAt": "2021-12-13T23:30:29Z",
          "updatedAt": "2021-12-13T23:30:29Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Dupe of #15 -- closing.",
          "createdAt": "2021-12-13T23:30:56Z",
          "updatedAt": "2021-12-13T23:30:56Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOEpUZs84-1pLo",
      "title": "Define a domain separation bytestring for each parameter set",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/15",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "To update[ this change](https://github.com/chelseakomlo/frost-spec/pull/14) to point to $PARAMETER_SET.DOMAIN_SEPARATOR or something like that.",
      "createdAt": "2021-11-15T23:28:46Z",
      "updatedAt": "2022-02-03T21:09:33Z",
      "closedAt": "2022-02-03T21:09:33Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "For example: `H1(m) = H(\"FROST-RISTRETTO-SHA512\" || \"rho\" || len(m) || m)`",
          "createdAt": "2021-12-13T23:37:11Z",
          "updatedAt": "2021-12-13T23:37:11Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This is done.",
          "createdAt": "2022-02-03T21:09:33Z",
          "updatedAt": "2022-02-03T21:09:33Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOEpUZs84-1pvt",
      "title": "Create list of known implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/16",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "And put it in the README.",
      "createdAt": "2021-11-15T23:31:05Z",
      "updatedAt": "2021-12-13T22:48:11Z",
      "closedAt": "2021-12-13T22:48:11Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Started in #30",
          "createdAt": "2021-12-13T22:48:11Z",
          "updatedAt": "2021-12-13T22:48:11Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOEpUZs84-1p4H",
      "title": "Specify order of commitments hashed into rho",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/17",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [
        "design"
      ],
      "body": "Currently it's an unordered set. We can probably just order by participant ID. We should also hash the participant ID into the value as well. We should encode these IDs as a 32-bit unsigned integer.\r\n\r\n````\r\nfor item in signing_package.signing_commitments.iter() {\r\n        hasher.update(item.index.to_be_bytes());\r\n        let hiding_bytes = item.hiding.0.compress().to_bytes();\r\n        hasher.update(hiding_bytes);\r\n        let binding_bytes = item.binding.0.compress().to_bytes();\r\n        hasher.update(binding_bytes);\r\n    }\r\n```",
      "createdAt": "2021-11-15T23:31:35Z",
      "updatedAt": "2022-01-29T00:58:07Z",
      "closedAt": "2022-01-29T00:58:06Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "On group consensus, we'll move to the order being `(identifier, commitment_i)`",
          "createdAt": "2022-01-13T23:57:56Z",
          "updatedAt": "2022-01-13T23:57:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think #52 addresses this. It's still not clear how to encode the indices in the hash function input, for example. Are they 32-bit unsigned integers? Something else? I'll put up a PR that addresses this further.",
          "createdAt": "2022-01-27T17:25:00Z",
          "updatedAt": "2022-01-27T17:25:00Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #53.",
          "createdAt": "2022-01-29T00:58:06Z",
          "updatedAt": "2022-01-29T00:58:06Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOEpUZs84-1p_c",
      "title": "Ensure that participant identifiers can never be zero",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/18",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "... as zero (0) is a special-case identifier.",
      "createdAt": "2021-11-15T23:32:02Z",
      "updatedAt": "2021-12-13T17:26:42Z",
      "closedAt": "2021-12-13T17:26:42Z",
      "comments": []
    },
    {
      "number": 19,
      "id": "I_kwDOEpUZs84-1qOq",
      "title": "Specify known implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/19",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We should list all known FROST implementations and their status in terms of interoperability. \r\n\r\nSee https://github.com/cfrg/draft-irtf-cfrg-hpke for an example",
      "createdAt": "2021-11-15T23:32:50Z",
      "updatedAt": "2021-11-15T23:33:03Z",
      "closedAt": "2021-11-15T23:33:03Z",
      "comments": []
    },
    {
      "number": 20,
      "id": "I_kwDOEpUZs84-1qpW",
      "title": "Create test vectors for a NIST curve",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/20",
      "state": "CLOSED",
      "author": "isislovecruft",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "interop"
      ],
      "body": "We should specify valid test vectors for something like P256 for users who require following those standards.",
      "createdAt": "2021-11-15T23:34:34Z",
      "updatedAt": "2021-12-13T23:34:50Z",
      "closedAt": "2021-12-13T23:34:50Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "We need to specify this param set in the ciphersuites section: https://github.com/chelseakomlo/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#ciphersuites-ciphersuites",
          "createdAt": "2021-12-13T23:33:13Z",
          "updatedAt": "2021-12-13T23:33:13Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Duplicate of  #11",
          "createdAt": "2021-12-13T23:34:49Z",
          "updatedAt": "2021-12-13T23:34:49Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOEpUZs84-1seN",
      "title": "Change construction for more efficient variant",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/21",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A more efficient variant of FROST was specified in https://eprint.iacr.org/2021/1375; the draft should reflect this.",
      "createdAt": "2021-11-15T23:43:25Z",
      "updatedAt": "2021-12-06T23:26:55Z",
      "closedAt": "2021-12-06T23:26:55Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #28",
          "createdAt": "2021-12-06T23:26:55Z",
          "updatedAt": "2021-12-06T23:26:55Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOEpUZs84-1stj",
      "title": "Interop testing over Ristretto-Sha512",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/22",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "interop"
      ],
      "body": "",
      "createdAt": "2021-11-15T23:45:43Z",
      "updatedAt": "2022-02-02T01:49:47Z",
      "closedAt": "2022-02-02T01:49:40Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "I have another FROST on Ristretto impl ready, I will commence interop testing with `frost-dalek`",
          "createdAt": "2021-12-14T00:10:19Z",
          "updatedAt": "2021-12-14T00:10:19Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Blocked by conformance with #42 first",
          "createdAt": "2022-01-14T00:20:50Z",
          "updatedAt": "2022-01-14T00:20:50Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly can we close this out and track interop in the implementation repos? I don't think this is an issue for the spec to resolve.",
          "createdAt": "2022-02-01T23:50:22Z",
          "updatedAt": "2022-02-01T23:50:22Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> @dconnolly can we close this out and track interop in the implementation repos? I don't think this is an issue for the spec to resolve.\r\n\r\n\ud83d\udcaf \r\n\r\nhttps://github.com/ZcashFoundation/frost/issues/8",
          "createdAt": "2022-02-02T01:49:40Z",
          "updatedAt": "2022-02-02T01:49:40Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOEpUZs84-1tTP",
      "title": "Explicitly define a Schnorr signature inline",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/23",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [
        "editorial"
      ],
      "body": "We define the Schnorr signature operations in 7.1, but need a little more detail?",
      "createdAt": "2021-11-15T23:50:59Z",
      "updatedAt": "2022-01-29T00:58:48Z",
      "closedAt": "2022-01-29T00:58:47Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Does this section resolve this issue?\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#schnorr-signature-operations-dep-schnorr\r\n\r\n![image](https://user-images.githubusercontent.com/552961/149429534-fb81cce6-6352-434c-9556-9bf9ab64bf94.png)\r\n",
          "createdAt": "2022-01-14T00:18:55Z",
          "updatedAt": "2022-01-14T00:18:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yep, I think we can close this. ",
          "createdAt": "2022-01-29T00:58:47Z",
          "updatedAt": "2022-01-29T00:58:47Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOEpUZs84-1ti5",
      "title": "Specify verification",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/24",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Specify with `(R, z)` and also how parameters are used within the verification algorithm",
      "createdAt": "2021-11-15T23:53:02Z",
      "updatedAt": "2021-12-14T21:11:44Z",
      "closedAt": "2021-12-14T21:11:44Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Two TODOs: \r\n1. Add the verification algorithm with `(R, z)` as the output\r\n2. Include information in each ciphersuite about deriving `c`",
          "createdAt": "2021-12-13T23:54:56Z",
          "updatedAt": "2021-12-13T23:55:41Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This may require changing the signing procedures such that the output signatures are of the form `(R, z)` (commitment based, where the challenge is rederived).",
          "createdAt": "2021-12-13T23:56:53Z",
          "updatedAt": "2021-12-13T23:56:53Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo can we close this now that #34 is merged?",
          "createdAt": "2021-12-14T20:56:04Z",
          "updatedAt": "2021-12-14T20:56:20Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, thanks for flagging. Closed by #34\r\n",
          "createdAt": "2021-12-14T21:11:44Z",
          "updatedAt": "2021-12-14T21:11:44Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOEpUZs84-1t9h",
      "title": "Explictly describe assumptions when making each signing participant an aggregator",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/25",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [
        "design"
      ],
      "body": "Vs having a single explicit aggregator:\r\n\r\n![image](https://user-images.githubusercontent.com/552961/141872069-a9d80b4d-094d-4159-8006-0de1843bc0ed.png)\r\n\r\nTo me this assumes some other trust level amongst the signing participants if they are allowed to self-verify its own signature before outputting it.",
      "createdAt": "2021-11-15T23:56:46Z",
      "updatedAt": "2022-01-18T20:00:55Z",
      "closedAt": "2022-01-18T20:00:55Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Use case: https://blog.coinbase.com/threshold-digital-signatures-1d467054acd4",
          "createdAt": "2021-11-16T00:02:26Z",
          "updatedAt": "2021-11-16T00:02:26Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #39",
          "createdAt": "2022-01-18T20:00:55Z",
          "updatedAt": "2022-01-18T20:00:55Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOEpUZs84_C6mv",
      "title": "Drop SUM/PROD notation in favor of subroutines",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/26",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "editorial"
      ],
      "body": "We use SUM/PROD for convenience, but I find it to be somewhat unreadable in text form. For example, this:\r\n\r\n~~~\r\nf_zero = SUM(points[0], points[t]){point}: point[1] * derive_lagrange_coefficient(point[0], L)\r\n~~~\r\n\r\nCould be written as:\r\n\r\n~~~\r\nf_zero = F(0)\r\nfor point in points:\r\n   f_zero = f_zero + (point[1] * derive_lagrange_coefficient(point[0], L))\r\n~~~\r\n\r\nThis is certainly subjective, but I find the latter easier to read in text form. (It would be lovely if we could throw \\sum and \\prod in specs!)",
      "createdAt": "2021-11-18T19:38:01Z",
      "updatedAt": "2022-01-29T00:57:55Z",
      "closedAt": "2022-01-29T00:57:55Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #53.",
          "createdAt": "2022-01-29T00:57:55Z",
          "updatedAt": "2022-01-29T00:57:55Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "I_kwDOEpUZs85Bn_hW",
      "title": "Review length of messages",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/37",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There is currently a limit on the length of messages at `2^16-1`. Let's review this restriction to determine if this length is sufficient, and what to recommend in the setting if longer messages are needed. ",
      "createdAt": "2022-01-13T01:21:08Z",
      "updatedAt": "2022-01-29T01:12:35Z",
      "closedAt": "2022-01-29T01:12:35Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Tracking in #55.",
          "createdAt": "2022-01-29T01:12:35Z",
          "updatedAt": "2022-01-29T01:12:35Z"
        }
      ]
    },
    {
      "number": 38,
      "id": "I_kwDOEpUZs85BoADG",
      "title": "Review naming of nonces",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/38",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "Right now we refer to the nonce pair as `(D, E)` as is done in the FROST paper. Let's review this notation and decide if we should adopt more descriptive naming such as \"hiding\" and \"binding.\"",
      "createdAt": "2022-01-13T01:23:16Z",
      "updatedAt": "2022-02-04T01:21:32Z",
      "closedAt": "2022-02-04T01:21:32Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, please! `(D, E)` are quite vague. @dconnolly would you be able to take this? I think `hiding_nonce` and `blinding_nonce` are perfectly fine terms for `d` and `e`, respectively. I suppose we might call the commitments to these nonces `hiding_nonce_commitment` and `blinding_nonce_commitment`, resp?",
          "createdAt": "2022-01-29T01:12:16Z",
          "updatedAt": "2022-01-29T01:12:16Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #62.",
          "createdAt": "2022-02-03T21:07:53Z",
          "updatedAt": "2022-02-03T21:07:53Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOEpUZs85BoFcw",
      "title": "Review inputs to frost_sign",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/40",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Should we rewrite inputs as a function of the SigningPackage, or have SigningPackage deserialization done externally to these functions?",
      "createdAt": "2022-01-13T01:44:47Z",
      "updatedAt": "2022-02-23T23:27:12Z",
      "closedAt": "2022-02-23T23:27:12Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think these should be expressed in terms of the \"raw\" values. SigningPackage is an external detail. (An application could use a different encoding if it wanted without changing the breaking interoperability \ud83e\udd37 )",
          "createdAt": "2022-01-29T01:11:04Z",
          "updatedAt": "2022-01-29T01:11:04Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOEpUZs85BrqEB",
      "title": "Add test vectors for FROST(P-256, SHA-256)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/41",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See #49 for description of test vectors. ",
      "createdAt": "2022-01-13T15:50:20Z",
      "updatedAt": "2022-02-01T20:42:53Z",
      "closedAt": "2022-02-01T20:42:53Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd prefer we close this and use a single issue to track all test vectors.",
          "createdAt": "2022-02-01T20:42:53Z",
          "updatedAt": "2022-02-01T20:42:53Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOEpUZs85BrrYt",
      "title": "Add test vectors for FROST(ristretto255, SHA-512) ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/42",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "See #49 for description of test vectors. ",
      "createdAt": "2022-01-13T15:55:07Z",
      "updatedAt": "2022-01-29T00:59:18Z",
      "closedAt": "2022-01-29T00:59:18Z",
      "comments": []
    },
    {
      "number": 43,
      "id": "I_kwDOEpUZs85Brz0z",
      "title": "Messages should be fixed size when hashing ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This comes from an audit of FROST implementations, an easy fix for this is to hash the message before it is hashed to derive `rho` or the challenge. \r\n\r\nSee recommendation 2.2 https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf",
      "createdAt": "2022-01-13T16:24:43Z",
      "updatedAt": "2022-02-01T20:44:14Z",
      "closedAt": "2022-02-01T17:45:05Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #55 ",
          "createdAt": "2022-02-01T17:45:05Z",
          "updatedAt": "2022-02-01T17:45:05Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Wait, is it? #55 is about lifting message size limits. This issue is about pre-hashing the message before signing it. They're separable issues, I think. Can we please reopen this and track them separately?",
          "createdAt": "2022-02-01T20:44:14Z",
          "updatedAt": "2022-02-01T20:44:14Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "I_kwDOEpUZs85Bsdf0",
      "title": "Denote when and which information needs to be deleted",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/44",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [
        "next-version"
      ],
      "body": "At various times throughout the protocol, secret information should be securely deleted. We should denote in the draft when these occur and over which information. ",
      "createdAt": "2022-01-13T18:54:20Z",
      "updatedAt": "2022-02-28T19:41:36Z",
      "closedAt": "2022-02-28T19:41:36Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo can you please take this? It should go into the security considerations.",
          "createdAt": "2022-01-29T01:09:32Z",
          "updatedAt": "2022-01-29T01:09:32Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "I_kwDOEpUZs85Bsel0",
      "title": "Add failure case when signers receive insufficient information for a valid signing operation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/45",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For example, if signers receive fewer than `t` commitments, they should abort signing. \r\n\r\nWe should discuss also if signers were to receive commitments where either value is null. ",
      "createdAt": "2022-01-13T18:57:17Z",
      "updatedAt": "2022-02-01T00:27:37Z",
      "closedAt": "2022-02-01T00:27:29Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo can we fold this into #48 and close this?",
          "createdAt": "2022-01-31T16:14:56Z",
          "updatedAt": "2022-01-31T16:14:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "(Done and copied the issue text over)",
          "createdAt": "2022-02-01T00:27:37Z",
          "updatedAt": "2022-02-01T00:27:37Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOEpUZs85BtdCy",
      "title": "Signing participants should verify message before signing",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/47",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "The draft assumes that all participants verify the message that they are signing before they sign it. We should make this assumption explicit in the draft. ",
      "createdAt": "2022-01-13T21:49:30Z",
      "updatedAt": "2022-02-23T16:08:33Z",
      "closedAt": "2022-02-23T16:08:33Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The draft assumes that all participants verify the message that they are signing before they sign it. We should make this assumption explicit in the draft.\r\n\r\n@chelseakomlo What does it mean to verify the message? This seems like an application-specific consideration that might be useful to note in the security considerations, but I don't see a protocol change required here.",
          "createdAt": "2022-01-29T01:00:17Z",
          "updatedAt": "2022-01-29T01:00:17Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "It is application-specific, but I think we should call this out specifically because it is easy to overlook or forget about. I'll note it as a security consideration but also say that how this is performed is application-specific.",
          "createdAt": "2022-02-01T17:43:16Z",
          "updatedAt": "2022-02-01T17:43:16Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I guess I don't understand what sort of verification you have in mind. Do you have an example?",
          "createdAt": "2022-02-01T17:44:04Z",
          "updatedAt": "2022-02-01T17:44:04Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOEpUZs85Bt8XV",
      "title": "Specify places in the spec where the protocol should error or abort",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/48",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [
        "next-version"
      ],
      "body": "We should add everywhere in the spec where the protocol should error and/or abort, such as: \r\n\r\n[X] When a signature share is invalid\r\n[X] When `t` is set to `1`- `THRESHOLD_LIMIT` MUST be greater than one\r\n[X] When `t` is greater than `n`\r\n[X] When any received commitment is null\r\n[X] When a participant index is `0`\r\n[X] When the message that is requested to be signed is invalid\r\n[X] When a signing request is made with respect to commitments that were used for a previous signature (i.e, request for a nonce reuse)\r\n[X] Verification of a signature share fails on aggregation\r\n\r\n",
      "createdAt": "2022-01-13T23:22:00Z",
      "updatedAt": "2022-03-28T19:25:04Z",
      "closedAt": "2022-03-28T19:25:04Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Updated status of checks, and removed unnecessary checks. ",
          "createdAt": "2022-03-28T19:25:04Z",
          "updatedAt": "2022-03-28T19:25:04Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "I_kwDOEpUZs85Bt_C3",
      "title": "Test Vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/49",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Here are the test vectors that we would like for each ciphersuite:\r\n\r\n- Success case\r\n1. (2,3), where the threshold is 2 and number of participants are 3\r\n2. Inputs should be deterministic, outputs should be the defined serialized structs. \r\n3. Tests should validate for the (2,3) signers and (3,3) signers\r\n\r\n- Failure cases: \r\n1. Participant index of 0\r\n2. When t is one",
      "createdAt": "2022-01-13T23:30:26Z",
      "updatedAt": "2022-02-12T01:38:54Z",
      "closedAt": "2022-02-12T01:38:54Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Related: https://github.com/ZcashFoundation/frost/blob/main/frost-ristretto255/tests/frost.rs",
          "createdAt": "2022-01-28T22:09:23Z",
          "updatedAt": "2022-01-28T22:09:23Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Linking #42 and #41, and close those two.",
          "createdAt": "2022-01-29T00:59:14Z",
          "updatedAt": "2022-01-29T00:59:14Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #60 for Ristretto, opening #41 to track FROST(P-256, SHA-256)",
          "createdAt": "2022-02-01T20:05:47Z",
          "updatedAt": "2022-02-01T20:05:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We haven't resolved this yet! Test vectors still aren't in the draft, and not all cases above have been covered.",
          "createdAt": "2022-02-01T20:24:14Z",
          "updatedAt": "2022-02-01T20:24:14Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOEpUZs85BuDm5",
      "title": "Clarify HashToScalar/H2 reduction to scalars",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/50",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "\"c\" and \"rho\" are both the result of hash-to-scalar (H2), but we don't really make clear how the scalar conversion is done.\r\n\r\n",
      "createdAt": "2022-01-13T23:45:35Z",
      "updatedAt": "2022-02-04T01:20:49Z",
      "closedAt": "2022-02-04T01:20:49Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Same goes for the output of H1, too, which is assumed to map to a non-zero scalar.",
          "createdAt": "2022-01-26T23:12:19Z",
          "updatedAt": "2022-01-26T23:12:33Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed in #62.",
          "createdAt": "2022-02-03T21:08:04Z",
          "updatedAt": "2022-02-03T21:08:04Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOEpUZs85BuDql",
      "title": "Drop HashToScalar, clarify H2 reduction to scalars",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/51",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\"c\" and \"rho\" are both the result of hash-to-scalar (H2), but we don't really make clear how the scalar conversion is done.",
      "createdAt": "2022-01-13T23:45:49Z",
      "updatedAt": "2022-01-13T23:46:46Z",
      "closedAt": "2022-01-13T23:46:46Z",
      "comments": []
    },
    {
      "number": 54,
      "id": "I_kwDOEpUZs85CoRGF",
      "title": "Verification of signature shares should be mandatory",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/54",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "This also means that whoever is performing aggregate needs to be given the correct public keys after keygen is performed. I.e, those keys should be valid, but it is up to the implementation to ensure that they are.",
      "createdAt": "2022-01-28T21:13:29Z",
      "updatedAt": "2022-01-31T14:58:11Z",
      "closedAt": "2022-01-31T14:58:11Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll take this.",
          "createdAt": "2022-01-29T01:00:32Z",
          "updatedAt": "2022-01-29T01:00:32Z"
        }
      ]
    },
    {
      "number": 55,
      "id": "I_kwDOEpUZs85CoTG3",
      "title": "Length of message to be signed should be larger",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/55",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss"
      ],
      "body": "Currently messages are limited to the `2^16` length in a `SigningPackage`, but instead this should be limited by the underlying hash function minus minus overhead such as public key, commitment set, etc. \r\n\r\n\r\n",
      "createdAt": "2022-01-28T21:24:43Z",
      "updatedAt": "2022-02-14T18:28:01Z",
      "closedAt": "2022-02-14T18:28:01Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Upon revisiting this, I think we ought to remove the practical limit entirely and let applications define it. We should define the theoretical limit based on the underlying cryptographic hash function, but how applications choose to wrap up messages between coordinator and signers should be left to those applications, I think.\r\n\r\nBasically, I think I'm now advocating for removing `SigningPackage` and the like as _requirements_. A shared wire format isn't necessary for interoperability here. ",
          "createdAt": "2022-01-31T16:43:03Z",
          "updatedAt": "2022-01-31T16:43:03Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that the message length should be unbounded but I'm uncertain about removing the `SigningPackage` wire format altogether. Do you mind saying why this is a preferable option than just allowing the message length to be variable-sized in this data structure?",
          "createdAt": "2022-01-31T23:48:25Z",
          "updatedAt": "2022-01-31T23:48:25Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do you mind saying why this is a preferable option than just allowing the message length to be variable-sized in this data structure?\r\n\r\nSure: it will surely vary by use case and application embedding, so a one-size-fits-all structure isn't necessary for interop. Thus, I think we ought to just remove it.",
          "createdAt": "2022-02-01T00:12:50Z",
          "updatedAt": "2022-02-01T00:12:50Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok. We can keep `SigningPackage` as an example, but remove the requirement that implementations enforce this structure? I can do this change. ",
          "createdAt": "2022-02-01T15:59:47Z",
          "updatedAt": "2022-02-01T15:59:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I would hold off until we have a larger discussion about it. I think this relates to the interface that this specification should expose, which is something I raised in #62.",
          "createdAt": "2022-02-01T16:00:47Z",
          "updatedAt": "2022-02-01T16:00:47Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we close as resolved?",
          "createdAt": "2022-02-09T19:31:05Z",
          "updatedAt": "2022-02-09T19:31:05Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we can, yeah. The message limit was lifted since the API no longer operates in terms of SignaturePackages and the like. @chelseakomlo, if you're OK with this, can you please close?",
          "createdAt": "2022-02-09T20:47:22Z",
          "updatedAt": "2022-02-09T20:47:22Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "I_kwDOEpUZs85CoUPA",
      "title": "Limit number of signers to 2^16-1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/56",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There is no theoretical hard bound on the number of participants, but we cap the number of participants to something reasonable just for ease of managing secret key material. ",
      "createdAt": "2022-01-28T21:31:43Z",
      "updatedAt": "2022-01-31T18:48:50Z",
      "closedAt": "2022-01-31T18:48:50Z",
      "comments": [
        {
          "author": "isislovecruft",
          "authorAssociation": "COLLABORATOR",
          "body": "2^16-1 because participant index cannot be zero.",
          "createdAt": "2022-01-28T22:05:22Z",
          "updatedAt": "2022-01-28T22:05:22Z"
        }
      ]
    },
    {
      "number": 57,
      "id": "I_kwDOEpUZs85CoUy0",
      "title": "Use Commitment List Terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/57",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently the spec uses `B` as a variable name for the commitment set for a signing session. Instead, we should use the variable name `commitment_list`.",
      "createdAt": "2022-01-28T21:35:15Z",
      "updatedAt": "2022-01-29T00:57:25Z",
      "closedAt": "2022-01-29T00:57:25Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Or `commitment_list` since we assume it to have a well-defined order based no participant index?",
          "createdAt": "2022-01-28T22:03:03Z",
          "updatedAt": "2022-01-28T22:03:03Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #53.",
          "createdAt": "2022-01-29T00:57:25Z",
          "updatedAt": "2022-01-29T00:57:25Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOEpUZs85CoVYi",
      "title": "Commitment set should be hashed in ascending order of participant id",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/58",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the commitment set does not specify ordering of elements that are hashed in. Instead, we should hash in commitment elements in ascending order of the participant identifier. ",
      "createdAt": "2022-01-28T21:38:52Z",
      "updatedAt": "2022-01-29T00:58:26Z",
      "closedAt": "2022-01-29T00:57:18Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #53.",
          "createdAt": "2022-01-29T00:57:18Z",
          "updatedAt": "2022-01-29T00:57:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "(This was also a dupe!)",
          "createdAt": "2022-01-29T00:58:26Z",
          "updatedAt": "2022-01-29T00:58:26Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "I_kwDOEpUZs85C-Far",
      "title": "Define alternative signature format with (response, commitment) ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/64",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RFC8032 requires that the signature format be in the form (response, challenge) but some implementations would like the format to be (response, commitment)  in order to allow for batched signature verification. We should allow for this alternative format in this draft.",
      "createdAt": "2022-02-03T21:26:36Z",
      "updatedAt": "2022-02-09T19:30:00Z",
      "closedAt": "2022-02-09T19:30:00Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this will need to be a ciphersuite-specific detail. How we decide to present that in the draft is not immediately clear to me right now.",
          "createdAt": "2022-02-03T21:27:52Z",
          "updatedAt": "2022-02-03T21:27:52Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Re-reading this, small clarification: RFC8032 signatures are of the form (commitment, response), and this is [what's in the draft now](https://cfrg.github.io/draft-irtf-cfrg-frost/draft-irtf-cfrg-frost.html#name-signature-share-aggregation) (`R` is the group commitment and `z` is the response, to use terminology here). Unless I'm misunderstanding, I think we can close this.",
          "createdAt": "2022-02-06T01:42:48Z",
          "updatedAt": "2022-02-06T01:42:55Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah i think we can close",
          "createdAt": "2022-02-09T19:29:50Z",
          "updatedAt": "2022-02-09T19:29:50Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOEpUZs85DD124",
      "title": "Single-party signature generation and verification, accounting for cofactors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/68",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "isislovecruft"
      ],
      "labels": [
        "next-version"
      ],
      "body": "The [current verification](https://cfrg.github.io/draft-irtf-cfrg-frost/draft-irtf-cfrg-frost.html#name-schnorr-signature-operation) routine diverges from RFC8032. In particular, it does this:\r\n\r\n~~~\r\ndef schnorr_signature_verify(msg, sig = (R, z), PK):\r\n    msg_hash = H3(msg)\r\n    comm_enc = G.SerializeElement(R)\r\n    pk_enc = G.SerializeElement(PK)\r\n    challenge_input = group_comm_enc || group_public_key_enc || msg_hash\r\n    c = H2(challenge_input)\r\n\r\n    l = ScalarBaseMult(z)\r\n    r = R + (c * PK)\r\n    if l == r:\r\n      return 1\r\n    return 0\r\n~~~\r\n\r\nWhen it should do something like this (partially modified from [ed25519-zebra's ZIP15-based verification check](https://github.com/ZcashFoundation/ed25519-zebra/blob/main/src/verification_key.rs)):\r\n\r\n~~~\r\ndef schnorr_signature_verify(msg, sig = (R, z), PK):\r\n    msg_hash = H3(msg)\r\n    comm_enc = G.SerializeElement(R)\r\n    pk_enc = G.SerializeElement(PK)\r\n    challenge_input = group_comm_enc || group_public_key_enc || msg_hash\r\n    c = H2(challenge_input)\r\n\r\n    # Check that [8][Z]B = [8]R + [8][c]PK:\r\n    # <=> 0 == [8](R - ([z]B - [c]PK))\r\n    # <=> 0 == [8](R - R'), where R' = [z]B - [c]PK\r\n    \r\n    Z = ScalarBaseMult(z)\r\n    Rp = c * PK\r\n    D = 8 * (R - Rp)\r\n    return D == Identity()\r\n~~~\r\n\r\nThis is specific to RFC8032 and Ed25519, where the cofactor of the curve is 8, so we probably need to write this in terms of a more general cofactor `h`. This probably relates to #12, so cc @dconnolly for a sanity check. =)",
      "createdAt": "2022-02-06T01:53:30Z",
      "updatedAt": "2022-03-28T17:18:14Z",
      "closedAt": "2022-03-28T17:18:14Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes the 8 is because the Edwards curve has that cofactor. In the p256 and Ristretto cases, that h = 1. One way to handle this is to make the h explicit in our formulas and explicit in the ciphersuites, so h = 1, or h = 8, or whatever. ",
          "createdAt": "2022-02-09T19:29:00Z",
          "updatedAt": "2022-02-09T19:29:00Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Relatedly : https://github.com/cfrg/draft-irtf-cfrg-frost/issues/12",
          "createdAt": "2022-02-09T19:59:35Z",
          "updatedAt": "2022-02-09T19:59:35Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "```\r\ndef schnorr_signature_verify(msg, sig = (R, z), PK):\r\n    comm_enc = G.SerializeElement(R)\r\n    pk_enc = G.SerializeElement(PK)\r\n    challenge_input = comm_enc || pk_enc || msg\r\n    c = H2(challenge_input)\r\n\r\n    Z = ScalarBaseMult(z)\r\n    Rp = c * PK\r\n    check = h * (Z - Rp - R)\r\n    return check == G.Identity()\r\n ```",
          "createdAt": "2022-02-28T19:47:34Z",
          "updatedAt": "2022-02-28T19:47:34Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Notes: \r\n- Right now we don't have verification algorithms defined externally for P-256 and Ristretto (either for plain Schnorr or EdDSA) \r\n- We should define verification algorithms for these two, but others we should reference existing standards. ",
          "createdAt": "2022-02-28T20:00:55Z",
          "updatedAt": "2022-02-28T20:13:31Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "I_kwDOEpUZs85DD16k",
      "title": "Add secp256k1 ciphersuite and test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/69",
      "state": "OPEN",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "isislovecruft",
        "chris-wood"
      ],
      "labels": [
        "enhancement"
      ],
      "body": "The adoption call for this draft indicated that we'd need to support specializations for all RFC8032 signatures, including Ed25519 and Ed448. This should be a trivial extension now that we have the ed25519 suite. ",
      "createdAt": "2022-02-06T01:55:19Z",
      "updatedAt": "2022-03-01T21:03:49Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Also, maybe we need to add ciphersuites for other curves that are used for Schnorr signatures? I _think_ this would include, e.g., secp256k1?",
          "createdAt": "2022-02-06T01:58:30Z",
          "updatedAt": "2022-02-06T01:58:30Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> Also, maybe we need to add ciphersuites for other curves that are used for Schnorr signatures? I _think_ this would include, e.g., secp256k1?\n\nI had vague plans to implement this anyway for our FROST impls but wasn't sure if we had interest in standardizing it. I was under the impression that secp256k1 is usually used in ECDSA, and that standardizing a Schnorr signature using it would be going against the grain (imo in a good direction, but). Are there other Schnorr systems using it out there?",
          "createdAt": "2022-02-09T19:57:44Z",
          "updatedAt": "2022-02-09T19:57:44Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Are there other Schnorr systems using it out there?\r\n\r\nI dunno! That's the question, I guess. We should make sure we show how to implement FROST for all curves that folks care about.",
          "createdAt": "2022-02-09T20:46:26Z",
          "updatedAt": "2022-02-09T20:46:26Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "I_kwDOEpUZs85DD1_q",
      "title": "Signature encoding",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/70",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "The draft doesn't take an opinionated stance on how to encode signatures -- it currently just spits out the commitment and response pair `(R, z)`. On the contrary, RFC8032 signatures are represented as the concatenation of `R` and `z`, both serialized. It seems like the RFC8032 suite ought to produce signatures in this format. But what about other ciphersuites?",
      "createdAt": "2022-02-06T01:57:49Z",
      "updatedAt": "2022-02-19T03:11:33Z",
      "closedAt": "2022-02-19T03:11:33Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "I lean towards this, we have Signature types that are just the bytes of those elements and can easily be serialized to a concatenation",
          "createdAt": "2022-02-09T19:26:00Z",
          "updatedAt": "2022-02-09T19:26:00Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "To clarify, by \"this\" you mean what's currently in the draft?",
          "createdAt": "2022-02-09T20:45:45Z",
          "updatedAt": "2022-02-09T20:45:45Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "per meeting: \r\n\r\n` Serialize: Ciphersuite.SerializeElement(R) || Ciphersuite.SerializeScalar(z)\r\n`",
          "createdAt": "2022-02-14T18:26:30Z",
          "updatedAt": "2022-02-14T18:26:30Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "I_kwDOEpUZs85DN_tU",
      "title": "Add check for valid points",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/72",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "The FROST paper assumes a prime order group. However, when we interoperate with curves that can have  invalid points, we'll need to identify places in the draft where these checks should occur. ",
      "createdAt": "2022-02-08T20:47:44Z",
      "updatedAt": "2022-02-19T03:11:33Z",
      "closedAt": "2022-02-19T03:11:33Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo I think this is already addressed [in this section](https://cfrg.github.io/draft-irtf-cfrg-frost/draft-irtf-cfrg-frost.html#section-6.1.1). Can you please confirm?",
          "createdAt": "2022-02-08T20:55:55Z",
          "updatedAt": "2022-02-08T20:55:55Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Just in case, is there any danger to not checking for valid points when verifying? I think not because it's verification and everything is public but I was working on this  recently and was curious",
          "createdAt": "2022-02-09T19:54:56Z",
          "updatedAt": "2022-02-09T19:54:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good question. I don't think so? It seems harmless to add a check, just to be safe, but... here be dragons.",
          "createdAt": "2022-02-09T20:48:00Z",
          "updatedAt": "2022-02-09T20:48:00Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks like RFC8032 checks for valid points when verifying, so we should probably as well in the places where we define single-party verification. \r\n\r\nhttps://datatracker.ietf.org/doc/html/rfc8032#section-3.4\r\n\r\nGood catch @dconnolly ! ",
          "createdAt": "2022-02-10T21:35:16Z",
          "updatedAt": "2022-02-10T21:46:26Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo will you have time to prepare a PR for this, or would you like me to do it?",
          "createdAt": "2022-02-10T21:53:44Z",
          "updatedAt": "2022-02-10T21:53:44Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood If you have time to do this, that would be fantastic ",
          "createdAt": "2022-02-10T22:02:02Z",
          "updatedAt": "2022-02-10T22:02:02Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Leaving open as a reminder to ourselves to review this again after the draft is more stable. ",
          "createdAt": "2022-02-14T18:21:20Z",
          "updatedAt": "2022-02-14T18:21:20Z"
        }
      ]
    },
    {
      "number": 82,
      "id": "I_kwDOEpUZs85Dvo1F",
      "title": "Question regarding the concatenation of contextString in POC code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/82",
      "state": "CLOSED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Hi, looking at the POC code, I see there is a space between the `contextString` and the `rho`, `chal` and `digest` words\r\n```python\r\ndef H1(self, m):\r\n        hash_input = _as_bytes(\"FROST-RISTRETTO255-SHA512 rho\") + m\r\n...\r\n```\r\nbut in the document there is no space (see `H(contextString || \"rho\" || m)`).\r\n\r\nJust looking for clarification, thanks",
      "createdAt": "2022-02-14T00:19:41Z",
      "updatedAt": "2022-02-15T00:42:54Z",
      "closedAt": "2022-02-15T00:42:54Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's go with no space -- thanks @aldenml!",
          "createdAt": "2022-02-14T18:19:48Z",
          "updatedAt": "2022-02-14T18:19:48Z"
        }
      ]
    },
    {
      "number": 99,
      "id": "I_kwDOEpUZs85E44Xa",
      "title": "Produce test vector json in separate files for each ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/99",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "enhancement"
      ],
      "body": "This would make it easier for importing the test vectors for only the ciphersuite(s) you care about into your own code",
      "createdAt": "2022-03-01T20:05:10Z",
      "updatedAt": "2022-03-28T18:36:04Z",
      "closedAt": "2022-03-28T18:36:04Z",
      "comments": []
    },
    {
      "number": 106,
      "id": "I_kwDOEpUZs85FIlnM",
      "title": "trusted_dealer_keygen should output a VSS commitment",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/106",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "We discuss right now that `trusted_dealer_keygen` should output a VSS commitment, but the interface for generating secret shares does not output the coefficients, and so is incompatible with what is needed to generate a commitment. We should change the interface so that it is possible, and then update `trusted_dealer_keygen` to generate and output the VSS commitment. \r\n",
      "createdAt": "2022-03-04T17:24:15Z",
      "updatedAt": "2022-03-28T17:49:07Z",
      "closedAt": "2022-03-28T17:49:07Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "In resolving this change, we must also ensure the pseudocode notation matches that of the reference implementation.",
          "createdAt": "2022-03-16T16:15:54Z",
          "updatedAt": "2022-03-16T16:15:54Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #126",
          "createdAt": "2022-03-28T17:49:07Z",
          "updatedAt": "2022-03-28T17:49:07Z"
        }
      ]
    },
    {
      "number": 108,
      "id": "I_kwDOEpUZs85FMOhA",
      "title": "Simplify commitment list structure",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/108",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "enhancement",
        "editorial"
      ],
      "body": "The data structure we use for the group commitment list is a bit _too_ precise. For example, implementations could choose to do store this in some other way, subject to the same sorted constraint. We should change this so that the data structure contents are clear, but the implementation-specific details are not forced upon users. One way to do that might be to say that the commitment list is a sorted list of objects, where each object has named fields for things like the \"index,\" \"hiding_nonce_commitment,\" and \"binding_nonce_commitment.\" ",
      "createdAt": "2022-03-07T02:47:59Z",
      "updatedAt": "2022-05-26T17:20:14Z",
      "closedAt": "2022-05-26T17:20:14Z",
      "comments": []
    },
    {
      "number": 110,
      "id": "I_kwDOEpUZs85FQx2e",
      "title": "secret_share_shard should allow both the input secret and coefficients to be zero",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/110",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Currently, `secret_share_shard` requires that coefficients be non-zero, as they are sampled using `RandomScalar`. Further, `DeserializeElement` requires non-identity elements. However, both the secret `s` in `secret_share_shard` should be allowed to be zero, as well as each additional coefficient that is sampled at random. This is to ensure the largest possible search space for an adversary.\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#shamir-secret-sharing-dep-shamir",
      "createdAt": "2022-03-07T23:05:41Z",
      "updatedAt": "2022-03-28T18:21:14Z",
      "closedAt": "2022-03-28T18:21:14Z",
      "comments": []
    },
    {
      "number": 111,
      "id": "I_kwDOEpUZs85FU5ES",
      "title": "Highlight that single-round FROST is out of scope for the draft",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/111",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "The draft is clearly two-round, but we do not mention that FROST has a single-round variant. We should add 1-2 sentences saying what the single-round variant is, and that it is out of scope for this document. \r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#two-round-frost-frost-spec",
      "createdAt": "2022-03-08T20:48:38Z",
      "updatedAt": "2022-03-21T23:31:28Z",
      "closedAt": "2022-03-21T23:31:28Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #123",
          "createdAt": "2022-03-21T23:31:28Z",
          "updatedAt": "2022-03-21T23:31:28Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "I_kwDOEpUZs85FU6F0",
      "title": "Clarify that group info is public",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/112",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "We have a diagram that shows the protocol flow that shows that group info is an input to the coordinator and to each signer. We should clarify that all elements in group info are strictly public values.",
      "createdAt": "2022-03-08T20:53:45Z",
      "updatedAt": "2022-03-21T23:00:17Z",
      "closedAt": "2022-03-21T23:00:17Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #121 ",
          "createdAt": "2022-03-21T23:00:17Z",
          "updatedAt": "2022-03-21T23:00:17Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOEpUZs85FVLgv",
      "title": "Inconsistent notation for group public key",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/114",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "In the section on Two-Round FROST, we discuss the group's public key `PK`, but in `trusted_dealer_keygen` we use the notation `public_key`. We should also specify in the Two-Round FROST section that `PK` is an output from the key generation protocol, since participants cannot derive it directly themselves. ",
      "createdAt": "2022-03-08T21:54:16Z",
      "updatedAt": "2022-03-15T19:59:54Z",
      "closedAt": "2022-03-15T19:59:53Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #120 ",
          "createdAt": "2022-03-15T19:59:53Z",
          "updatedAt": "2022-03-15T19:59:53Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "I_kwDOEpUZs85FVMXD",
      "title": "Group info additionally requires each signer's individual public key",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/115",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "Right now, we describe the coordinator and each participant as having the same `group info`. However, in order for the coordinator to perform `verify_signature_share`, the coordinator additionally requires each participant's public key. \r\n\r\nWe can have those values be within `group_info`, to make notation easy, and to not exclude the setting where a coordinator is not used. \r\n\r\nWe also need `trusted_dealer_keygen` to output these individual public keys, or to derive a function so that the coordinator and/or participants can derive these values themselves (it is possible to do so using only the VSS commitment). ",
      "createdAt": "2022-03-08T21:58:39Z",
      "updatedAt": "2022-03-21T23:00:00Z",
      "closedAt": "2022-03-21T22:59:59Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #121",
          "createdAt": "2022-03-21T22:59:59Z",
          "updatedAt": "2022-03-21T22:59:59Z"
        }
      ]
    },
    {
      "number": 117,
      "id": "I_kwDOEpUZs85Fq-Mk",
      "title": "Fix overly broad text",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/117",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "Unrelated to this PR, but this sentence in general is even a bit broad - deriving nonces deterministically is insecure for FROST, but not necessarily for any multi-party signature scheme.\r\n\r\n_Originally posted by @chelseakomlo in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/116#discussion_r826276585_",
      "createdAt": "2022-03-14T20:54:06Z",
      "updatedAt": "2022-03-15T19:47:34Z",
      "closedAt": "2022-03-15T19:47:33Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #119 ",
          "createdAt": "2022-03-15T19:47:33Z",
          "updatedAt": "2022-03-15T19:47:33Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDOEpUZs85GLBJj",
      "title": "Define how participants derive each other's public keys",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/125",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "Currently in `trusted_dealer_keygen` and `vss_commit`, it is shown that the VSS commitment and public key are outputs, but we do not define how participants derive all other participant's public keys from these values. ",
      "createdAt": "2022-03-22T20:53:03Z",
      "updatedAt": "2022-03-29T15:24:11Z",
      "closedAt": "2022-03-29T15:24:10Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm... why does each participant need the participant of other parties?",
          "createdAt": "2022-03-28T16:40:55Z",
          "updatedAt": "2022-03-28T16:40:55Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "We currently have the same \"group info\" as input to both the coordinator and each participant, and this group info contains the public keys for both the group and each participant. ",
          "createdAt": "2022-03-28T17:05:12Z",
          "updatedAt": "2022-03-28T17:05:12Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #132 ",
          "createdAt": "2022-03-29T15:24:10Z",
          "updatedAt": "2022-03-29T15:24:10Z"
        }
      ]
    },
    {
      "number": 131,
      "id": "I_kwDOEpUZs85Gjoqo",
      "title": "Update POC to include the cofactor schnorr checks",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/131",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [
        "bug"
      ],
      "body": "",
      "createdAt": "2022-03-28T17:18:40Z",
      "updatedAt": "2022-06-20T13:24:19Z",
      "closedAt": "2022-06-20T13:24:19Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Suggest closing without fix.",
          "createdAt": "2022-05-27T12:09:55Z",
          "updatedAt": "2022-05-27T12:09:55Z"
        }
      ]
    },
    {
      "number": 141,
      "id": "I_kwDOEpUZs85H9EWc",
      "title": "`order()` must return a type that can hold `p`, the `Scalar` type goes to p-1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/141",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-18T16:02:43Z",
      "updatedAt": "2022-05-13T23:55:45Z",
      "closedAt": "2022-05-13T23:55:45Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems to be an implementation issue, so I recommend we close without change.",
          "createdAt": "2022-04-19T20:51:48Z",
          "updatedAt": "2022-04-19T20:51:48Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed, closing (@dconnolly please re-open with a comment/suggestion if you disagree)",
          "createdAt": "2022-05-13T23:55:45Z",
          "updatedAt": "2022-05-13T23:55:45Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "I_kwDOEpUZs85H9G0Y",
      "title": "Change \"participant index\" terminology to \"participant identifier\" or \"participant id\"",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/142",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "The difference between an index in a list and a participant index can get confusing, so let's just use \"identifier\" terminology.",
      "createdAt": "2022-04-18T16:13:36Z",
      "updatedAt": "2022-05-17T14:54:46Z",
      "closedAt": "2022-05-17T14:54:45Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good point! \"identifier\" does seem better than \"index\" for that reason.",
          "createdAt": "2022-04-19T20:51:23Z",
          "updatedAt": "2022-04-19T20:51:23Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #167\r\n",
          "createdAt": "2022-05-17T14:54:45Z",
          "updatedAt": "2022-05-17T14:54:45Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "I_kwDOEpUZs85H9Qvn",
      "title": "Specify that NUM_SIGNERS and THRESHOLD_LIMIT must be in GF(p)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/144",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-18T17:03:08Z",
      "updatedAt": "2022-05-13T23:54:03Z",
      "closedAt": "2022-05-13T23:54:02Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #165 ",
          "createdAt": "2022-05-13T23:54:02Z",
          "updatedAt": "2022-05-13T23:54:02Z"
        }
      ]
    },
    {
      "number": 151,
      "id": "I_kwDOEpUZs85IHPv2",
      "title": "Specify all group member functions in the ciphersuite section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/151",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "We define serialization things, but not the rest (like Order(), Identity(), etc).",
      "createdAt": "2022-04-20T15:34:44Z",
      "updatedAt": "2022-05-26T17:20:14Z",
      "closedAt": "2022-05-26T17:20:14Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #162",
          "createdAt": "2022-05-09T17:14:51Z",
          "updatedAt": "2022-05-09T17:14:51Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo I don't think #162 resolves this issue. In particular, this issue was meant to describe how each of the member functions of G should be implemented for the group in the ciphersuite. In particular, Order and Identity are absent from the group description of each ciphersuite.",
          "createdAt": "2022-05-09T18:00:53Z",
          "updatedAt": "2022-05-09T18:00:53Z"
        }
      ]
    },
    {
      "number": 152,
      "id": "I_kwDOEpUZs85IHRkm",
      "title": "Use non-contiguous indexes for participants in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/152",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "So use \"1,3\" instead of \"1,2,\" for example.",
      "createdAt": "2022-04-20T15:40:26Z",
      "updatedAt": "2022-05-26T17:20:14Z",
      "closedAt": "2022-05-26T17:20:14Z",
      "comments": []
    },
    {
      "number": 155,
      "id": "I_kwDOEpUZs85IgWGx",
      "title": "Clarify member functions on G",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/155",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chelseakomlo"
      ],
      "labels": [],
      "body": "This is a reminder to add a a couple words saying that G in the draft is not the a mathematical type but a data type with associated functions. ",
      "createdAt": "2022-04-26T20:24:27Z",
      "updatedAt": "2022-05-03T17:56:23Z",
      "closedAt": "2022-05-03T17:56:23Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #162",
          "createdAt": "2022-05-03T17:56:23Z",
          "updatedAt": "2022-05-03T17:56:23Z"
        }
      ]
    },
    {
      "number": 157,
      "id": "I_kwDOEpUZs85IhU6j",
      "title": "Note TLS syntax origin",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/157",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Citing RFC8446.",
      "createdAt": "2022-04-27T02:26:37Z",
      "updatedAt": "2022-05-21T22:06:10Z",
      "closedAt": "2022-05-21T22:06:10Z",
      "comments": []
    },
    {
      "number": 159,
      "id": "I_kwDOEpUZs85IlQfE",
      "title": "Additional clarification on trusted dealer threat model",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/159",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The dealer is trusted to:\r\n1. Generate good randomness\r\n2. Delete secret values after distributing shares\r\n\r\nWe should specify these criteria when discussing trusted dealer key generation. ",
      "createdAt": "2022-04-27T18:22:17Z",
      "updatedAt": "2022-05-09T21:02:08Z",
      "closedAt": "2022-05-09T21:02:07Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #166",
          "createdAt": "2022-05-09T21:02:07Z",
          "updatedAt": "2022-05-09T21:02:07Z"
        }
      ]
    },
    {
      "number": 160,
      "id": "I_kwDOEpUZs85IlTVa",
      "title": "Clarify subgroup check in deserialization ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/160",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "We should make it clearer that deserialization also involves checking that the element is within the proper subgroup for non-prime order groups, and that it is assumed this check is performed before calling `sign` or `verify`",
      "createdAt": "2022-04-27T18:33:58Z",
      "updatedAt": "2022-05-27T16:02:21Z",
      "closedAt": "2022-05-27T16:02:21Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly @chelseakomlo any updates on this?",
          "createdAt": "2022-05-25T11:18:33Z",
          "updatedAt": "2022-05-25T11:18:33Z"
        }
      ]
    },
    {
      "number": 161,
      "id": "I_kwDOEpUZs85I6QrN",
      "title": "Make nonce generation a function of randomness in the first round",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/161",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "documentation",
        "editorial",
        "interop"
      ],
      "body": "So that function is deterministic, parameterized by randomness\r\n\r\nThis is out of feedback from Ian Goldberg and nicely allows different means of generating nonces (like H(random || secret_share || \"contextString\") per recommendation by @FiloSottile as a lesson learned from ECDSA implementations",
      "createdAt": "2022-05-02T18:58:58Z",
      "updatedAt": "2022-05-27T16:44:36Z",
      "closedAt": "2022-05-27T16:44:36Z",
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #182",
          "createdAt": "2022-05-27T16:44:36Z",
          "updatedAt": "2022-05-27T16:44:36Z"
        }
      ]
    },
    {
      "number": 164,
      "id": "I_kwDOEpUZs85JQRN8",
      "title": "`trusted_dealer_keygen` should also return the PK, group public verification key",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/164",
      "state": "OPEN",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-08T22:17:59Z",
      "updatedAt": "2022-05-09T22:33:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This value is the first element in the VSS commitment- do you think having it also output as a separate variable would be clearer? ",
          "createdAt": "2022-05-09T17:11:13Z",
          "updatedAt": "2022-05-09T17:11:13Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> This value is the first element in the VSS commitment- do you think having it also output as a separate variable would be clearer?\r\n\r\nAs the function is currently written, it produces PK and then never returns it, strictly from the secret_key, with no obvious relation to the VSS commitment / coefficients; either we should remove that line, and/or explictly say that vss_commitment[0] is the PK/group verifying key",
          "createdAt": "2022-05-09T22:30:28Z",
          "updatedAt": "2022-05-09T22:30:28Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> \r\n\r\nI would explicitly return it but as:\r\n\r\n```\r\nOutputs:\r\n  - signer_private_keys\r\n  - group public key\r\n  - vss_commitment\r\n\r\n...\r\n\r\n    return signer_private_keys, vss_commitment[0], vss_commitment\r\n```\r\n\r\nOr something like that. Internally, group_public_key == vss_commitment[0], but we should make it easy to just spit it out and not require meddling in the guts of the vss commitment 'type'",
          "createdAt": "2022-05-09T22:33:52Z",
          "updatedAt": "2022-05-09T22:33:52Z"
        }
      ]
    },
    {
      "number": 173,
      "id": "I_kwDOEpUZs85JxvWq",
      "title": "Nice to have: deterministic secret_share_shard ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/173",
      "state": "OPEN",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a nice to have and not a blocker, but `secret_share_shard` in the appendix could be made deterministic, to allow for ease of testing. ",
      "createdAt": "2022-05-16T21:59:43Z",
      "updatedAt": "2022-07-14T21:12:04Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "+1 -- every function that generates randomness internally should probably be retrofitted to take randomness as an explicit parameter so we can produce test vectors as needed.",
          "createdAt": "2022-05-16T23:41:44Z",
          "updatedAt": "2022-05-16T23:41:44Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Could we have the vectors defined as using a stream cipher per-signer to generate random bytes?\r\n\r\n> random_bytes(n): Outputs n bytes, sampled uniformly at random using a cryptographically secure pseudorandom number generator (CSPRNG).\r\n\r\n> This section contains test vectors for all ciphersuites listed in {{ciphersuites}}. All Element and Scalar values are represented in serialized form and encoded in hexadecimal strings. Signatures are represented as the concatenation of their constituent parts. The input message to be signed is also encoded as a hexadecimal string.\r\n> \r\n> random_bytes is defined as the output of the Chacha20 stream cipher, instantiated per signer, with a seed of H(\"vectors\" || encode_uint16(signer)).\r\n\r\nThis means we don't have to take in randomness in each of the spec's functions and would minimize testing against the vectors to just the signatures they end up producing.",
          "createdAt": "2022-07-14T21:11:24Z",
          "updatedAt": "2022-07-14T21:12:04Z"
        }
      ]
    },
    {
      "number": 180,
      "id": "I_kwDOEpUZs85J33Ao",
      "title": "Add reasoning for why coordinator must abort if validation fails. ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/180",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In the spec, we say \"If validation fails, the Coordinator MUST abort the protocol.\"\r\n\r\nWe should add more reasoning as to why this is a MUST. See https://mailarchive.ietf.org/arch/msg/cfrg/qkz1DlchicPs6z64xtT7lgxkVqI/",
      "createdAt": "2022-05-18T03:23:50Z",
      "updatedAt": "2022-05-21T00:36:40Z",
      "closedAt": "2022-05-21T00:36:40Z",
      "comments": []
    },
    {
      "number": 185,
      "id": "I_kwDOEpUZs85KPM6l",
      "title": "Add `RandomBytes` which is scalar-field-size bytes, call from `nonce_generate()`",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/185",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "documentation",
        "editorial"
      ],
      "body": "",
      "createdAt": "2022-05-23T17:35:10Z",
      "updatedAt": "2022-05-27T11:29:55Z",
      "closedAt": "2022-05-27T11:29:55Z",
      "comments": []
    },
    {
      "number": 188,
      "id": "I_kwDOEpUZs85KYi5b",
      "title": "Include version string in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/188",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... to ensure non-interoperability across versions.",
      "createdAt": "2022-05-25T11:21:00Z",
      "updatedAt": "2022-05-31T18:09:48Z",
      "closedAt": "2022-05-31T18:09:48Z",
      "comments": []
    },
    {
      "number": 189,
      "id": "I_kwDOEpUZs85KeLdz",
      "title": "Rename THRESHOLD_LIMIT to MIN_SIGNERS",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/189",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Then we'd have MIN_SIGNERS and MAX_SIGNERS as bounds on the threshold scheme, and NUM_SIGNERS as a value within these bounds. THRESHOLD_LIMIT and MAX_SIGNERS together is just unnecessarily confusing, I think.",
      "createdAt": "2022-05-26T11:04:21Z",
      "updatedAt": "2022-05-27T13:54:10Z",
      "closedAt": "2022-05-27T13:54:10Z",
      "comments": []
    },
    {
      "number": 190,
      "id": "I_kwDOEpUZs85KfzMA",
      "title": "Define subtraction of elements and scalar multiplication",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/190",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Define how one element is subtracted from another\r\n- Define Element * Scalar (as opposed to Scalar * Element)",
      "createdAt": "2022-05-26T17:30:20Z",
      "updatedAt": "2022-05-27T16:02:21Z",
      "closedAt": "2022-05-27T16:02:21Z",
      "comments": []
    },
    {
      "number": 191,
      "id": "I_kwDOEpUZs85Kfz3-",
      "title": "Discuss coordinator in introduction",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/191",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We don't define the coordinator until very late in the document; we should introduce the role in the introduction.",
      "createdAt": "2022-05-26T17:32:20Z",
      "updatedAt": "2022-05-27T16:02:20Z",
      "closedAt": "2022-05-27T16:02:20Z",
      "comments": []
    },
    {
      "number": 194,
      "id": "I_kwDOEpUZs85KjH2a",
      "title": "Don't require the coordinator to be a signer.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/194",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We say \"The coordinator is a distinguished signer with the following responsibilities\" but there is no reason that the coordinator has to be a signer. For example, it could just be a server that communicates with signers (such as HSMs). ",
      "createdAt": "2022-05-27T12:38:32Z",
      "updatedAt": "2022-07-07T20:57:23Z",
      "closedAt": "2022-07-07T20:57:23Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This has been addressed.",
          "createdAt": "2022-07-07T20:57:23Z",
          "updatedAt": "2022-07-07T20:57:23Z"
        }
      ]
    },
    {
      "number": 195,
      "id": "I_kwDOEpUZs85KjMbj",
      "title": "Show that state is maintained between rounds",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/195",
      "state": "OPEN",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently in our diagram for FROST, it looks like it is a stateless protocol, when instead, we could show that state created in round one is maintained until round two.",
      "createdAt": "2022-05-27T12:58:17Z",
      "updatedAt": "2022-05-27T12:58:17Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 196,
      "id": "I_kwDOEpUZs85KjQ97",
      "title": "Delete nonces after generating signature share",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/196",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We can be clearer exactly when nonces are deleted- in fact, they can be deleted immediately after generating the signature share.",
      "createdAt": "2022-05-27T13:17:01Z",
      "updatedAt": "2022-07-07T20:56:52Z",
      "closedAt": "2022-07-07T20:56:52Z",
      "comments": []
    },
    {
      "number": 197,
      "id": "I_kwDOEpUZs85KjXo-",
      "title": "Pseudocode notation description",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/197",
      "state": "OPEN",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We should have description for pseudocode notation such as:\r\n- i^j\r\n- vss_commitment_j",
      "createdAt": "2022-05-27T13:43:27Z",
      "updatedAt": "2022-05-27T13:43:27Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 201,
      "id": "I_kwDOEpUZs85KmouL",
      "title": "Nice to have: ScalarMult member function",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/201",
      "state": "OPEN",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See #199 for discussion- it would be nice to have a `G.ScalarMult` function to make this operation clearer.",
      "createdAt": "2022-05-28T14:11:59Z",
      "updatedAt": "2022-05-28T14:11:59Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 204,
      "id": "I_kwDOEpUZs85LE4IT",
      "title": "Sage and draft conflict for Ed25519 hash function definitions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/204",
      "state": "CLOSED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "interop",
        "discuss",
        "next-version"
      ],
      "body": "Sage implements wide reduction: https://github.com/cfrg/draft-irtf-cfrg-frost/blob/6590e8e30455bfa485733d77bcdd0166825bc4d7/poc/hash.sage#L37-L51\r\n\r\nThe draft specifies just the lower 32 bytes are supposed to be reduced, not the full hash: https://github.com/cfrg/draft-irtf-cfrg-frost/blob/6590e8e30455bfa485733d77bcdd0166825bc4d7/draft-irtf-cfrg-frost.md?plain=1#L875-L885\r\n\r\nWhile I personally prefer wide reduction, I can't comment on which should be used in an IETF draft. It should be noted the provided vectors are incompatible with the spec as-is though (which I found when working on a implementation attempting to be compliant).",
      "createdAt": "2022-06-03T07:46:27Z",
      "updatedAt": "2022-06-20T17:59:17Z",
      "closedAt": "2022-06-20T17:58:24Z",
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So I've been reading through the meta on this topic. Between:\r\n\r\n- https://datatracker.ietf.org/doc/html/rfc8032#section-5.1.6 Step 4 saying to interpret the 64-octet digest as an integer.\r\n- \"Further, this draft specifies signatures that are compatible with RFC8032.\"\r\n- Emails from the archived list\r\n- Recommendation for usage of this ciphersuite for RFC8032\r\n- Python 8032 implementation interpreting H(m) as little-endian, not just the lower 32 bytes\r\n- Sage...\r\n\r\nIt seems H2 is required to be as such. Regarding H1 and H4, technically those are flexible, yet I don't see why those wouldn't follow suit. The only argument I've seen against wide reduction is it not being implemented, with other constructions being simpler to workaround. Since the necessary modification to H2 will require implementations support wide reduction, modifying H1 and H4 should be solely beneficial (though potentially not in any notable way due to Ed25519's naturally low scalar modulus, which I'm unfortunately not skilled enough to comment on further).\r\n\r\nI don't want to be too proactive, and rush forward a PR for an issue I created on a group discussion for a formal specification and reference, yet given the above, I do believe it'd be helpful to offer a PR. If I am rushing into things, please just tell me, and I'm happy to bow out while this is resolved.",
          "createdAt": "2022-06-03T09:30:39Z",
          "updatedAt": "2022-06-03T09:30:39Z"
        },
        {
          "author": "conradoplg",
          "authorAssociation": "NONE",
          "body": "Not using a wide reduction also introduces a noticeable bias in the output, doesn't it? (Not sure what are the implications...)",
          "createdAt": "2022-06-13T18:57:53Z",
          "updatedAt": "2022-06-13T18:57:53Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@kayabaNerve can we close this now that #205 landed?",
          "createdAt": "2022-06-20T13:24:02Z",
          "updatedAt": "2022-06-20T13:24:02Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't see why not. I just didn't dare close it on my own in case the policy was wait until a release was issued with the bug fix :p",
          "createdAt": "2022-06-20T17:58:24Z",
          "updatedAt": "2022-06-20T17:58:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The policy is basically \"close once the fix lands in `main` (or `master`)\" =) Thanks!",
          "createdAt": "2022-06-20T17:59:17Z",
          "updatedAt": "2022-06-20T17:59:17Z"
        }
      ]
    },
    {
      "number": 213,
      "id": "I_kwDOEpUZs85NXqR-",
      "title": "Specify signature `verify()` subroutine (or point to one) for each ciphersuite isntead",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/213",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "Explicitly point to RFC-8032 verification for Ed25519, for those that don't have their own verification defined elsewhere, we inline it.\r\n\r\nWe can explicitly _recommend_, even if we cannot _enforce_, that the Ed25519 verification use the cofactor formula, and list the reasons like security, consensus verification, and batch verification consistency with singleton verification, as motivations why.\r\n\r\n",
      "createdAt": "2022-07-07T20:21:42Z",
      "updatedAt": "2022-07-11T18:48:14Z",
      "closedAt": "2022-07-11T18:48:14Z",
      "comments": []
    },
    {
      "number": 214,
      "id": "I_kwDOEpUZs85NX0Df",
      "title": "Use per-signer rhos instead of per-group rho",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/214",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "FROST1 here we come!",
      "createdAt": "2022-07-07T20:55:19Z",
      "updatedAt": "2022-07-12T20:25:38Z",
      "closedAt": "2022-07-11T18:15:53Z",
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is there an explanation for this available? I thought this was dropped as unnecessary, and would like to personally note this would be unappreciated from an implementation standpoint.\r\n\r\nTo elaborate on the implementation considerations, the original definition from the paper has a conflict with continuous transcripts  in that they force a divergence in challenge generation. It'd require cloning multiple hash contexts before proceeding with one (or none). Ideally, transcripts would be linear machines which fully acknowledge all messages/challenges. This prevents duplicate messages from generating the same transcript. While yes, the message in this case is a unique ID, the interoperability of FROST in larger protocols declines when it can't follow this best practice.\r\n\r\nWhile there would be per-signer rho constructions which are compatible with such ideals, i.e. ones which append the `l` in question (instead of setting), hash commitments and message before re-hashing with the per-signer index, or an exponential rho per-signer (removing hashing entirely, post the initial), I don't dare suggest they're in-scope for consideration under this IETF draft (beyond `H(H({(i, D, E)}, m), l)`, which is decently minimal yet still suboptimal). I do question why per-signer rhos are being reconsidered though.\r\n\r\nRegardless, if this satisfies security concerns, I'll bow out accordingly. I just wanted to try to understand what's going on.\r\n\r\nAnd sorry for the ELI5 on transcript theory to someone who obviously doesn't need it :p Just wanted to lay out my thoughts as a whole on the matter. Also demonstrates my practical understanding here, yet always eager to pick up a bit more formal knowledge as I can :)",
          "createdAt": "2022-07-08T01:49:19Z",
          "updatedAt": "2022-07-08T01:54:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The motivation for this change is due to [this paper](https://eprint.iacr.org/2022/833.pdf). Handwaving over details, the optimized version we have in the draft now allows an attacker to manipulate the signing protocol such that the signers that _started_ the signing process in round 1 are not the same signers that _finished_ the process and produced the signature. One might argue that this isn't a problem in practice because the threshold requirement was not violated (`t` signers contributed, just not the `t` signers you wanted). However, this malleability is concerning, so we're going to revert the optimization for now and then solicit more feedback on this tradeoff. ",
          "createdAt": "2022-07-08T14:37:25Z",
          "updatedAt": "2022-07-08T14:37:25Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @kayabaNerve for that context. Indeed, it would be helpful to have feedback on whether performance/linearity is the most important factor here, or if ensuring the signing set that was chosen is in fact the same signing set that produced a signature. Figure 12 in 2022/833 demonstrates the malleability attack that @chris-wood alluded to for the optimized FROST variant (FROST2), which the original FROST (FROST1) protects against.",
          "createdAt": "2022-07-08T14:47:39Z",
          "updatedAt": "2022-07-08T14:49:10Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Got it. I'm happy to agree with security improvements (including malleability, which is something I personally despise). I'll try to read through the paper in a bit. Thanks for linking it :D\r\n\r\nRegarding actual implementation, `H(B, m, l)` remains simplest, yet `H(B, m, l_0, l_1...)` offers the appreciated linearity. `H(H(B, m), l)`, defining a sub-transcript, enables a linear global transcript by forking off the individual ones, yet seems unnecessary regarding IETF drafts. While I do believe in ensuring IETF compliance in apps, even when the larger protocol evolves, there are still work-arounds regarding `H(B, m, l)`, which is my recommendation. \r\n\r\nAlso, to be clear, my main frustration wasn't regarding the hash clones, which alone happen regardless, yet the ambiguity around transcript continuation for protocols expecting transcripts to have a higher level of guarantees. I believe the solution there is simply to transcript `B, m`, do the `rho`s, and then where FROST discards a larger protocol can append `b\"FROST_rho\"`. As a byte string exceeding two bytes, it removes any potential of conflict and maintains IETF compatibility, while guaranteeing transcript behavior (not that I'm suggesting it for inclusion in the IETF standard, just noting possibilities for safe usage as a component).",
          "createdAt": "2022-07-08T17:40:22Z",
          "updatedAt": "2022-07-08T17:41:11Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@kayabaNerve I'm not sure I understand your concern here. The transcript for computing rho is something signers must agree on, but isn't something that any higher level protocol built on FROST would use (or extend). Am I missing something? Do you have a specific use case in mind? (Also, separately, I'm not following your `H(B, m, l)` notation here. What are `B` and `l`?)",
          "createdAt": "2022-07-11T12:39:46Z",
          "updatedAt": "2022-07-11T12:39:46Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, that was the notation from the paper. It used B for the serialized commitments and l for the signer index.\r\n\r\nRegarding the transcript, I currently have a setup extending FROST for usage in ring signatures. This means the signature as a whole has much more data which must be included as part of the binding factor, as it's not part of the message. It *needs* to have an extended transcript format accordingly.\r\n\r\nI also have another design which preps a transcript as such, does one FROST signature, and then the next in a series. Accordingly, the transcript used for `rho` is largely preferred to be sequentially continued to guarantee a lack of conflict with any future challenges. While the next FROST round re-appends commitments/message, preventing FROST from triggering these conflicts, it's commentary on component safety whose security isn't reliant on external factors, without edge cases.\r\n\r\nRegardless, I already commented above on successfully managing this, and am happy to withdraw my commentary on FROST's safety as a component for the IETF spec, which considers it an independent piece.",
          "createdAt": "2022-07-11T15:43:22Z",
          "updatedAt": "2022-07-11T15:43:22Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Regarding the transcript, I currently have a setup extending FROST for usage in ring signatures. This means the signature as a whole has much more data which must be included as part of the binding factor, as it's not part of the message. It needs to have an extended transcript format accordingly.\r\n\r\nThis isn't a use case that's been considered yet, but it seems valid at face value. Can you point to an implementation or any documentation?\r\n\r\n> Regardless, I already commented above on successfully managing this, and am happy to withdraw my commentary on FROST's safety as a component for the IETF spec, which considers it an independent piece.\r\n\r\nThis seems like a pretty unfair characterization of what's happening here. Safety is definitely _not_ something independent of the specification of FROST, or any IETF/IRTF work for that matter. \r\n\r\nWhat specifically about the existing proposal is unsafe, and why?",
          "createdAt": "2022-07-11T15:52:15Z",
          "updatedAt": "2022-07-11T15:52:15Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "https://github.com/serai-dex/serai/blob/develop/coins/monero/src/ringct/clsag/multisig.rs for a reference, which I'm happy to share. The modular-frost library also defines/handles the Algorithm trait/handling as a whole.\r\n\r\nSorry. I definitely didn't mean to be unfair. My comment was that the IETF specification had this scheme available, which is the most efficient and more direct scheme, and I support it accordingly. It doesn't play well with certain extended schemes, who I'd argue the security of is their own responsibility. With a forked transcript, if the original transcript is the one continued with, requesting a challenge yet again may return a previously used challenge (where the previously used challenge would've been the binding factor). It's a minor nitpick, especially since a binding factor reused as a challenge doesn't break security necessarily.\r\n\r\nWhile I do believe FROST should play nice where possible, which is why I made my comments on the implications of this, as I did believe they'd be listened to and feel like they were (truly not trying to be unfair), all of the schemes I suggested above have drawbacks. Accordingly, I noted a practical comment for implementations supporting long-lived transcripts, moving the responsibility to their realm, which solves this 'issue' without cluttering or degrading the specification.\r\n\r\nI solely meant to acknowledge I considered this settled, and should've clarified \"theoretical minor reduction with a complete lack of noted practical effect on out of scope usage in safety\" :p I didn't drop this because I believe FROST, or its contributors, is/are being insecure. I dropped it because this isn't a security I'd like to advocate to make in scope, largely given its triviality.",
          "createdAt": "2022-07-11T16:07:30Z",
          "updatedAt": "2022-07-11T16:07:30Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@kayabaNerve shall we open a separate issue to track transcript construction and its implications for protocols that embed FROST?",
          "createdAt": "2022-07-12T13:35:29Z",
          "updatedAt": "2022-07-12T13:35:29Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think it's necessary :) But thanks for being willing to reach out like that. I appreciate the support.",
          "createdAt": "2022-07-12T20:25:38Z",
          "updatedAt": "2022-07-12T20:25:38Z"
        }
      ]
    },
    {
      "number": 221,
      "id": "I_kwDOEpUZs85Njjrq",
      "title": "Optimize the Ed25519 implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/221",
      "state": "OPEN",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Follow up to #215.\r\n\r\nOver 1000 runs with dalek on release, I locally observe scalar multiplication taking 268ms. Since we use the prime-order subgroup of Ed25519, we must perform a scalar multiplication on each group element we receive. Alternatively, instead of requiring group elements be prime order when received, we can clear their torsion in just 6ms (~2% of the time).\r\n\r\nThe naive way to update FROST to this would be with the following definitions for Ed25519:\r\n\r\n```md\r\n  - SerializeElement: Implemented as specified in {{!RFC8032, Section 5.1.2}}.\r\n  - DeserializeElement: Implemented as specified in {{!RFC8032, Section 5.1.3}}.\r\n    Additionally, this function validates that the resulting element is not the group\r\n    identity element and is in the prime-order subgroup. The latter check can\r\n    be implemented by multiplying the resulting point by the order of the group and\r\n    checking that the result is the identity element.\r\n  - SerializeScalar: Implemented by outputting the little-endian 32-byte encoding of\r\n    the Scalar value.\r\n  - DeserializeScalar: Implemented by attempting to deserialize a Scalar from a 32-byte\r\n    string. This function can fail if the input does not represent a Scalar between\r\n    the value 0 and `G.Order() - 1`.\r\n```\r\n\r\nmodified to\r\n\r\n```md\r\n  - SerializeElement: Implemented as specified in {{!RFC8032, Section 5.1.2}}, after first\r\n    multiplying the element by the multiplicative inverse of the cofactor (8).\r\n  - DeserializeElement: Implemented as specified in {{!RFC8032, Section 5.1.3}}.\r\n    Additionally, this function multiplies the element by the cofactor (8) before validating\r\n    that the resulting element is not the group identity element.\r\n  - SerializeScalar: Implemented by outputting the little-endian 32-byte encoding of\r\n    the Scalar value.\r\n  - DeserializeScalar: Implemented by attempting to deserialize a Scalar from a 32-byte\r\n    string, failing if the input does not represent a Scalar between the value 0 and\r\n    `G.Order() - 1`.\r\n```\r\n\r\nPlease note this as insufficient as it will not produce valid signatures. The signature produced must have its nonce multiplied by the cofactor/never inverted, yet I care about discussing this theory right now than presenting a fully complete patch.\r\n\r\nPros:\r\n- During signing, each signer performs two inversions on their nonces (considered with a weight of 50), and then performs cofactor multiplications (efficient by being defined as three additions) for t signers (considered with a weight of 1). This produces a cost of `2(50) + 2(1)t`. The current scheme has a cost of `2(50)t` due to how checking for the presence of torsion is done.\r\n\r\nCons:\r\n- Not RFC8032 compliant, yet potentially still suitably compliant as it's solely extending with pre/post-ops when FROST already requires a scalarmul.\r\n- We also need another function for SerializeElement which doesn't perform the inverse multiplication to produce signatures.\r\n- Additional complexity in general.\r\n\r\nIt may be further beneficial, instead of modifying Serialize/Deserialize, to make cofactor a native property of the FROST algorithm. This would be more expansive than Ed25519 alone and not require an additional function. It would, however, increase complexity and remove the simple statement a prime-order group is required.\r\n\r\ncc @chris-wood, who helped review the above cited PR and merged it",
      "createdAt": "2022-07-11T20:09:24Z",
      "updatedAt": "2022-07-11T20:09:24Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 225,
      "id": "I_kwDOEpUZs85Nl_0E",
      "title": "Update version context strings",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/issues/225",
      "state": "OPEN",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We forgot to update these from \"-v5\" to \"-vCURRENT\". This isn't that big of a deal, but let's make sure we do this going forward.",
      "createdAt": "2022-07-12T09:39:17Z",
      "updatedAt": "2022-07-12T09:39:17Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0NTcyMTQwMDEw",
      "title": "Begin detailing notation and primitives",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/1",
      "state": "MERGED",
      "author": "isislovecruft",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-11T22:00:49Z",
      "updatedAt": "2021-08-09T01:50:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b82f641a32d2e11f5954208d9a0dc6b0397077b6",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "feature/notation-and-primitives",
      "headRefOid": "7b996fc3a502dd42adfc9a653fc6d9bd8700c657",
      "closedAt": "2021-08-09T01:50:30Z",
      "mergedAt": "2021-08-09T01:50:30Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "4520453cd5671cfa47e863976fe2b1e292c6c6d9"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh wow, I completely missed seeing this. I'm going to merge this in today. Thank you! ",
          "createdAt": "2021-08-05T15:23:24Z",
          "updatedAt": "2021-08-05T15:23:24Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 2,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAxODY5MzMw",
      "title": "Add POG dependency, and clean up overview.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/2",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is an imperfect start, but, hopefully it helps! I'm happy to take the secret sharing section(s) next, if that'd be useful.",
      "createdAt": "2021-08-03T00:39:16Z",
      "updatedAt": "2021-08-03T15:17:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3c859132fac5fabbe86150cd3598ea1fb81a4ace",
      "headRepository": null,
      "headRefName": "caw/overview-and-deps",
      "headRefOid": "69d06d3c8300770162d24a5015994931f556bd50",
      "closedAt": "2021-08-03T15:17:00Z",
      "mergedAt": "2021-08-03T15:17:00Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "6f4c2f70df048718490ad2efc53fa44939d3e3fa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxMjI4ODQx",
          "commit": {
            "abbreviatedOid": "69d06d3"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-03T13:54:21Z",
          "updatedAt": "2021-08-03T13:54:21Z",
          "comments": [
            {
              "originalPosition": 172,
              "body": "This should actually be a VSS commitment, a Pedersen commitment is to a single value alpha, in the form C = g^alpha * h^beta, where beta is chosen uniformly at random.",
              "createdAt": "2021-08-03T13:54:21Z",
              "updatedAt": "2021-08-03T13:54:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxMzMyMjIz",
          "commit": {
            "abbreviatedOid": "69d06d3"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-03T15:16:55Z",
          "updatedAt": "2021-08-03T15:16:56Z",
          "comments": [
            {
              "originalPosition": 172,
              "body": "I'll fix this up after merge! ",
              "createdAt": "2021-08-03T15:16:55Z",
              "updatedAt": "2021-08-03T15:16:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA1ODA3OTYx",
      "title": "Define secret-sharing in terms of polynomial operations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/3",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-07T00:39:30Z",
      "updatedAt": "2021-08-07T18:57:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e083e795cf123482feddb3b74e26e4a30a89efac",
      "headRepository": null,
      "headRefName": "caw/ss",
      "headRefOid": "326335f56b8ce6aaf52ce7c8f3d91eec4a1dce51",
      "closedAt": "2021-08-07T18:57:23Z",
      "mergedAt": "2021-08-07T18:57:23Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "6b40be2cc4e0fdff430a9f55b2808a86ddb5499f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 4,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2MTI2MDg5",
      "title": "Serialization and whatnot",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/4",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-08T23:40:06Z",
      "updatedAt": "2021-08-09T00:41:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "95d23648d5855be9c3cf80d9950094e56eb9026a",
      "headRepository": null,
      "headRefName": "caw/ser",
      "headRefOid": "33afde6e3651151bb8b4cca32c95e17985ed58fb",
      "closedAt": "2021-08-09T00:41:30Z",
      "mergedAt": "2021-08-09T00:41:30Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "22477aeb53b1df0e9b69a0dbeed7073b7e667224"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2NTMxNzA1",
      "title": "Add a protocol overview sketch.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/6",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "And also cleanup the Schnorr signature section, make algorithms appear \"prettier\", add the (ristretto255, SHA-512) suite, and remove some redundant text.",
      "createdAt": "2021-08-09T13:39:30Z",
      "updatedAt": "2021-08-09T14:12:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "afe879a95fe5e6a7d46f46cbecb60eae7ca37a2c",
      "headRepository": null,
      "headRefName": "caw/cleanup",
      "headRefOid": "de8f77410e8327af119d75a43a1405c458cca539",
      "closedAt": "2021-08-09T14:12:26Z",
      "mergedAt": "2021-08-09T14:12:26Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "c1653cc29d5259befc5da276b868486f82b2c01a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 7,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2OTI3NDM5",
      "title": "Fix typos and formatting",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/7",
      "state": "MERGED",
      "author": "teor2345",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "teor2345"
      ],
      "labels": [],
      "body": "Minor fixes to typos and formatting",
      "createdAt": "2021-08-09T23:43:57Z",
      "updatedAt": "2021-08-10T04:59:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1901da2a719a67ac7d9901711800b80e15523b8b",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-typos",
      "headRefOid": "5ddda99f38adb768462e77fb06f788112dfb49de",
      "closedAt": "2021-08-10T04:59:52Z",
      "mergedAt": "2021-08-10T04:59:52Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "5366d3b901d67ac046391e477924f376131b8047"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI1ODk1MDc5",
          "commit": {
            "abbreviatedOid": "5ddda99"
          },
          "author": "teor2345",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-09T23:44:25Z",
          "updatedAt": "2021-08-09T23:44:25Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm not sure about this function formatting",
              "createdAt": "2021-08-09T23:44:25Z",
              "updatedAt": "2021-08-09T23:44:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI1ODk1MzI5",
          "commit": {
            "abbreviatedOid": "5ddda99"
          },
          "author": "teor2345",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-09T23:45:02Z",
          "updatedAt": "2021-08-09T23:45:02Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "`SUM` and `PROD` are already specified 2 paragraphs above this one.",
              "createdAt": "2021-08-09T23:45:02Z",
              "updatedAt": "2021-08-09T23:45:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2MDA3MDA2",
          "commit": {
            "abbreviatedOid": "5ddda99"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great, thanks @teor2345 ",
          "createdAt": "2021-08-10T04:59:40Z",
          "updatedAt": "2021-08-10T04:59:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOEpUZs84tg9xo",
      "title": "s/comitment/commitment/",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/8",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-21T19:59:11Z",
      "updatedAt": "2022-04-18T17:01:44Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "50588dac82f6d690a54fe6274fa89b5d61c4410a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "typo",
      "headRefOid": "e12fa39ace272bf50ebe6d4594cabd913d64fe4a",
      "closedAt": "2021-10-30T20:03:58Z",
      "mergedAt": "2021-10-30T20:03:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "59e909df9fa067091b6bbdc9a8914dd10534c89c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84vTWR3",
          "commit": {
            "abbreviatedOid": "e12fa39"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-30T20:03:53Z",
          "updatedAt": "2021-10-30T20:03:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDOEpUZs84uEeSY",
      "title": "Remove unused inputs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/9",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-04T00:19:40Z",
      "updatedAt": "2022-04-18T17:01:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "59e909df9fa067091b6bbdc9a8914dd10534c89c",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-1",
      "headRefOid": "e5fae627d622a657d0d5cf15aa256bd842047743",
      "closedAt": "2021-11-18T17:20:27Z",
      "mergedAt": "2021-11-18T17:20:27Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "482dd2dc09652725b57953f63b8d79fd4f05aa54"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 10,
      "id": "PR_kwDOEpUZs84uEfll",
      "title": "No let",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/10",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-04T00:30:12Z",
      "updatedAt": "2022-04-18T17:01:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "59e909df9fa067091b6bbdc9a8914dd10534c89c",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-2",
      "headRefOid": "537cee8c30918d1f40fb3ce6d8cc191972ed14d8",
      "closedAt": "2021-11-18T17:20:18Z",
      "mergedAt": "2021-11-18T17:20:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "234ed7b4a82c260bb1bb1b29758135713c2be88e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 14,
      "id": "PR_kwDOEpUZs84uj1zH",
      "title": "Domain-separate H1 and H2 by parameter set  example",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/14",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-15T23:26:47Z",
      "updatedAt": "2021-11-30T21:13:12Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "59e909df9fa067091b6bbdc9a8914dd10534c89c",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "domain-separate",
      "headRefOid": "a8f69a65087e521bbf3ebf8f44aba3bb30cb1989",
      "closedAt": "2021-11-30T21:01:17Z",
      "mergedAt": "2021-11-30T21:01:17Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "3c9ff7c7f37472ebef601869b8d93097b297b839"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 27,
      "id": "PR_kwDOEpUZs84uvPWo",
      "title": "Fix some issues in the polynomial math section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/27",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-18T21:32:24Z",
      "updatedAt": "2021-12-02T03:39:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "482dd2dc09652725b57953f63b8d79fd4f05aa54",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/poly-bug-fixes",
      "headRefOid": "292563a27f0781a08dd301a1a4805a322ad31113",
      "closedAt": "2021-12-02T03:39:17Z",
      "mergedAt": "2021-12-02T03:39:17Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "6ead3aa798352d220c18076200634463b694dba8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84w78Yg",
          "commit": {
            "abbreviatedOid": "292563a"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me, thanks! ",
          "createdAt": "2021-12-02T03:39:09Z",
          "updatedAt": "2021-12-02T03:39:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 28,
      "id": "PR_kwDOEpUZs84vNnbR",
      "title": "Specify FROST efficiency improvements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/28",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Efficiency improvements to FROST were presented in https://eprint.iacr.org/2021/1375. This change ensures that rho is derived correctly, and cites this paper for reference. ",
      "createdAt": "2021-11-30T21:53:21Z",
      "updatedAt": "2021-12-06T23:26:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "744d2245a096b61340f6968f2684e8907f98137d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "efficient-variant",
      "headRefOid": "02926ae0ba4a2a7a7b3a9b0d4c9b7f3286a889bd",
      "closedAt": "2021-12-06T23:26:16Z",
      "mergedAt": "2021-12-06T23:26:16Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "db2a378d00c5393f908703641e8ba57fb62c3ab5"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Addresses issue #21 ",
          "createdAt": "2021-11-30T21:54:33Z",
          "updatedAt": "2021-11-30T21:54:33Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see how this is more efficient. If anything, it seems to be less efficient since it requires more cycles to compute `binding_factor`. Was there more to be done in this PR? Also, the build breaks, which we should fix before merging.",
          "createdAt": "2021-11-30T23:45:35Z",
          "updatedAt": "2021-11-30T23:45:35Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, I should have been more clear in the comment. The binding factor *must* include the identifiers of all the participants. I could have included these in the `B` term, but since we already defined `L`, I thought it would be clearer to include `L` separately. Let me know which you prefer. ",
          "createdAt": "2021-12-01T05:18:12Z",
          "updatedAt": "2021-12-01T05:18:12Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The binding factor must include the identifiers of all the participants. I could have included these in the B term, but since we already defined L, I thought it would be clearer to include L separately. Let me know which you prefer.\r\n\r\nThe change is fine, but I'm just not seeing how this adds any efficiency improvement. To try and be a bit more clear: are the changes from Schnorr21 going to land in this PR, or another one?",
          "createdAt": "2021-12-01T16:09:25Z",
          "updatedAt": "2021-12-01T16:09:25Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I just made the title more clear- these efficiency improvements are from Schnorr21; FROST20 requires computing different binding factors for each participant.",
          "createdAt": "2021-12-01T17:09:51Z",
          "updatedAt": "2021-12-01T17:09:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84w7QpP",
          "commit": {
            "abbreviatedOid": "b4e3e50"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83e\udd37 ",
          "createdAt": "2021-12-01T21:50:42Z",
          "updatedAt": "2021-12-01T21:50:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84xJj8T",
          "commit": {
            "abbreviatedOid": "17e788e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-06T23:12:46Z",
          "updatedAt": "2021-12-06T23:12:49Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n -  ins: C. A. Wood\r\n    name: Christopher A. Wood\r\n```",
              "createdAt": "2021-12-06T23:12:46Z",
              "updatedAt": "2021-12-06T23:12:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOEpUZs84vttdy",
      "title": "Participants should never be assigned the zero identifier.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/29",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses issue #18 ",
      "createdAt": "2021-12-11T18:22:11Z",
      "updatedAt": "2022-04-18T17:01:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "db2a378d00c5393f908703641e8ba57fb62c3ab5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "zero-identifier",
      "headRefOid": "1b24faa469b44aa271403b6756a9ab41e00edc11",
      "closedAt": "2021-12-11T18:47:22Z",
      "mergedAt": "2021-12-11T18:47:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2e377fe7a1b5d70098cc9d362f68fae085ad5613"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xcf_o",
          "commit": {
            "abbreviatedOid": "1b24faa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-11T18:45:55Z",
          "updatedAt": "2021-12-11T18:45:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOEpUZs84vtuOl",
      "title": "Start list of known implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/30",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It would be great to have a better distinguishes for implementations that are not complete but also not yet interoperable. Also how to specify the curves these different implementations are over, and which ones we should include here (i.e, should we include the redjubjub implementation). \r\n\r\nAddresses #16",
      "createdAt": "2021-12-11T18:43:19Z",
      "updatedAt": "2021-12-13T22:47:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "db2a378d00c5393f908703641e8ba57fb62c3ab5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "implementations",
      "headRefOid": "69111dab6817bdcd3b0f923d00521d3023cbd3b5",
      "closedAt": "2021-12-13T22:47:47Z",
      "mergedAt": "2021-12-13T22:47:47Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "09758504e0732b16f865c5d80d2c69f3e0663d2d"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We should also add https://github.com/taurusgroup/multi-party-sig.",
          "createdAt": "2021-12-13T17:35:30Z",
          "updatedAt": "2021-12-13T17:35:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xgTP2",
          "commit": {
            "abbreviatedOid": "135f73a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-13T17:35:34Z",
          "updatedAt": "2021-12-13T17:35:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDOEpUZs84vypY6",
      "title": "Add link to new frost-ristretto255 impl",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/31",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-13T23:27:53Z",
      "updatedAt": "2021-12-13T23:49:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "09758504e0732b16f865c5d80d2c69f3e0663d2d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "add-frost-ristretto255",
      "headRefOid": "6a5099e58fc6fe364453ea163f3d99381b313e9d",
      "closedAt": "2021-12-13T23:49:15Z",
      "mergedAt": "2021-12-13T23:49:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c9d58cf05154ecd3a5a94afed7820d12dab1c54e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xhi9w",
          "commit": {
            "abbreviatedOid": "6a5099e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-13T23:49:12Z",
          "updatedAt": "2021-12-13T23:49:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOEpUZs84vysgi",
      "title": "Add P256-SHA-256 ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/32",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To match the Ristretto ciphersuite as it exists",
      "createdAt": "2021-12-13T23:55:37Z",
      "updatedAt": "2021-12-14T19:55:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c9d58cf05154ecd3a5a94afed7820d12dab1c54e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "p256-sha-256",
      "headRefOid": "988686d23366f02f24440d3408f75450fb7276bd",
      "closedAt": "2021-12-14T14:56:00Z",
      "mergedAt": "2021-12-14T14:55:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d44e648edcd9f6b18d589c8058f600728b8d15da"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood where should I put this:\r\n\r\n```\r\nx9.62:\r\n    title: \"Public Key Cryptography for the Financial Services Industry: the Elliptic Curve Digital Signature Algorithm (ECDSA)\"\r\n    date: Sep, 1998\r\n    seriesinfo:\r\n      \"ANSI\": X9.62-1998\r\n    author:\r\n      -\r\n        org: ANSI\r\n\r\n```",
          "createdAt": "2021-12-14T00:03:13Z",
          "updatedAt": "2021-12-14T00:03:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly there's a section up at the top we need to add, so it'd look like so:\r\n\r\n```\r\nnormative:\r\n   x9.62:\r\n     title: \"Public Key Cryptography for the Financial Services Industry: the Elliptic Curve Digital Signature Algorithm (ECDSA)\"\r\n     date: Sep, 1998\r\n     seriesinfo:\r\n       \"ANSI\": X9.62-1998\r\n     author:\r\n       -\r\n         org: ANSI\r\n\r\ninformative:\r\n   FROST20:\r\n   ...\r\n```",
          "createdAt": "2021-12-14T00:05:11Z",
          "updatedAt": "2021-12-14T00:05:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xhkFT",
          "commit": {
            "abbreviatedOid": "dfc5156"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Excellent!",
          "createdAt": "2021-12-13T23:58:05Z",
          "updatedAt": "2021-12-13T23:58:59Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n## FROST(P-256, SHA-256)\r\n```",
              "createdAt": "2021-12-13T23:58:05Z",
              "updatedAt": "2021-12-13T23:58:59Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\n- Hash: SHA-256, and Nh = 32.\r\n```",
              "createdAt": "2021-12-13T23:58:41Z",
              "updatedAt": "2021-12-13T23:58:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOEpUZs84v1DOA",
      "title": "Add contextString variable",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/33",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "And add missing reference from #32.",
      "createdAt": "2021-12-14T15:00:46Z",
      "updatedAt": "2021-12-14T15:53:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d44e648edcd9f6b18d589c8058f600728b8d15da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/add-context",
      "headRefOid": "f7e2eb42c6a2d729d0196a7ee21c77b238d19193",
      "closedAt": "2021-12-14T15:53:04Z",
      "mergedAt": "2021-12-14T15:53:04Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "97bd6c0017584b3593734b26f5be964e29d33916"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xkqXF",
          "commit": {
            "abbreviatedOid": "c82b4ca"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-14T15:50:06Z",
          "updatedAt": "2021-12-14T15:50:25Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\nThe value of the contextString parameter is \"FROST-RISTRETTO255-SHA512\".\n```\n",
              "createdAt": "2021-12-14T15:50:06Z",
              "updatedAt": "2021-12-14T15:50:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 34,
      "id": "PR_kwDOEpUZs84v1Lgm",
      "title": "EdX interop",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/34",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This aligns signature generation and verification with that of [EdX from RFC8032](https://datatracker.ietf.org/doc/html/rfc8032). ",
      "createdAt": "2021-12-14T15:33:06Z",
      "updatedAt": "2021-12-14T19:56:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d44e648edcd9f6b18d589c8058f600728b8d15da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/edx-alignment",
      "headRefOid": "d0d9c5bf2962f30c42f500df08ca08194e080fbb",
      "closedAt": "2021-12-14T19:56:12Z",
      "mergedAt": "2021-12-14T19:56:12Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "3bdaa22d7485cdc4adbfb947b530e56b639aa9d0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84xllyN",
          "commit": {
            "abbreviatedOid": "d0d9c5b"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great to me, thank you \ud83c\udf8a ",
          "createdAt": "2021-12-14T19:20:23Z",
          "updatedAt": "2021-12-14T19:20:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84xluYr",
          "commit": {
            "abbreviatedOid": "d0d9c5b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-14T19:56:05Z",
          "updatedAt": "2021-12-14T19:56:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 35,
      "id": "PR_kwDOEpUZs84v2Xne",
      "title": "Stop adding teor to every PR as a reviewer",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/35",
      "state": "MERGED",
      "author": "teor2345",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This removes teor from the CODEOWNERS file, so I don't get added as a reviewer to every PR.",
      "createdAt": "2021-12-14T21:12:11Z",
      "updatedAt": "2021-12-14T21:17:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3bdaa22d7485cdc4adbfb947b530e56b639aa9d0",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "stop-adding-teor-reviews",
      "headRefOid": "2f254ed7dd4b6fa118a43d9480640d68ed36d9df",
      "closedAt": "2021-12-14T21:17:44Z",
      "mergedAt": "2021-12-14T21:17:43Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "5bcf68714f4260149388d885f781f778a41fecb1"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @teor2345, sorry about that! ",
          "createdAt": "2021-12-14T21:17:39Z",
          "updatedAt": "2021-12-14T21:17:39Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 36,
      "id": "PR_kwDOEpUZs84w5CPT",
      "title": "Typo",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/36",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-13T01:07:09Z",
      "updatedAt": "2022-01-13T02:20:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "5bcf68714f4260149388d885f781f778a41fecb1",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "0a570ef7a244dd735c3202e5d52f9dbaaecfbd2e",
      "closedAt": "2022-01-13T02:20:25Z",
      "mergedAt": "2022-01-13T02:20:25Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "9c9b76280aa433b08f576760c6b81cfe83947d10"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84yvBlk",
          "commit": {
            "abbreviatedOid": "0a570ef"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-13T02:20:18Z",
          "updatedAt": "2022-01-13T02:20:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOEpUZs84w5JWS",
      "title": "Rough description of performing the protocol without the aggregator",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/39",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #25",
      "createdAt": "2022-01-13T01:39:07Z",
      "updatedAt": "2022-01-18T20:00:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "5bcf68714f4260149388d885f781f778a41fecb1",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "no-aggregator",
      "headRefOid": "c58e4bf53fa5d30769034779b7f002c79803fe89",
      "closedAt": "2022-01-18T20:00:22Z",
      "mergedAt": "2022-01-18T20:00:22Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "38e8fa7a19f2778b4b2fd6c8a3eeb309dc7a8cfb"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed the comment from @chris-wood in the last commit, hopefully this description of the network channel requirements is clear. ",
          "createdAt": "2022-01-18T20:00:17Z",
          "updatedAt": "2022-01-18T20:00:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84yy_B3",
          "commit": {
            "abbreviatedOid": "e874521"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-01-13T20:50:05Z",
          "updatedAt": "2022-01-13T20:50:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84yzbut",
          "commit": {
            "abbreviatedOid": "e874521"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This text looks good, though I wonder if we need to expand on the requirements for the broadcast channel? In particular, this is written such that it assumes the broadcast channel (obviously) delivers each message correctly, but I don't think we state that explicitly? (We can do this in a future PR so as to not block this.)",
          "createdAt": "2022-01-13T23:20:04Z",
          "updatedAt": "2022-01-13T23:20:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOEpUZs84w9sYu",
      "title": "Messages should be a fixed size when hashing",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To ensure a fixed size message when calculating `rho` or the sig challenge, always hash the message into a fixed size first.\r\n\r\nAlso consistently use `msg`, and some tidy\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/issues/43",
      "createdAt": "2022-01-13T20:46:52Z",
      "updatedAt": "2022-01-28T21:55:44Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6f15e3b8ea32696d6e4bca61615fc591283a63bf",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "msg-hashing",
      "headRefOid": "f741b1d10c77b215dba0ec7de09370fa58b72bde",
      "closedAt": "2022-01-28T21:55:41Z",
      "mergedAt": "2022-01-28T21:55:41Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "750a307a437d95418d640db824f444bdd1116279"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> We need to explicitely define what `H` is, similarly to `H1` and `H2`.\r\n> \r\n> See https://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#cryptographic-hash-function-dep-hash\r\n\r\nIs that not specified by each parameter set? ",
          "createdAt": "2022-01-13T22:39:40Z",
          "updatedAt": "2022-01-13T22:39:40Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "> > We need to explicitely define what `H` is, similarly to `H1` and `H2`.\r\n> > See https://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#cryptographic-hash-function-dep-hash\r\n> \r\n> Is that not specified by each parameter set?\r\n\r\nWe should have an explicit definition with a domain seperator, to be on the safe side. ",
          "createdAt": "2022-01-13T22:43:55Z",
          "updatedAt": "2022-01-13T22:43:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo it is explicitly defined as part of the ciphersuite, so I don't think further work is needed there.",
          "createdAt": "2022-01-13T22:54:40Z",
          "updatedAt": "2022-01-13T22:54:40Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed!\r\n",
          "createdAt": "2022-01-28T21:55:32Z",
          "updatedAt": "2022-01-28T21:55:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84yzMg4",
          "commit": {
            "abbreviatedOid": "801db01"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "We need to explicitely define what `H` is, similarly to `H1` and `H2`. \r\n\r\nSee https://github.com/cfrg/draft-irtf-cfrg-frost/blob/master/draft-irtf-cfrg-frost.md#cryptographic-hash-function-dep-hash",
          "createdAt": "2022-01-13T21:55:09Z",
          "updatedAt": "2022-01-13T21:55:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84zA7LP",
          "commit": {
            "abbreviatedOid": "272c75c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-18T19:29:23Z",
          "updatedAt": "2022-01-18T19:29:24Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I would add a comment here that a domain seperator is omitted specifically for backwards compatibility and citation.",
              "createdAt": "2022-01-18T19:29:23Z",
              "updatedAt": "2022-01-18T19:29:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zA7d5",
          "commit": {
            "abbreviatedOid": "272c75c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved, with request for comment on backwards compatibility and choice of `H3`",
          "createdAt": "2022-01-18T19:29:56Z",
          "updatedAt": "2022-01-18T19:29:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84zqPVg",
          "commit": {
            "abbreviatedOid": "272c75c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T21:08:11Z",
          "updatedAt": "2022-01-28T21:08:12Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nH3(m) = H(m)\r\n\r\nNormally this would also include a domain separator, but for backwards compatibility with other Schnorr signatures, we omit it here.\r\n```",
              "createdAt": "2022-01-28T21:08:11Z",
              "updatedAt": "2022-01-28T21:08:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOEpUZs84xObFo",
      "title": "Update order of rho with regard to participant identifiers",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/52",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #17 ",
      "createdAt": "2022-01-18T20:48:05Z",
      "updatedAt": "2022-01-25T20:39:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "38e8fa7a19f2778b4b2fd6c8a3eeb309dc7a8cfb",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "order-rho",
      "headRefOid": "89e3a47efd2f8f0d9753853a90d7793368c20b26",
      "closedAt": "2022-01-25T20:38:19Z",
      "mergedAt": "2022-01-25T20:38:19Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "34dc444633489c8687440cc3e04edb408f1e1bcb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84zbdSy",
          "commit": {
            "abbreviatedOid": "89e3a47"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Good for now, if anyone runs into any confusion about the j, D_j, etc order, we can clarify further",
          "createdAt": "2022-01-25T20:36:15Z",
          "updatedAt": "2022-01-25T20:36:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 53,
      "id": "PR_kwDOEpUZs84xsnRP",
      "title": "Draft fixes and initial Sage implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/53",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The Sage implementation (in poc/frost.sage) is still a bit behind the spec, e.g., H1 and H2 are not correct. Test vectors are still TBD. We can either add them here or in a followup change. There's a couple general questions and comments that came up when making this change, including:\r\n\r\n- Why is signature share verification _optional_, as opposed to mandatory? It's pretty cheap, so I'm inclined to think we should make it mandatory.\r\n- Is the current blinding factor generation specification correct?\r\n- We currently say the upper bound on signing message limit is 2^16-1 -- is this sufficiently large?\r\n- What should be the maximum number of possible signers? 2^64-1?\r\n- We need to improve the vocabulary in the draft, e.g., `B` to denote the set of signer commitments. Can we come up with a better name?\r\n- ... and probably some others I forgot in the process.\r\n\r\n@dconnolly I suspect this won't interop with your ristretto255 implementation, but that's probably fine for now. I want to get. us to an initial place where we have test vectors from the Sage implementation that match the spec. Then we can change things as needed to converge (and work towards RFC8032 compatibility). ",
      "createdAt": "2022-01-27T18:41:00Z",
      "updatedAt": "2022-01-29T00:57:02Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "750a307a437d95418d640db824f444bdd1116279",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/fixes-and-poc",
      "headRefOid": "105c3aaf93261754965c9717d027f8d2455a35a3",
      "closedAt": "2022-01-29T00:57:01Z",
      "mergedAt": "2022-01-29T00:57:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b2a7d2eed48fec2afcd881c685231adf0c9056a0"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly I rebased on top of `master` and pulled in your change. I'll merge this now and focus on test vector capabilities next. Then I'll focus on RFC8032 compatibility. ",
          "createdAt": "2022-01-29T00:56:31Z",
          "updatedAt": "2022-01-29T00:56:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84zqZf-",
          "commit": {
            "abbreviatedOid": "3d7265f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T22:07:31Z",
          "updatedAt": "2022-01-28T22:07:31Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Three, to be specific",
              "createdAt": "2022-01-28T22:07:31Z",
              "updatedAt": "2022-01-28T22:07:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zqabu",
          "commit": {
            "abbreviatedOid": "3d7265f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good! ",
          "createdAt": "2022-01-28T22:13:40Z",
          "updatedAt": "2022-01-28T22:13:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84zqqFd",
          "commit": {
            "abbreviatedOid": "105c3aa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-29T00:56:41Z",
          "updatedAt": "2022-01-29T00:56:42Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Rebased and fixed.",
              "createdAt": "2022-01-29T00:56:41Z",
              "updatedAt": "2022-01-29T00:56:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 59,
      "id": "PR_kwDOEpUZs84xxBU-",
      "title": "Must verify signature shares",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/59",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... and other editorial things.\r\n\r\nCloses #54.",
      "createdAt": "2022-01-29T01:07:56Z",
      "updatedAt": "2022-01-31T14:58:16Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b2a7d2eed48fec2afcd881c685231adf0c9056a0",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/must-verify-shares",
      "headRefOid": "af648871345eaaf281ed8818c546d9abc06926a1",
      "closedAt": "2022-01-31T14:58:11Z",
      "mergedAt": "2022-01-31T14:58:11Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "c650e456f649701b6e5947a170d30d100fb6e605"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84zqqp0",
          "commit": {
            "abbreviatedOid": "af64887"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-29T01:08:20Z",
          "updatedAt": "2022-01-29T01:08:20Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "@dconnolly @chelseakomlo this is the real change.",
              "createdAt": "2022-01-29T01:08:20Z",
              "updatedAt": "2022-01-29T01:08:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zvAas",
          "commit": {
            "abbreviatedOid": "af64887"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great to me",
          "createdAt": "2022-01-31T14:58:03Z",
          "updatedAt": "2022-01-31T14:58:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "PR_kwDOEpUZs84xx1CW",
      "title": "Add bare test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/60",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "First part of #49. It adds test vector generation for ristretto255 with one (2,3) participant configuration. We can extend this in a followup change to iterate through more subsets. Of course, I'm open to renaming or restructuring anything differently!\r\n\r\nExample output:\r\n\r\n```\r\n{\r\n  \"config\": {\r\n    \"NUM_SIGNERS\": \"3\",\r\n    \"THRESHOLD_LIMIT\": \"2\",\r\n    \"group\": \"ristretto255\",\r\n    \"hash\": \"SHA512\"\r\n  },\r\n  \"inputs\": {\r\n    \"group_secret_key\": \"c604c785ada70d77a5256ae21767de8c3304115237d262134f5e46e512cf8e03\",\r\n    \"group_public_key\": \"0ca5c9fa211b6c240e4e7af6c6cf624c7b0fd1f8916eacbb6518267f332db951\",\r\n    \"message\": \"74657374\",\r\n    \"signers\": {\r\n      \"1\": {\r\n        \"signer_share\": \"24dd5ca618a461a81256e505fcd5aaf356b3c45aa479a49cf3744710f306740f\"\r\n      },\r\n      \"2\": {\r\n        \"signer_share\": \"95e1fc69693da381a9e96886014b98457a6278631121e625988b483bd33e590b\"\r\n      },\r\n      \"3\": {\r\n        \"signer_share\": \"06e69c2dbad6e45a407dec0607c085979d112c6c7ec827af3ca24966b3763e07\"\r\n      }\r\n    }\r\n  },\r\n  \"round_one_outputs\": {\r\n    \"participants\": [\r\n      \"1\",\r\n      \"2\"\r\n    ],\r\n    \"commitment_list\": \"000000018a9049503ade17c922b4ab93e0fd7802f8986ee4cdd25d7e2da2691139160c15eee7a9c7fec3460c27c160c683d46a4fd18f537c055c3998748b8e4cd8f29b3e00000002d88068bbb009b13a005e66b143d52591f4081f4b3b342ebc4035af868ba82f7b3647dbbc9e46bd45cd1fe21d6197971b84e3ae2a7a165aaade49ee2ebf1eba5a\",\r\n    \"group_blinding_factor\": \"675146437df1bbc42f8fa74673c2c6a5393bb469a02c1402d497428575b55900\",\r\n    \"outputs\": {\r\n      \"1\": {\r\n        \"hiding_nonce\": \"ed8366feb6b1d05d1f46acb727061e43aadfafe9c10e5a64e7518d63e3263503\",\r\n        \"blinding_nonce\": \"019cbd1d7420292528f8cdd62f339fdabb602f04a95dac9dbcec831b8c681a09\",\r\n        \"hiding_nonce_commitment\": \"8a9049503ade17c922b4ab93e0fd7802f8986ee4cdd25d7e2da2691139160c15\",\r\n        \"blinding_nonce_commitment\": \"eee7a9c7fec3460c27c160c683d46a4fd18f537c055c3998748b8e4cd8f29b3e\"\r\n      },\r\n      \"2\": {\r\n        \"hiding_nonce\": \"89c61a42c8191a5ca41f2fe959843d333bcf43173b7de4c5c119e0e0d8b0e707\",\r\n        \"blinding_nonce\": \"e6d0f1d89ad552e383d6c6f4e8598cc3037d6e274d22da3089e7afbd4171ea02\",\r\n        \"hiding_nonce_commitment\": \"d88068bbb009b13a005e66b143d52591f4081f4b3b342ebc4035af868ba82f7b\",\r\n        \"blinding_nonce_commitment\": \"3647dbbc9e46bd45cd1fe21d6197971b84e3ae2a7a165aaade49ee2ebf1eba5a\"\r\n      }\r\n    }\r\n  },\r\n  \"round_two_outputs\": {\r\n    \"participants\": [\r\n      \"1\",\r\n      \"2\"\r\n    ],\r\n    \"outputs\": {\r\n      \"1\": {\r\n        \"sig_share\": \"949f570b01bb3da189e1138fa4a1637ebaef75afb7ba97a0e1e147e204a3c800\",\r\n        \"group_commitment_share\": \"aad18ee8e1aa4e0a1fc5da36aab1ed0b138a503e14a2dba771b2c170efd00f34\"\r\n      },\r\n      \"2\": {\r\n        \"sig_share\": \"0bbfe9944fa5e6f9aefe5b663598719305e0aad0f9e438318bce9e9f281e7d01\",\r\n        \"group_commitment_share\": \"8613328b9f574fdf988f60593da63ad3d2645ab62010048dccf65b6c3504a60a\"\r\n      }\r\n    }\r\n  },\r\n  \"final_output\": {\r\n    \"sig\": {\r\n      \"R\": \"828e92dec234c47d60f9fc4b2bb6c794b06e83d0a6be9479dd8e3fc66c69cf3e\",\r\n      \"z\": \"9f5e41a05060249b38e06ff5d939d511c0cf2080b19fd0d16cb0e6812dc14502\"\r\n    }\r\n  }\r\n}\r\n```",
      "createdAt": "2022-01-29T14:57:44Z",
      "updatedAt": "2022-02-01T20:04:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c650e456f649701b6e5947a170d30d100fb6e605",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/bare-vectors",
      "headRefOid": "ddf19b14f5ec08d1b2e3e8962e2844e4d3bbe486",
      "closedAt": "2022-02-01T13:53:48Z",
      "mergedAt": "2022-02-01T13:53:48Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ea438bae97198bce95c247e0aa3183ef331d6937"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly are there any changes you'd like to see?",
          "createdAt": "2022-01-31T23:56:18Z",
          "updatedAt": "2022-01-31T23:56:18Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "In the example output, the message is the ascii bytes of \"test\" ?\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/60/files#diff-b6283431df51877348499b43b450f92d66069e6e453423a3a35b949720801d3aR201",
          "createdAt": "2022-02-01T07:56:11Z",
          "updatedAt": "2022-02-01T07:56:11Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> In the example output, the message is the ascii bytes of \"test\" ?\n> \n> \n\nYep, that's right. I figured it was best to use a consistent encoding (hex) for all values. ",
          "createdAt": "2022-02-01T13:28:24Z",
          "updatedAt": "2022-02-01T13:28:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84zxEAf",
          "commit": {
            "abbreviatedOid": "ddf19b1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-31T22:40:41Z",
          "updatedAt": "2022-01-31T22:40:42Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-01-31T22:40:41Z",
              "updatedAt": "2022-01-31T22:40:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zxECg",
          "commit": {
            "abbreviatedOid": "ddf19b1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-31T22:40:52Z",
          "updatedAt": "2022-01-31T22:40:53Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-01-31T22:40:52Z",
              "updatedAt": "2022-01-31T22:40:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zxEFF",
          "commit": {
            "abbreviatedOid": "ddf19b1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-31T22:41:06Z",
          "updatedAt": "2022-01-31T22:41:07Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-01-31T22:41:06Z",
              "updatedAt": "2022-01-31T22:41:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84zyFmc",
          "commit": {
            "abbreviatedOid": "ddf19b1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks great, just one q about how we're representing the message in the vector outputs",
          "createdAt": "2022-02-01T07:58:37Z",
          "updatedAt": "2022-02-01T07:58:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOEpUZs84x2ReU",
      "title": "Limit number of signers to 2^16-1.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/61",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #56.",
      "createdAt": "2022-01-31T16:09:04Z",
      "updatedAt": "2022-01-31T18:48:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c650e456f649701b6e5947a170d30d100fb6e605",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/signer-limit",
      "headRefOid": "b29cf8ad7d37f83a11b2414624103c79d6ee42d5",
      "closedAt": "2022-01-31T18:48:50Z",
      "mergedAt": "2022-01-31T18:48:50Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "67131ee827afe17c3e1fb385b07ed5d23cd2f8de"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84zwOhU",
          "commit": {
            "abbreviatedOid": "b29cf8a"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-31T18:48:41Z",
          "updatedAt": "2022-01-31T18:48:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOEpUZs84x56R_",
      "title": "RFC8032 compat with some open questions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/62",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This demonstrates RFC8032 compliance (for vanilla Ed25519, not the ctx or ph variants). To do so, it creates a signature using the reference implementation, encodes the signature and public key as RFC8032 expects, and then calls the signature verification routine [from the RFC](https://datatracker.ietf.org/doc/html/rfc8032#section-6).\r\n\r\nThis change raises a couple of questions (to me), including:\r\n1. The pre-hash step introduced in [this PR](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46), to address [this issue](https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43), meant that the vanilla ed25519 interop wouldn't work. (Vanilla ed25519 doesn't pre-hash the message when computing the challenge.) I think we got the change in #46 wrong. [The audit](https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf) only recommends this pre-hashing step when computing the blinding factor, not when computing the challenge, so I _think_ we could revert the pre-hashing step for the challenge.\r\n1. Do we want to specify a pile of different variants like RFC8032 did, including \"vanilla\" mode (Ed25519), pre-hash (ph) mode (Ed25519ph), and context-specific (ctx) mode (Ed25519ctx)? It seems like a lot of complexity to do everything, and to be honest I'm not sure what variant is most useful in practice. Does anyone else know?\r\n1. What is our API abstraction boundary? EdDSA uses byte strings everywhere, including signing and verifying keys, as well as signatures. Currently, we operate on \"internal\" types, e.g., scalars and elements for signing and verifying keys, respectively, and our signatures are (element, scalar) tuples. Should we adopt a higher layer of abstraction?\r\n1. Signature verification in this change was updated to match the logic in RFC8032. That is, rather than re-derive the group commitment and check for equality, check that the relation holds `[8][S]B = [8]R + [8][k]A'`.\r\n1. How do we want to handle domain separation for H1 and H2 for ciphersuites that target groups outside of RFC8032? \r\n\r\nStarting as a draft for now until we figure out what to do about (1), since I commented out the pre-hashing step in the code. I don't think we need to block on any of the remaining questions.\r\n\r\ncc @veorq in case he has thoughts on (1)",
      "createdAt": "2022-02-01T14:11:08Z",
      "updatedAt": "2022-02-04T15:05:16Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "872a7082d9ea33596b72d47a2d9ce906df25af06",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/rfc8032-compat",
      "headRefOid": "36c2b9043000beccc6e4f2551963a3dd7ba66ccf",
      "closedAt": "2022-02-04T01:20:39Z",
      "mergedAt": "2022-02-04T01:20:39Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9cf547200e7a0c18f24a3a2a32a51c2a8167fda0"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> 1. The pre-hash step introduced in [this PR](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46), to address [this issue](https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43), meant that the vanilla ed25519 interop wouldn't work. (Vanilla ed25519 doesn't pre-hash the message when computing the challenge.) I think we got the change in [Messages should be a fixed size when hashing\u00a0#46](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46) wrong. [The audit](https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf) only recommends this pre-hashing step when computing the blinding factor, not when computing the challenge, so I _think_ we could revert the pre-hashing step for the challenge.\r\n\r\nYes I think this is correct. @chelseakomlo can confirm\r\n\r\n\r\n",
          "createdAt": "2022-02-03T07:18:06Z",
          "updatedAt": "2022-02-03T07:18:06Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> 2\\. Do we want to specify a pile of different variants like RFC8032 did, including \"vanilla\" mode (Ed25519), pre-hash (ph) mode (Ed25519ph), and context-specific (ctx) mode (Ed25519ctx)? It seems like a lot of complexity to do everything, and to be honest I'm not sure what variant is most useful in practice. Does anyone else know?\r\n\r\nI don't think we want to go far with this. Looking at [ed25519-dalek](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/), and the [`RustCrypto/ed25519` API](https://github.com/RustCrypto/signatures/blob/master/ed25519/src/lib.rs), and the [`ring_compat` ed25519 API](https://docs.rs/ring-compat/latest/ring_compat/signature/trait.Signer.html#tymethod.try_sign), they just sign a message that is an arbitrary set of bytes, nothing explicit about prehashing, or ctx mode. Feels like we should keep it simple as possible while remaining compatible with APIs like those.\r\n\r\n",
          "createdAt": "2022-02-03T07:27:48Z",
          "updatedAt": "2022-02-03T07:27:48Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> 3\\. What is our API abstraction boundary? EdDSA uses byte strings everywhere, including signing and verifying keys, as well as signatures. Currently, we operate on \"internal\" types, e.g., scalars and elements for signing and verifying keys, respectively, and our signatures are (element, scalar) tuples. Should we adopt a higher layer of abstraction?\r\n\r\nThe `Signature` is parsed into algebraic structures from 64 bytes, similar for the `VerifyingKey`s, etc. Maybe we make the serialization \"pattern\" of these explicit like we do for the `SigningShare`, `SigningPackage`, etc message types, but not getting too deep because then we have to make them explicit per parameter set?",
          "createdAt": "2022-02-03T07:32:37Z",
          "updatedAt": "2022-02-03T07:32:37Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> 5\\. How do we want to handle domain separation for H1 and H2 for ciphersuites that target groups outside of RFC8032?\r\n\r\nNot sure I understand",
          "createdAt": "2022-02-03T07:37:55Z",
          "updatedAt": "2022-02-03T07:37:55Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> 4\\. Signature verification in this change was updated to match the logic in RFC8032. That is, rather than re-derive the group commitment and check for equality, check that the relation holds `[8][S]B = [8]R + [8][k]A'`.\r\n\r\nI think the code looks ok, @chelseakomlo may want to look at the verification tweak",
          "createdAt": "2022-02-03T07:47:55Z",
          "updatedAt": "2022-02-03T07:48:22Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The Signature is parsed into algebraic structures from 64 bytes, similar for the VerifyingKeys, etc. Maybe we make the serialization \"pattern\" of these explicit like we do for the SigningShare, SigningPackage, etc message types, but not getting too deep because then we have to make them explicit per parameter set?\r\n\r\nI'm not really sure I followed this. Having thought on this some more, I suggest we stick with the interface we have right now and then file a separate issue to further refine this down the road based on RG feedback.",
          "createdAt": "2022-02-03T14:08:18Z",
          "updatedAt": "2022-02-03T14:08:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> > 4. Signature verification in this change was updated to match the logic in RFC8032. That is, rather than re-derive the group commitment and check for equality, check that the relation holds `[8][S]B = [8]R + [8][k]A'`.\r\n> \r\n> I think the code looks ok, @chelseakomlo may want to look at the verification tweak\r\n\r\nMaybe @hdevalence has an opinion on which validation check is preferred? =)",
          "createdAt": "2022-02-03T14:09:12Z",
          "updatedAt": "2022-02-03T14:09:12Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> > 5. How do we want to handle domain separation for H1 and H2 for ciphersuites that target groups outside of RFC8032?\r\n>\r\n> Not sure I understand\r\n\r\nAh, sorry, I was basically asking if we wanted to keep the H1/H2 definitions we have in the draft, which fold in `contextString` and a string (`\"rho\"` or `\"chal\"`), for groups that are not targeting RFC8032. H2 is the hash we use for generating the challenge, so for RFC8032 compatibility, I don't think we can do as the draft currently describes. (Indeed, the code in this PR doesn't do it.) Does that clarify? ",
          "createdAt": "2022-02-03T14:11:03Z",
          "updatedAt": "2022-02-03T14:11:51Z"
        },
        {
          "author": "hdevalence",
          "authorAssociation": "NONE",
          "body": "> > > 4. Signature verification in this change was updated to match the logic in RFC8032. That is, rather than re-derive the group commitment and check for equality, check that the relation holds `[8][S]B = [8]R + [8][k]A'`.\r\n> \r\n> Maybe @hdevalence has an opinion on which validation check is preferred? =)\r\n\r\nHey, I don't have a lot of context, so discount this drive-by comment as appropriate, but I'm wondering to what extent it's actually important for a FROST specification to specify the verification check?  To me, one of the big benefits of FROST or other threshold signature constructions is that they produce signatures that look and act just like normal signatures (because they are just normal signatures) -- the part that is distinct and special is in the *creation* of those signatures.  So my assumption would be that it's better not to specify verification at all, except by reference to the method used by whatever signature scheme is in use (i.e., rather than trying to match RFC8032 exactly, just refer to it).\r\n\r\nOtherwise, my opinion would be to use the ZIP215-style validation checks, but again, this is a drive-by comment, so feel free to discount it as appropriate, it's certainly possible that there's context I'm missing.",
          "createdAt": "2022-02-03T18:06:17Z",
          "updatedAt": "2022-02-03T18:06:17Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "> > 1. The pre-hash step introduced in [this PR](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46), to address [this issue](https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43), meant that the vanilla ed25519 interop wouldn't work. (Vanilla ed25519 doesn't pre-hash the message when computing the challenge.) I think we got the change in [Messages should be a fixed size when hashing\u00a0#46](https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46) wrong. [The audit](https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf) only recommends this pre-hashing step when computing the blinding factor, not when computing the challenge, so I _think_ we could revert the pre-hashing step for the challenge.\r\n> \r\n> Yes I think this is correct. @chelseakomlo can confirm\r\n\r\nYes, I'm fine with this change.",
          "createdAt": "2022-02-03T19:27:12Z",
          "updatedAt": "2022-02-03T19:27:12Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Hey, I don't have a lot of context, so discount this drive-by comment as appropriate, but I'm wondering to what extent it's actually important for a FROST specification to specify the verification check? To me, one of the big benefits of FROST or other threshold signature constructions is that they produce signatures that look and act just like normal signatures (because they are just normal signatures) -- the part that is distinct and special is in the creation of those signatures. \r\n\r\nThanks for chiming in! This is a fair question. If we were only targeting RFC8032, then I agree that specifying verification would be redundant. However, one of the established goals -- which may certainly change -- is to support ciphersuites based on NIST curves (P-256) and ristretto255. As RFC8032 does not apply to these variants, we needed to include the verification algorithm.\r\n\r\nI'm not really familiar with the ZIP215-style validation checks, but I'll take a look. \ud83d\udc4d ",
          "createdAt": "2022-02-03T19:29:45Z",
          "updatedAt": "2022-02-03T19:29:45Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@chelseakomlo addressed your comments -- thanks!",
          "createdAt": "2022-02-03T22:10:41Z",
          "updatedAt": "2022-02-03T22:10:41Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84z8V4c",
          "commit": {
            "abbreviatedOid": "af54557"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T07:33:54Z",
          "updatedAt": "2022-02-03T07:33:54Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Re: \r\n\r\n>The pre-hash step introduced in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46, to address https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43, meant that the vanilla ed25519 interop wouldn't work. (Vanilla ed25519 doesn't pre-hash the message when computing the challenge.) I think we got the change in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46 wrong. [The audit](https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf) only recommends this pre-hashing step when computing the blinding factor, not when computing the challenge, so I think we could revert the pre-hashing step for the challenge.",
              "createdAt": "2022-02-03T07:33:54Z",
              "updatedAt": "2022-02-03T07:33:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84z8WBz",
          "commit": {
            "abbreviatedOid": "af54557"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T07:34:44Z",
          "updatedAt": "2022-02-03T07:34:44Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "\ud83d\udc40 ",
              "createdAt": "2022-02-03T07:34:44Z",
              "updatedAt": "2022-02-03T07:34:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84z8WJo",
          "commit": {
            "abbreviatedOid": "af54557"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T07:35:24Z",
          "updatedAt": "2022-02-03T07:35:25Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "re:\r\n\r\n> The pre-hash step introduced in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46, to address https://github.com/cfrg/draft-irtf-cfrg-frost/issues/43, meant that the vanilla ed25519 interop wouldn't work. (Vanilla ed25519 doesn't pre-hash the message when computing the challenge.) I think we got the change in https://github.com/cfrg/draft-irtf-cfrg-frost/pull/46 wrong. [The audit](https://github.com/ZcashFoundation/redjubjub/blob/main/zcash-frost-audit-report-20210323.pdf) only recommends this pre-hashing step when computing the blinding factor, not when computing the challenge, so I think we could revert the pre-hashing step for the challenge.",
              "createdAt": "2022-02-03T07:35:24Z",
              "updatedAt": "2022-02-03T07:35:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84z9_Nj",
          "commit": {
            "abbreviatedOid": "e1893d0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T14:06:50Z",
          "updatedAt": "2022-02-03T14:06:50Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Yeah, if we agree that we should revert this change, I'll tidy up this code and fix the main spec.",
              "createdAt": "2022-02-03T14:06:50Z",
              "updatedAt": "2022-02-03T14:06:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84z9_Yd",
          "commit": {
            "abbreviatedOid": "e1893d0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T14:07:21Z",
          "updatedAt": "2022-02-03T14:07:21Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I'll tidy this up before I promote this PR for real review.",
              "createdAt": "2022-02-03T14:07:21Z",
              "updatedAt": "2022-02-03T14:07:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84z9_dm",
          "commit": {
            "abbreviatedOid": "e1893d0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T14:07:28Z",
          "updatedAt": "2022-02-03T14:07:29Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "(Same comment as above)",
              "createdAt": "2022-02-03T14:07:29Z",
              "updatedAt": "2022-02-03T14:07:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AF8u",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good with these changes. Thanks for this huge effort.",
          "createdAt": "2022-02-03T21:35:09Z",
          "updatedAt": "2022-02-03T21:59:36Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "The `x,y` need to have subscript `i`s on them",
              "createdAt": "2022-02-03T21:35:09Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 133,
              "body": "Need subscript `j`s on the `(x,y)` values; same for values below.",
              "createdAt": "2022-02-03T21:37:25Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 143,
              "body": "Shouldn't this be \"are Scalar and Element values respectively\", if I'm reading this correctly?",
              "createdAt": "2022-02-03T21:39:17Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 153,
              "body": "Swap out `B` for `commitment_list`, no?",
              "createdAt": "2022-02-03T21:39:42Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 163,
              "body": "We need this to be either `H1,H2,H3`",
              "createdAt": "2022-02-03T21:40:29Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 205,
              "body": "Needs to be `H1/H2/H3`",
              "createdAt": "2022-02-03T21:41:21Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 212,
              "body": "Capital R_i",
              "createdAt": "2022-02-03T21:42:03Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 59,
              "body": "`H3` is an alias for `H` due to backwards compatibility reasons with {{!RFC8032}}",
              "createdAt": "2022-02-03T21:50:02Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 85,
              "body": "If you are feeling up for it, `participant_index` is more accurate, as opposed to just the ordering of the list.",
              "createdAt": "2022-02-03T21:52:29Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 99,
              "body": "Do you need the \"for each signer\" specification again at the end of this sentence?",
              "createdAt": "2022-02-03T21:53:06Z",
              "updatedAt": "2022-02-03T21:59:36Z"
            },
            {
              "originalPosition": 136,
              "body": "This list MUST be sorted in ascending order with respect to the participant identifier.",
              "createdAt": "2022-02-03T21:53:53Z",
              "updatedAt": "2022-02-03T21:59:37Z"
            },
            {
              "originalPosition": 236,
              "body": "Shouldn't you specify the input for `H2` as you did on line 672 for `H1`?",
              "createdAt": "2022-02-03T21:56:58Z",
              "updatedAt": "2022-02-03T21:59:37Z"
            },
            {
              "originalPosition": 236,
              "body": "Also, I seem to recall that the public key is also hashed into H2. Double checking that is not the case here.",
              "createdAt": "2022-02-03T21:58:33Z",
              "updatedAt": "2022-02-03T21:59:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840ALh9",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:00:53Z",
          "updatedAt": "2022-02-03T22:00:53Z",
          "comments": [
            {
              "originalPosition": 143,
              "body": "Oh, yes, duh.",
              "createdAt": "2022-02-03T22:00:53Z",
              "updatedAt": "2022-02-03T22:00:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840ALjQ",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:01:00Z",
          "updatedAt": "2022-02-03T22:01:00Z",
          "comments": [
            {
              "originalPosition": 153,
              "body": "Yep, thanks, missed this one.",
              "createdAt": "2022-02-03T22:01:00Z",
              "updatedAt": "2022-02-03T22:01:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AMDF",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:03:15Z",
          "updatedAt": "2022-02-03T22:03:15Z",
          "comments": [
            {
              "originalPosition": 236,
              "body": "No -- this is specifically done for compatibility with RFC8032.",
              "createdAt": "2022-02-03T22:03:15Z",
              "updatedAt": "2022-02-03T22:03:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AMOR",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:04:04Z",
          "updatedAt": "2022-02-03T22:04:04Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "What do we want H3 to be for non-RFC8032 suites?",
              "createdAt": "2022-02-03T22:04:04Z",
              "updatedAt": "2022-02-03T22:04:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AMqf",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:06:06Z",
          "updatedAt": "2022-02-03T22:06:07Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "`index` is the notation used in the parameter description, so I'll leave this as-is for now.",
              "createdAt": "2022-02-03T22:06:07Z",
              "updatedAt": "2022-02-03T22:06:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AMtX",
          "commit": {
            "abbreviatedOid": "3ff8b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:06:21Z",
          "updatedAt": "2022-02-03T22:06:21Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I picked something arbitrary for domain separation of H3 with these suites.",
              "createdAt": "2022-02-03T22:06:21Z",
              "updatedAt": "2022-02-03T22:06:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AOBC",
          "commit": {
            "abbreviatedOid": "a7a36b4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:12:54Z",
          "updatedAt": "2022-02-03T22:12:54Z",
          "comments": [
            {
              "originalPosition": 205,
              "body": "Thanks, yeah, I forgot to undo this change!",
              "createdAt": "2022-02-03T22:12:54Z",
              "updatedAt": "2022-02-03T22:12:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AODO",
          "commit": {
            "abbreviatedOid": "a7a36b4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-03T22:13:06Z",
          "updatedAt": "2022-02-03T22:13:06Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "(See below)",
              "createdAt": "2022-02-03T22:13:06Z",
              "updatedAt": "2022-02-03T22:13:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Am5K",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:00:45Z",
          "updatedAt": "2022-02-04T01:00:46Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "I worry a little about the use of `x` and `y` because that may be confused with `x`-coordinates / `y`-coordinates of curve group elements (points) in affine coordinates",
              "createdAt": "2022-02-04T01:00:45Z",
              "updatedAt": "2022-02-04T01:00:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Am7f",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:01:05Z",
          "updatedAt": "2022-02-04T01:01:05Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-04T01:01:05Z",
              "updatedAt": "2022-02-04T01:01:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Am_M",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:01:31Z",
          "updatedAt": "2022-02-04T01:01:32Z",
          "comments": [
            {
              "originalPosition": 125,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-04T01:01:31Z",
              "updatedAt": "2022-02-04T01:01:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnBb",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:01:47Z",
          "updatedAt": "2022-02-04T01:01:47Z",
          "comments": [
            {
              "originalPosition": 138,
              "body": "Same here",
              "createdAt": "2022-02-04T01:01:47Z",
              "updatedAt": "2022-02-04T01:01:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnDe",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:02:00Z",
          "updatedAt": "2022-02-04T01:02:01Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-04T01:02:01Z",
              "updatedAt": "2022-02-04T01:02:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnDl",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:02:01Z",
          "updatedAt": "2022-02-04T01:02:02Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Yeah, I didn't want to use D/E though, since we dropped that notation. Happy to take suggestions!",
              "createdAt": "2022-02-04T01:02:01Z",
              "updatedAt": "2022-02-04T01:02:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnGD",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:02:22Z",
          "updatedAt": "2022-02-04T01:02:22Z",
          "comments": [
            {
              "originalPosition": 171,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-04T01:02:22Z",
              "updatedAt": "2022-02-04T01:02:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnJs",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:02:50Z",
          "updatedAt": "2022-02-04T01:02:51Z",
          "comments": [
            {
              "originalPosition": 224,
              "body": "Cool, this helps",
              "createdAt": "2022-02-04T01:02:50Z",
              "updatedAt": "2022-02-04T01:02:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnNH",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-04T01:03:19Z",
          "updatedAt": "2022-02-04T01:03:20Z",
          "comments": [
            {
              "originalPosition": 243,
              "body": "Very good",
              "createdAt": "2022-02-04T01:03:19Z",
              "updatedAt": "2022-02-04T01:03:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840AnS9",
          "commit": {
            "abbreviatedOid": "36c2b90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Tiny q, non-blocking. Yay!",
          "createdAt": "2022-02-04T01:04:02Z",
          "updatedAt": "2022-02-04T01:04:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 63,
      "id": "PR_kwDOEpUZs84x-not",
      "title": "Hash in message into rho",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/63",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-02T16:40:01Z",
      "updatedAt": "2022-02-03T03:37:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ea438bae97198bce95c247e0aa3183ef331d6937",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "rho",
      "headRefOid": "18b05359e4be282686d4f60cf5e9629821ed41a7",
      "closedAt": "2022-02-03T03:37:35Z",
      "mergedAt": "2022-02-03T03:37:35Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "872a7082d9ea33596b72d47a2d9ce906df25af06"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs84z5-e4",
          "commit": {
            "abbreviatedOid": "a9381d1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-02T16:51:33Z",
          "updatedAt": "2022-02-02T16:51:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84z5_wN",
          "commit": {
            "abbreviatedOid": "a9381d1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "@chelseakomlo please also update the reference implementation!",
          "createdAt": "2022-02-02T16:55:28Z",
          "updatedAt": "2022-02-02T16:55:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs84z74QG",
          "commit": {
            "abbreviatedOid": "6f1147d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-03T03:36:57Z",
          "updatedAt": "2022-02-03T03:37:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\n        msg_hash = self.H3(message)\n```\n",
              "createdAt": "2022-02-03T03:36:57Z",
              "updatedAt": "2022-02-03T03:37:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 65,
      "id": "PR_kwDOEpUZs84yDgPg",
      "title": "Add automation to run poc make test",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/65",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-03T23:02:17Z",
      "updatedAt": "2022-02-03T23:15:11Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "872a7082d9ea33596b72d47a2d9ce906df25af06",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "ci",
      "headRefOid": "c89789165aebc71d05cc066672c3e63fa5012fe7",
      "closedAt": "2022-02-03T23:15:09Z",
      "mergedAt": "2022-02-03T23:15:09Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "af8c9651702c14ad8c3b15e40ae72b530110fa7b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 66,
      "id": "PR_kwDOEpUZs84yDkQC",
      "title": "Use sagemath:latest docker image to run make test",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/66",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-03T23:32:18Z",
      "updatedAt": "2022-02-04T22:15:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "af8c9651702c14ad8c3b15e40ae72b530110fa7b",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "docker-sage",
      "headRefOid": "91766afb598f124680bdffc18361e5b1851cabf4",
      "closedAt": "2022-02-04T22:15:42Z",
      "mergedAt": "2022-02-04T22:15:42Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "21471bbd339579da93ba14c0b1a4a79e6279c45a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 67,
      "id": "PR_kwDOEpUZs84yFxqg",
      "title": "Format test vectors and include them in the draft",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/67",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #49.",
      "createdAt": "2022-02-04T15:38:44Z",
      "updatedAt": "2022-02-12T01:38:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "21471bbd339579da93ba14c0b1a4a79e6279c45a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/format-vectors",
      "headRefOid": "9cd6bf88fba6f7b2197a971124130eafc4e096ca",
      "closedAt": "2022-02-12T01:38:54Z",
      "mergedAt": "2022-02-12T01:38:54Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "e6767854decbe72ea4b9e9838f7056dd21d795d9"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased.",
          "createdAt": "2022-02-04T22:22:02Z",
          "updatedAt": "2022-02-04T22:22:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly I made your suggested name change in this PR. Please have a look!",
          "createdAt": "2022-02-10T14:42:48Z",
          "updatedAt": "2022-02-10T14:42:48Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Is this name change also happening here?\n\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/67#discussion_r803715421",
          "createdAt": "2022-02-10T15:16:21Z",
          "updatedAt": "2022-02-10T15:16:21Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly yep -- see the latest changes! (I pushed locally but didn't see that I had a conflict, so the commits you see just now are me resolving those conflicts.)",
          "createdAt": "2022-02-10T16:19:40Z",
          "updatedAt": "2022-02-10T16:26:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840Pvkn",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:21:47Z",
          "updatedAt": "2022-02-08T19:21:48Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Should we include these here if we're not using them rn? Maybe if we expand the defined ciphersuites we can bring them back",
              "createdAt": "2022-02-08T19:21:48Z",
              "updatedAt": "2022-02-08T19:21:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840PvsJ",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:22:14Z",
          "updatedAt": "2022-02-08T19:22:14Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-08T19:22:14Z",
              "updatedAt": "2022-02-08T19:22:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Pvvs",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:22:27Z",
          "updatedAt": "2022-02-08T19:22:27Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-02-08T19:22:27Z",
              "updatedAt": "2022-02-08T19:22:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840PwNp",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:24:16Z",
          "updatedAt": "2022-02-08T19:24:17Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Should this go after the Signer round one outputs?",
              "createdAt": "2022-02-08T19:24:17Z",
              "updatedAt": "2022-02-08T19:24:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840PxLQ",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:27:58Z",
          "updatedAt": "2022-02-08T19:27:59Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "I think this needs a better name as it's different than just the public commitments being used",
              "createdAt": "2022-02-08T19:27:59Z",
              "updatedAt": "2022-02-08T19:27:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Py9b",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:34:57Z",
          "updatedAt": "2022-02-08T19:34:58Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n  output signature share and group commitment share as produced in {{frost-round-two}}.\r\n```",
              "createdAt": "2022-02-08T19:34:57Z",
              "updatedAt": "2022-02-08T19:34:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P6S6",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:03:21Z",
          "updatedAt": "2022-02-08T20:03:21Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Yeah, probably. But let's do that in a separate PR.",
              "createdAt": "2022-02-08T20:03:21Z",
              "updatedAt": "2022-02-08T20:03:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P63V",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:05:36Z",
          "updatedAt": "2022-02-08T20:05:37Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Eh, I don't feel strongly. It could.",
              "createdAt": "2022-02-08T20:05:37Z",
              "updatedAt": "2022-02-08T20:05:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P692",
          "commit": {
            "abbreviatedOid": "3f4b408"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:06:00Z",
          "updatedAt": "2022-02-08T20:06:00Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "What is \"this\"? Are you referring to `commitment_list` or `participants`?",
              "createdAt": "2022-02-08T20:06:00Z",
              "updatedAt": "2022-02-08T20:06:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Vx38",
          "commit": {
            "abbreviatedOid": "dc3e2d2"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good to me",
          "createdAt": "2022-02-09T22:23:44Z",
          "updatedAt": "2022-02-09T22:30:42Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I would say \"compatible with\" here.",
              "createdAt": "2022-02-09T22:23:44Z",
              "updatedAt": "2022-02-09T22:30:42Z"
            },
            {
              "originalPosition": 92,
              "body": "Why is this value needed? If it is purely for testing, you might add something about how this value is obtained by performing Shamir.Recover with the participant's secrets. ",
              "createdAt": "2022-02-09T22:26:53Z",
              "updatedAt": "2022-02-09T22:30:42Z"
            },
            {
              "originalPosition": 307,
              "body": "Should we have a test for a different number of signers, just in case? ",
              "createdAt": "2022-02-09T22:27:55Z",
              "updatedAt": "2022-02-09T22:30:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840V1be",
          "commit": {
            "abbreviatedOid": "dc3e2d2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T22:42:19Z",
          "updatedAt": "2022-02-09T22:42:19Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nmeant to produce signatures compatible with Ed448 as specified in {{!RFC8032}}.\r\n```",
              "createdAt": "2022-02-09T22:42:19Z",
              "updatedAt": "2022-02-09T22:42:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840V1lV",
          "commit": {
            "abbreviatedOid": "47f24f7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T22:43:08Z",
          "updatedAt": "2022-02-09T22:43:08Z",
          "comments": [
            {
              "originalPosition": 307,
              "body": "Do you mean a different number for `MAX_SIGNERS`, or `NUM_SIGNERS`? I don't think changing `MAX_SIGNERS` increases test coverage. Changing `NUM_SIGNERS` might, however. I would prefer to do that in a separate PR.",
              "createdAt": "2022-02-09T22:43:08Z",
              "updatedAt": "2022-02-09T22:43:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840V1r6",
          "commit": {
            "abbreviatedOid": "47f24f7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-09T22:43:40Z",
          "updatedAt": "2022-02-09T22:43:40Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "Right -- one can test that Shamir recovery yields this group secret. ",
              "createdAt": "2022-02-09T22:43:40Z",
              "updatedAt": "2022-02-09T22:43:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Wg35",
          "commit": {
            "abbreviatedOid": "47f24f7"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-10T04:30:38Z",
          "updatedAt": "2022-02-10T04:30:38Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Sorry, `commitment_list`",
              "createdAt": "2022-02-10T04:30:38Z",
              "updatedAt": "2022-02-10T04:30:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840Yume",
          "commit": {
            "abbreviatedOid": "47f24f7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-10T14:13:06Z",
          "updatedAt": "2022-02-10T14:13:07Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "True -- it's the encoded group commitment list plus the message hash. I'll change the name to `binding_factor_input`.",
              "createdAt": "2022-02-10T14:13:06Z",
              "updatedAt": "2022-02-10T14:13:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840f_xd",
          "commit": {
            "abbreviatedOid": "9cd6bf8"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks fantastic, thanks @chris-wood ",
          "createdAt": "2022-02-12T01:38:46Z",
          "updatedAt": "2022-02-12T01:38:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOEpUZs84yLokI",
      "title": "Add Ed448 suite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/71",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #69.",
      "createdAt": "2022-02-07T16:13:49Z",
      "updatedAt": "2022-02-08T23:44:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "caw/format-vectors",
      "baseRefOid": "3f4b408327cf8d4aabf299da41ac80941f10f3dd",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/add-ed448",
      "headRefOid": "5353338acc3e464275b6fcb136cb5fa8177ec70a",
      "closedAt": "2022-02-08T23:44:55Z",
      "mergedAt": "2022-02-08T23:44:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "dc3e2d258ff1c9cd51f48a06e067b2ceaf6cd42d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840PDVl",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good to me, thank you!",
          "createdAt": "2022-02-08T17:03:06Z",
          "updatedAt": "2022-02-08T17:03:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs840PzeN",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:37:00Z",
          "updatedAt": "2022-02-08T19:37:00Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This is `edwards448` here and `ed448` below, should we pick one?",
              "createdAt": "2022-02-08T19:37:00Z",
              "updatedAt": "2022-02-08T19:37:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P0yq",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:41:50Z",
          "updatedAt": "2022-02-08T19:41:51Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "So Edwards448 by definition has a cofactor. Should we clarify that we are still trying to do these Schnorr signatures in the prime order subgroup, not 'just' the composite-order group defined by the whole elliptic curve?",
              "createdAt": "2022-02-08T19:41:51Z",
              "updatedAt": "2022-02-08T19:41:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P2dp",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T19:48:23Z",
          "updatedAt": "2022-02-08T19:48:23Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "This is also to retain compat with Ed448 signatures? EDIT: hah yes as mentioned below \ud83d\ude48",
              "createdAt": "2022-02-08T19:48:23Z",
              "updatedAt": "2022-02-08T19:48:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P3rx",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Non-blocking q's, looks good",
          "createdAt": "2022-02-08T19:53:13Z",
          "updatedAt": "2022-02-08T19:53:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs840P7dU",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:07:52Z",
          "updatedAt": "2022-02-08T20:07:52Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Heh, yeah. Do you have a preference? \ud83e\udd37 ",
              "createdAt": "2022-02-08T20:07:52Z",
              "updatedAt": "2022-02-08T20:07:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P7kA",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:08:17Z",
          "updatedAt": "2022-02-08T20:08:17Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "That's not a bad idea. Can we do this in a followup PR? (And would you be willing to do that?)",
              "createdAt": "2022-02-08T20:08:17Z",
              "updatedAt": "2022-02-08T20:08:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840P7lS",
          "commit": {
            "abbreviatedOid": "5353338"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T20:08:21Z",
          "updatedAt": "2022-02-08T20:08:21Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": ":) ",
              "createdAt": "2022-02-08T20:08:21Z",
              "updatedAt": "2022-02-08T20:08:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOEpUZs84yQ4cJ",
      "title": "Update single-signer Schnorr signature operations names",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/73",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "They were talking about 'group' commitments and keys ",
      "createdAt": "2022-02-08T22:07:21Z",
      "updatedAt": "2022-02-08T22:08:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "21471bbd339579da93ba14c0b1a4a79e6279c45a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "81b6b3cd8e34516470f9289755e9835bb80a8d26",
      "closedAt": "2022-02-08T22:08:01Z",
      "mergedAt": "2022-02-08T22:08:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "890f446ba5d1be1ab3ff01b8ac542205c9d3a91a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840QXd3",
          "commit": {
            "abbreviatedOid": "81b6b3c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-08T22:07:48Z",
          "updatedAt": "2022-02-08T22:07:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOEpUZs84yRZes",
      "title": "fix output documentation for secret_share_combine",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/74",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-09T02:25:01Z",
      "updatedAt": "2022-02-09T12:40:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "890f446ba5d1be1ab3ff01b8ac542205c9d3a91a",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "doc-fix",
      "headRefOid": "174d537271401add1ddb5004609f12bafe298c8c",
      "closedAt": "2022-02-09T03:04:20Z",
      "mergedAt": "2022-02-09T03:04:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b4fedc870e3b07055db9f9086972ef2981b8609a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840RA9e",
          "commit": {
            "abbreviatedOid": "174d537"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you! \ud83d\ude4f",
          "createdAt": "2022-02-09T03:04:16Z",
          "updatedAt": "2022-02-09T03:04:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDOEpUZs84yb8Aq",
      "title": "Refactor the document for better flow",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/75",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There was a bit of redundant information, so I cleaned that up and (I think) improved the flow.\r\n\r\nI think we still need to do a pass over variable names in the main protocol doc, but that can happen later.",
      "createdAt": "2022-02-10T21:52:46Z",
      "updatedAt": "2022-02-12T17:48:06Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "623333798381a5be5ed65381e860119f8023ca1f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/refactor-doc",
      "headRefOid": "0f66b72ee658ac4d3436c9bf11d33025557c68f6",
      "closedAt": "2022-02-12T17:48:06Z",
      "mergedAt": "2022-02-12T17:48:06Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b4e659166de32ff18632ddfdb3d81471ca36a73e"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks! @chelseakomlo, please review and merge when convenient.",
          "createdAt": "2022-02-11T21:16:44Z",
          "updatedAt": "2022-02-11T21:16:44Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840fhiO",
          "commit": {
            "abbreviatedOid": "b8d7f3f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-11T21:06:54Z",
          "updatedAt": "2022-02-11T21:06:54Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "```suggestion\r\n- Participant `i`s signing key, which is the i-th secret share of `s`.\r\n```",
              "createdAt": "2022-02-11T21:06:54Z",
              "updatedAt": "2022-02-11T21:06:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840fipi",
          "commit": {
            "abbreviatedOid": "843fa42"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-11T21:13:02Z",
          "updatedAt": "2022-02-11T21:13:03Z",
          "comments": [
            {
              "originalPosition": 266,
              "body": "```suggestion\r\nThe protocol as specified in this document does not target the following goals:\r\n```",
              "createdAt": "2022-02-11T21:13:02Z",
              "updatedAt": "2022-02-11T21:13:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840fi3x",
          "commit": {
            "abbreviatedOid": "843fa42"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-11T21:13:48Z",
          "updatedAt": "2022-02-11T21:13:48Z",
          "comments": [
            {
              "originalPosition": 268,
              "body": "```suggestion\r\n* Post quantum security. FROST, like generic Schnorr signatures, requires the hardness of the Discrete Logarithm Problem.\r\n```",
              "createdAt": "2022-02-11T21:13:48Z",
              "updatedAt": "2022-02-11T21:13:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840fjF0",
          "commit": {
            "abbreviatedOid": "843fa42"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-11T21:15:01Z",
          "updatedAt": "2022-02-11T21:15:01Z",
          "comments": [
            {
              "originalPosition": 268,
              "body": "I only make this comment because the Shamir secret sharing is in fact quantum resilient, but the group actions like the additive group stuff to generate the group Schnorr signature, is not ",
              "createdAt": "2022-02-11T21:15:01Z",
              "updatedAt": "2022-02-11T21:15:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840fjQK",
          "commit": {
            "abbreviatedOid": "315832b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM!",
          "createdAt": "2022-02-11T21:15:56Z",
          "updatedAt": "2022-02-11T21:15:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs840gRk6",
          "commit": {
            "abbreviatedOid": "315832b"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great, and added a few nitpicky changes. Thanks @chris-wood ",
          "createdAt": "2022-02-12T17:38:36Z",
          "updatedAt": "2022-02-12T17:43:24Z",
          "comments": [
            {
              "originalPosition": 187,
              "body": "I wouldn't call this a round, it is more of an aggregation step.",
              "createdAt": "2022-02-12T17:38:36Z",
              "updatedAt": "2022-02-12T17:43:24Z"
            },
            {
              "originalPosition": 194,
              "body": "This is `signing key share`",
              "createdAt": "2022-02-12T17:39:06Z",
              "updatedAt": "2022-02-12T17:43:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gRsw",
          "commit": {
            "abbreviatedOid": "6068fac"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:44:04Z",
          "updatedAt": "2022-02-12T17:44:04Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "Copy-pasted from existing text. We can update it.",
              "createdAt": "2022-02-12T17:44:04Z",
              "updatedAt": "2022-02-12T17:44:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gRxR",
          "commit": {
            "abbreviatedOid": "a400482"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:47:33Z",
          "updatedAt": "2022-02-12T17:47:33Z",
          "comments": [
            {
              "originalPosition": 234,
              "body": "```suggestion\r\n{{frost-aggregation}}.\r\n```",
              "createdAt": "2022-02-12T17:47:33Z",
              "updatedAt": "2022-02-12T17:47:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gRxe",
          "commit": {
            "abbreviatedOid": "a400482"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:47:41Z",
          "updatedAt": "2022-02-12T17:47:41Z",
          "comments": [
            {
              "originalPosition": 256,
              "body": "```suggestion\r\n## Signature Share Aggregation {#frost-aggregation}\r\n```",
              "createdAt": "2022-02-12T17:47:41Z",
              "updatedAt": "2022-02-12T17:47:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOEpUZs84ydf7E",
      "title": "improved pseudo code for derive_lagrange_coefficient",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/76",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "the rationale is that in order to understand \"index\", you need to read the whole document. This change makes `derive_lagrange_coefficient` more self-contained.",
      "createdAt": "2022-02-11T02:18:59Z",
      "updatedAt": "2022-02-11T14:08:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b4fedc870e3b07055db9f9086972ef2981b8609a",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "doc-lagrange",
      "headRefOid": "d63dc8dcdd4373a13e763ee7c28248018817d47c",
      "closedAt": "2022-02-11T03:15:25Z",
      "mergedAt": "2022-02-11T03:15:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "bc2a318d4d5f713bae6d68dafd7fdb6014017aaf"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Another solid improvement :) keep them coming, @aldenml!",
          "createdAt": "2022-02-11T03:15:20Z",
          "updatedAt": "2022-02-11T03:15:20Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thanks :)",
          "createdAt": "2022-02-11T14:08:28Z",
          "updatedAt": "2022-02-11T14:08:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840b9Fi",
          "commit": {
            "abbreviatedOid": "d63dc8d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-11T03:15:02Z",
          "updatedAt": "2022-02-11T03:15:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 77,
      "id": "PR_kwDOEpUZs84yjJye",
      "title": "Add Schnorr to the title",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/77",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "So as to distinguish it from solutions for RSA or ECDSA signatures, which can be dealt with separately.",
      "createdAt": "2022-02-11T21:09:30Z",
      "updatedAt": "2022-02-11T21:17:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "bc2a318d4d5f713bae6d68dafd7fdb6014017aaf",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/add-schnorr-to-title",
      "headRefOid": "4531a2d86041039a8b66d6de50a0e26e0f532bde",
      "closedAt": "2022-02-11T21:17:13Z",
      "mergedAt": "2022-02-11T21:17:13Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "51664a77b0e02b86fa2cddccacc13fb5055c4d5d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840fjXh",
          "commit": {
            "abbreviatedOid": "4531a2d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udcaf",
          "createdAt": "2022-02-11T21:16:37Z",
          "updatedAt": "2022-02-11T21:16:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOEpUZs84yjLrv",
      "title": "Only trigger Sage workflow when the poc/ files change",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/78",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-11T21:19:37Z",
      "updatedAt": "2022-02-11T21:20:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "51664a77b0e02b86fa2cddccacc13fb5055c4d5d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "f2d75123d4abb18dd119636f7160751d1117d940",
      "closedAt": "2022-02-11T21:20:13Z",
      "mergedAt": "2022-02-11T21:20:13Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b494082f0ebc6726f081548265f1be165a911dca"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840fkAW",
          "commit": {
            "abbreviatedOid": "f2d7512"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-11T21:20:09Z",
          "updatedAt": "2022-02-11T21:20:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 79,
      "id": "PR_kwDOEpUZs84ykUDT",
      "title": "Add change log",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/79",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-12T00:54:48Z",
      "updatedAt": "2022-02-12T19:39:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b494082f0ebc6726f081548265f1be165a911dca",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/change-log",
      "headRefOid": "6dd537fcf2d0d38ff57c214f9dcb436819341de3",
      "closedAt": "2022-02-12T19:39:33Z",
      "mergedAt": "2022-02-12T19:39:33Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "c7308703401a26953881f08af2a855618f625ebe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840gT1n",
          "commit": {
            "abbreviatedOid": "6dd537f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks @chris-wood, looks great to me.",
          "createdAt": "2022-02-12T19:39:25Z",
          "updatedAt": "2022-02-12T19:39:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOEpUZs84ynWnu",
      "title": "some fixes in pseudo code for sign",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/80",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- the statement `msg_hash = H3(msg)` was repeated, it's done near the beginning.",
      "createdAt": "2022-02-12T16:31:52Z",
      "updatedAt": "2022-02-12T17:53:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e6767854decbe72ea4b9e9838f7056dd21d795d9",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "doc-sign",
      "headRefOid": "b5555cfd086902f7ae9f17a8e86f43056868a461",
      "closedAt": "2022-02-12T17:44:37Z",
      "mergedAt": "2022-02-12T17:44:37Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "623333798381a5be5ed65381e860119f8023ca1f"
      },
      "comments": [
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood I made the changes, waiting for the next review",
          "createdAt": "2022-02-12T17:08:24Z",
          "updatedAt": "2022-02-12T17:08:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Can you please also update the description used in `encode_group_commitment_list`?",
          "createdAt": "2022-02-12T17:08:56Z",
          "updatedAt": "2022-02-12T17:08:56Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yes, and also\r\n```\r\n- nonce_i, pair of Scalar values (d, e) generated in round one.\r\n- comm_i, pair of Element values (D, E) generated in round one\r\n```",
          "createdAt": "2022-02-12T17:09:50Z",
          "updatedAt": "2022-02-12T17:09:50Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "done, waiting for next review",
          "createdAt": "2022-02-12T17:17:24Z",
          "updatedAt": "2022-02-12T17:17:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840gQXa",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T16:39:33Z",
          "updatedAt": "2022-02-12T16:45:01Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "This is noted in the inputs of `derive_lagrange_coefficients()`",
              "createdAt": "2022-02-12T16:39:34Z",
              "updatedAt": "2022-02-12T16:45:01Z"
            },
            {
              "originalPosition": 8,
              "body": "I think your branch is behind, we renamed these",
              "createdAt": "2022-02-12T16:40:17Z",
              "updatedAt": "2022-02-12T16:45:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gQuj",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T16:57:13Z",
          "updatedAt": "2022-02-12T16:57:13Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I just checked again, and it's `(x_j, y_j)` in `master`, and my branch is `1` commit ahead of `cfrg:master`. Let me know if I'm missing something, thanks.",
              "createdAt": "2022-02-12T16:57:13Z",
              "updatedAt": "2022-02-12T16:57:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gQyP",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:00:29Z",
          "updatedAt": "2022-02-12T17:00:30Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "We're referring to these as `hiding_nonce_commitment` and `binding_nonce_commitment` -- I'd prefer we use those names.",
              "createdAt": "2022-02-12T17:00:29Z",
              "updatedAt": "2022-02-12T17:00:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gQye",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:00:37Z",
          "updatedAt": "2022-02-12T17:00:37Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Yeah, I'd prefer we drop this comment.",
              "createdAt": "2022-02-12T17:00:37Z",
              "updatedAt": "2022-02-12T17:00:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gQzE",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks for dropping the redundant `msg_hash` computation! I'd like to see some other changes before we land this, though.",
          "createdAt": "2022-02-12T17:01:01Z",
          "updatedAt": "2022-02-12T17:01:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs840gQ05",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:02:17Z",
          "updatedAt": "2022-02-12T17:02:17Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "OK, I will change to those names",
              "createdAt": "2022-02-12T17:02:17Z",
              "updatedAt": "2022-02-12T17:02:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gQ2w",
          "commit": {
            "abbreviatedOid": "d751b5b"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:03:59Z",
          "updatedAt": "2022-02-12T17:04:00Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "OK, I will drop this comment",
              "createdAt": "2022-02-12T17:04:00Z",
              "updatedAt": "2022-02-12T17:04:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gRkZ",
          "commit": {
            "abbreviatedOid": "87a0433"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-12T17:38:11Z",
          "updatedAt": "2022-02-12T17:38:12Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n  def sign(index, sk_i, group_public_key, nonce_i, comm_i, msg, commitment_list, participant_list):\r\n```",
              "createdAt": "2022-02-12T17:38:12Z",
              "updatedAt": "2022-02-12T17:38:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840gRku",
          "commit": {
            "abbreviatedOid": "87a0433"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-12T17:38:28Z",
          "updatedAt": "2022-02-12T17:38:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOEpUZs84yvwEI",
      "title": "removed PK input from schnorr_signature_generate, renamed r var to k",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/81",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "this change matches the POC code and the rename from `r` to `k` is an improvement code-wise IMO",
      "createdAt": "2022-02-13T23:51:26Z",
      "updatedAt": "2022-02-15T00:08:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c7308703401a26953881f08af2a855618f625ebe",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "code-schnorr",
      "headRefOid": "73e1645ffc1d0f0433cb763413c087b1170b9537",
      "closedAt": "2022-02-14T22:58:30Z",
      "mergedAt": "2022-02-14T22:58:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5c4bb72a084656c153a2b37b12051c8339af8fb5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840g_vC",
          "commit": {
            "abbreviatedOid": "308dc0f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-02-14T00:03:02Z",
          "updatedAt": "2022-02-14T00:03:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "`s` is not defined",
              "createdAt": "2022-02-14T00:03:02Z",
              "updatedAt": "2022-02-14T00:03:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840g_yd",
          "commit": {
            "abbreviatedOid": "308dc0f"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-14T00:04:10Z",
          "updatedAt": "2022-02-14T00:04:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "right, was a copy&paste from POC code, fixing it right now",
              "createdAt": "2022-02-14T00:04:10Z",
              "updatedAt": "2022-02-14T00:04:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840ljF7",
          "commit": {
            "abbreviatedOid": "73e1645"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-14T22:25:08Z",
          "updatedAt": "2022-02-14T22:25:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOEpUZs84y0tBm",
      "title": "remove trailing space in context string in H1, H2 and H3 (test vectors update)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/83",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "an attempt to fix #82",
      "createdAt": "2022-02-15T00:42:07Z",
      "updatedAt": "2022-02-15T00:50:11Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "5c4bb72a084656c153a2b37b12051c8339af8fb5",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "fix-h-ctx-str",
      "headRefOid": "5085f5c14ce5b46f13a81f71447e744cd195ac94",
      "closedAt": "2022-02-15T00:42:54Z",
      "mergedAt": "2022-02-15T00:42:54Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e4996bcfced76748206f4bdfd1032832f0f227cc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840l4Hz",
          "commit": {
            "abbreviatedOid": "5085f5c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-15T00:42:49Z",
          "updatedAt": "2022-02-15T00:42:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOEpUZs84y5CSi",
      "title": "minor fixes in secret_share_split pseudo code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/84",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-16T00:12:08Z",
      "updatedAt": "2022-02-16T18:57:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e4996bcfced76748206f4bdfd1032832f0f227cc",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "fix-sss",
      "headRefOid": "7a6a70a911a192ab0d20859ffc255f48a9f418c6",
      "closedAt": "2022-02-16T18:50:45Z",
      "mergedAt": "2022-02-16T18:50:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "83184ef84efd7c277ec7d63a9e40640abec14546"
      },
      "comments": [
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "done, waiting for next review",
          "createdAt": "2022-02-16T18:29:38Z",
          "updatedAt": "2022-02-16T18:29:38Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840vLP6",
          "commit": {
            "abbreviatedOid": "7a7b996"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "One minor nit, otherwise thanks!",
          "createdAt": "2022-02-16T16:11:29Z",
          "updatedAt": "2022-02-16T16:12:04Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  def secret_share_shard(s, n, t):\r\n```\r\n\r\nCan we also update the Sage code to match? The \"shard\" terminology comes from the [VDAF spec](https://cjpatton.github.io/vdaf/draft-patton-cfrg-vdaf.html#name-sharding), which I quite like.",
              "createdAt": "2022-02-16T16:11:29Z",
              "updatedAt": "2022-02-16T16:12:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840v0Wq",
          "commit": {
            "abbreviatedOid": "7a7b996"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-16T18:19:36Z",
          "updatedAt": "2022-02-16T18:19:36Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Sure, I will also change one more minor thing in `trusted_dealer_keygen`",
              "createdAt": "2022-02-16T18:19:36Z",
              "updatedAt": "2022-02-16T18:19:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840v1j1",
          "commit": {
            "abbreviatedOid": "7a7b996"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-16T18:24:05Z",
          "updatedAt": "2022-02-16T18:24:05Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "and thanks for linking `VDAFs`, in my list of TODO to read :)",
              "createdAt": "2022-02-16T18:24:05Z",
              "updatedAt": "2022-02-16T18:24:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840v8vs",
          "commit": {
            "abbreviatedOid": "7a6a70a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-16T18:50:40Z",
          "updatedAt": "2022-02-16T18:50:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 85,
      "id": "PR_kwDOEpUZs84y9Jmc",
      "title": "Specify signature encoding based on group Element and Scalar serialization",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/85",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Let's address the cofactor verification check in #12.\r\n\r\nCloses #72.\r\nCloses #70.",
      "createdAt": "2022-02-16T22:32:48Z",
      "updatedAt": "2022-02-24T21:29:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "83184ef84efd7c277ec7d63a9e40640abec14546",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/signature-encoding",
      "headRefOid": "25f4a086ff6ae5c4a0b5ab069d0b26068ee3d696",
      "closedAt": "2022-02-19T03:11:33Z",
      "mergedAt": "2022-02-19T03:11:33Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6093adc7d9e3ea507ffb124db532261db2cd484e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs840680S",
          "commit": {
            "abbreviatedOid": "962edfe"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-19T01:13:12Z",
          "updatedAt": "2022-02-19T01:13:12Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Should we say all commitments in general? ",
              "createdAt": "2022-02-19T01:13:12Z",
              "updatedAt": "2022-02-19T01:13:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs840681z",
          "commit": {
            "abbreviatedOid": "962edfe"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-19T01:13:45Z",
          "updatedAt": "2022-02-19T01:13:45Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\nUpon receipt from each Signer, the Coordinator MUST validate the input\r\n```",
              "createdAt": "2022-02-19T01:13:45Z",
              "updatedAt": "2022-02-19T01:13:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84068_v",
          "commit": {
            "abbreviatedOid": "962edfe"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-19T01:17:47Z",
          "updatedAt": "2022-02-19T01:17:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs8407AFa",
          "commit": {
            "abbreviatedOid": "25f4a08"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-19T03:10:58Z",
          "updatedAt": "2022-02-19T03:10:59Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I think that's implied by validating the list.",
              "createdAt": "2022-02-19T03:10:59Z",
              "updatedAt": "2022-02-19T03:10:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8407AF6",
          "commit": {
            "abbreviatedOid": "25f4a08"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-19T03:11:28Z",
          "updatedAt": "2022-02-19T03:11:28Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Thanks!",
              "createdAt": "2022-02-19T03:11:28Z",
              "updatedAt": "2022-02-19T03:11:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDOEpUZs84zFNTl",
      "title": "remove non-pre-hash message in pseudo-code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/86",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-18T13:02:31Z",
      "updatedAt": "2022-02-23T13:32:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "08087b582ffc94bb0b5fb8ff486f13c9204dbd34",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "poc-msg-hash",
      "headRefOid": "0d2c75821e732e3e3a9acfd671cc96d4e392f8d0",
      "closedAt": "2022-02-23T13:10:41Z",
      "mergedAt": "2022-02-23T13:10:41Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4dde4866b9ec2226726ab15e5be42a9f73a926a5"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good catch, but I think we want to switch this around. In particular, I think the code is correct, but the pseudocode is wrong. @dconnolly, please correct me if I'm mistaken, but I thought we concluded that the \"non-pre-hash\" variant of EdDSA is most common.",
          "createdAt": "2022-02-22T16:34:40Z",
          "updatedAt": "2022-02-22T16:34:40Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, I can tell you that there is a benefit to having the pre-hash variant of the pseudo-code, in terms of not allocating memory, but maybe there is a way around it. Either way, I'm waiting for your decision, since I need it to match the vectors \ud83d\ude09, thanks for the review",
          "createdAt": "2022-02-22T18:16:40Z",
          "updatedAt": "2022-02-22T18:16:40Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Well, I can tell you that there is a benefit to having the pre-hash variant of the pseudo-code, in terms of not allocating memory, but maybe there is a way around it\r\n\r\nI don't think this is true. In fact, I would claim the opposite is true! The application _has_ to allocate memory for the message in either case, and since the hash incrementally folds the message into its internal state, there's no benefit to be gained from pre-hashing the message before computing the challenge. In contrast, pre-hashing means you now need to allocate memory for the message digest somewhere. ",
          "createdAt": "2022-02-22T18:19:09Z",
          "updatedAt": "2022-02-22T18:19:09Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "right, I meant to say _dynamically_ allocate in a line-by-line replication of the pseudo-code (In hindsight I shouldn't even mention that). Actually, I was already thinking of using the hash fold variant if you decide to use the \"non-pre-hash\" variant.\r\n\r\nI'm willing to work on the changes to this PR.",
          "createdAt": "2022-02-22T18:30:07Z",
          "updatedAt": "2022-02-22T18:30:07Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> right, I meant to say dynamically allocate in a line-by-line replication of the pseudo-code (In hindsight I shouldn't even mention that)\r\n\r\nWell, I would hope that implementations that are memory pressured would do the sensible thing here =) Let's use this PR to make the pseudocode changes per the comment above.",
          "createdAt": "2022-02-22T19:28:35Z",
          "updatedAt": "2022-02-22T19:28:35Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @chris-wood , I made the changes, rebased and squashed, waiting for your review",
          "createdAt": "2022-02-23T13:04:30Z",
          "updatedAt": "2022-02-23T13:04:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841HHXi",
          "commit": {
            "abbreviatedOid": "0d2c758"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-23T13:10:33Z",
          "updatedAt": "2022-02-23T13:10:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 87,
      "id": "PR_kwDOEpUZs84zTCod",
      "title": "Fix verify_signature_share",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/87",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-22T16:48:59Z",
      "updatedAt": "2022-02-22T17:03:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6093adc7d9e3ea507ffb124db532261db2cd484e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/fix-verify-sig-share",
      "headRefOid": "a8cddf0811de3d084095613e79adf43d537f935e",
      "closedAt": "2022-02-22T17:03:51Z",
      "mergedAt": "2022-02-22T17:03:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "08087b582ffc94bb0b5fb8ff486f13c9204dbd34"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841DYxo",
          "commit": {
            "abbreviatedOid": "a8cddf0"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-22T16:50:30Z",
          "updatedAt": "2022-02-22T16:50:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOEpUZs84zTF1g",
      "title": "Drop I2OSP",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/88",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-22T17:03:59Z",
      "updatedAt": "2022-02-28T19:23:21Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "08087b582ffc94bb0b5fb8ff486f13c9204dbd34",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/drop-I2OSP",
      "headRefOid": "d62e340a46b36d4090fa8d133db5787dbdfd3dda",
      "closedAt": "2022-02-28T19:23:21Z",
      "mergedAt": "2022-02-28T19:23:21Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "713001785bcdbe46c02369a071b1192ce55c4617"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly can we merge this?",
          "createdAt": "2022-02-25T20:37:12Z",
          "updatedAt": "2022-02-25T20:37:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841DeW8",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-22T17:07:08Z",
          "updatedAt": "2022-02-22T17:07:16Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Does this need to be defined further in the spec or link to such a description? ",
              "createdAt": "2022-02-22T17:07:09Z",
              "updatedAt": "2022-02-22T17:07:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841Def1",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-22T17:07:35Z",
          "updatedAt": "2022-02-22T17:07:35Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Is it not clearly defined already as-is? ",
              "createdAt": "2022-02-22T17:07:35Z",
              "updatedAt": "2022-02-22T17:07:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841Ei13",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-22T21:29:06Z",
          "updatedAt": "2022-02-22T21:29:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "In the POC code it is, in the spec pseudocode it's a bit fuzzy",
              "createdAt": "2022-02-22T21:29:07Z",
              "updatedAt": "2022-02-22T21:29:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841EjEH",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-22T21:30:01Z",
          "updatedAt": "2022-02-22T21:30:01Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Can you elaborate on how it's fuzzy, or offer a suggestion to clarify?",
              "createdAt": "2022-02-22T21:30:01Z",
              "updatedAt": "2022-02-22T21:30:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YBYm",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T19:10:30Z",
          "updatedAt": "2022-02-28T19:10:35Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n  big-endian byte string. For example, `encode_uint16(310) = [0x01, 0x36]`.\r\n```",
              "createdAt": "2022-02-28T19:10:30Z",
              "updatedAt": "2022-02-28T19:10:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YBeG",
          "commit": {
            "abbreviatedOid": "99b228d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T19:10:55Z",
          "updatedAt": "2022-02-28T19:10:55Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Resolved, thanks!",
              "createdAt": "2022-02-28T19:10:55Z",
              "updatedAt": "2022-02-28T19:10:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YBhn",
          "commit": {
            "abbreviatedOid": "d62e340"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2022-02-28T19:11:11Z",
          "updatedAt": "2022-02-28T19:11:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 89,
      "id": "PR_kwDOEpUZs84zTocc",
      "title": "Add note about applications needing to verify the message before signing",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/89",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We assume that messages to be signed are in fact valid for the higher-level application. This PR adds this as a note as a reminder to implementors. \r\n\r\nAddresses #47",
      "createdAt": "2022-02-22T20:10:43Z",
      "updatedAt": "2022-02-23T16:08:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "08087b582ffc94bb0b5fb8ff486f13c9204dbd34",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "verify-msg",
      "headRefOid": "a80ddbc70e6ad5566cd817d28d44f913a3d76108",
      "closedAt": "2022-02-23T16:08:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841EQyF",
          "commit": {
            "abbreviatedOid": "76d9eb3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-02-22T20:12:18Z",
          "updatedAt": "2022-02-22T20:12:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"Valid\" isn't really well-defined, so I would either remove it entirely, or put it in the security considerations.",
              "createdAt": "2022-02-22T20:12:18Z",
              "updatedAt": "2022-02-22T20:12:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841ESyQ",
          "commit": {
            "abbreviatedOid": "a80ddbc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-02-22T20:20:58Z",
          "updatedAt": "2022-02-22T20:21:00Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Sorry, but I don't think my prior comment was clear. I don't think this is an appropriate MUST for the main protocol. It's not enforceable. This text belongs in the security considerations section.",
              "createdAt": "2022-02-22T20:20:58Z",
              "updatedAt": "2022-02-22T20:21:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841EYft",
          "commit": {
            "abbreviatedOid": "a80ddbc"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-22T20:44:57Z",
          "updatedAt": "2022-02-22T20:44:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOEpUZs84zUQDw",
      "title": "Message validation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/90",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Alternative to #89.",
      "createdAt": "2022-02-23T00:44:02Z",
      "updatedAt": "2022-02-23T23:24:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "08087b582ffc94bb0b5fb8ff486f13c9204dbd34",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/input-validation",
      "headRefOid": "d8b2eb367a33c3b31d0b2c242386561e0e74d650",
      "closedAt": "2022-02-23T16:08:18Z",
      "mergedAt": "2022-02-23T16:08:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2a2861e3ca1112cbd58496799c6e082837c846fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841FT6i",
          "commit": {
            "abbreviatedOid": "d8b2eb3"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great! Thanks @chris-wood ",
          "createdAt": "2022-02-23T03:23:41Z",
          "updatedAt": "2022-02-23T03:23:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs841KAm_",
          "commit": {
            "abbreviatedOid": "d8b2eb3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-23T23:24:03Z",
          "updatedAt": "2022-02-23T23:24:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 91,
      "id": "PR_kwDOEpUZs84zWF6U",
      "title": "minor fixes in pseudo-code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/91",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-23T13:43:01Z",
      "updatedAt": "2022-02-23T16:09:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4dde4866b9ec2226726ab15e5be42a9f73a926a5",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "fix-verify-share",
      "headRefOid": "f64910818addbb98211fe35fbe46ac0c7c9ea1a9",
      "closedAt": "2022-02-23T16:09:04Z",
      "mergedAt": "2022-02-23T16:09:04Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "02107d776ac2be1ebcf369151428f3f4c4cd8997"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841IGoO",
          "commit": {
            "abbreviatedOid": "f649108"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-23T16:08:59Z",
          "updatedAt": "2022-02-23T16:08:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 92,
      "id": "PR_kwDOEpUZs84zX-4x",
      "title": "Describe commitment_share in the SignatureShare struct",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/92",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-23T23:26:18Z",
      "updatedAt": "2022-02-23T23:28:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "02107d776ac2be1ebcf369151428f3f4c4cd8997",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "5dc84beda47a4350c0dbcbf07cfe3506b48642a0",
      "closedAt": "2022-02-23T23:26:58Z",
      "mergedAt": "2022-02-23T23:26:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0a9947deafb9de2aac85db747c7e4e63f46f57d3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841KBCh",
          "commit": {
            "abbreviatedOid": "5dc84be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-23T23:26:53Z",
          "updatedAt": "2022-02-23T23:26:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOEpUZs84zX_Xn",
      "title": "Missing underscore",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/93",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-23T23:29:47Z",
      "updatedAt": "2022-02-23T23:32:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "0a9947deafb9de2aac85db747c7e4e63f46f57d3",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "872834ae49f9b7ba60ff6a6fc6399ab08334199d",
      "closedAt": "2022-02-23T23:32:10Z",
      "mergedAt": "2022-02-23T23:32:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e66d26c670e245c7117529d842884c1c856d796e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 94,
      "id": "PR_kwDOEpUZs84zfFKr",
      "title": "Breakout commitment share generation to an aggregate subroutine",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/94",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "And remove R_share as an output from round two. This also decomposes `sign` and `verify_signature_share` into smaller, reusable subroutines. ",
      "createdAt": "2022-02-25T20:32:29Z",
      "updatedAt": "2022-03-02T15:05:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "320cb6dbb5ffd79bc13413097dffeb5395f47866",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/breakout-comm-share",
      "headRefOid": "cfc2614bab933ae561a9460020219892be4f1ffc",
      "closedAt": "2022-03-02T15:05:20Z",
      "mergedAt": "2022-03-02T15:05:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6d98736ab4afb7fdcd10a914a65d5f8118f66010"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@dconnolly any followup changes you'd like to see here?",
          "createdAt": "2022-02-28T21:34:32Z",
          "updatedAt": "2022-02-28T21:34:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841X3-U",
          "commit": {
            "abbreviatedOid": "9205e4f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T18:31:11Z",
          "updatedAt": "2022-02-28T18:31:12Z",
          "comments": [
            {
              "originalPosition": 167,
              "body": "```suggestion\r\n    issued in Round 1 by each signer, where each element in the list indicates the signer index j and their\r\n```",
              "createdAt": "2022-02-28T18:31:11Z",
              "updatedAt": "2022-02-28T18:31:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841X4Bd",
          "commit": {
            "abbreviatedOid": "9205e4f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T18:31:23Z",
          "updatedAt": "2022-02-28T18:31:24Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "```suggestion\r\n    list of commitments issued in Round 1 by each signer, where each element in the list indicates the signer index j and their\r\n```",
              "createdAt": "2022-02-28T18:31:23Z",
              "updatedAt": "2022-02-28T18:31:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841X_kW",
          "commit": {
            "abbreviatedOid": "9205e4f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, thanks for this change. ",
          "createdAt": "2022-02-28T19:02:21Z",
          "updatedAt": "2022-02-28T20:09:31Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "Lagrange coefficient",
              "createdAt": "2022-02-28T19:02:21Z",
              "updatedAt": "2022-02-28T20:09:31Z"
            },
            {
              "originalPosition": 187,
              "body": "I don't think `comm_i` needs to be an input anymore?",
              "createdAt": "2022-02-28T19:05:32Z",
              "updatedAt": "2022-02-28T20:09:31Z"
            },
            {
              "originalPosition": 156,
              "body": "to check that the signature share is valid",
              "createdAt": "2022-02-28T19:46:47Z",
              "updatedAt": "2022-02-28T20:09:31Z"
            },
            {
              "originalPosition": 161,
              "body": "We should probably have a \"the index MUST NOT equal `0`\"?",
              "createdAt": "2022-02-28T19:47:36Z",
              "updatedAt": "2022-02-28T20:09:31Z"
            },
            {
              "originalPosition": 206,
              "body": "Lagrange coefficient",
              "createdAt": "2022-02-28T19:51:29Z",
              "updatedAt": "2022-02-28T20:09:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841Yf8p",
          "commit": {
            "abbreviatedOid": "9ddb8a9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:31:25Z",
          "updatedAt": "2022-02-28T21:31:25Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "```suggestion\r\n    # Compute Lagrange coefficient\r\n```",
              "createdAt": "2022-02-28T21:31:25Z",
              "updatedAt": "2022-02-28T21:31:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YgEL",
          "commit": {
            "abbreviatedOid": "9ddb8a9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:31:58Z",
          "updatedAt": "2022-02-28T21:31:59Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "Not new text, so leaving this as-is. Let's file a separate issue if we want to change it?",
              "createdAt": "2022-02-28T21:31:59Z",
              "updatedAt": "2022-02-28T21:31:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YgZW",
          "commit": {
            "abbreviatedOid": "9ddb8a9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:33:38Z",
          "updatedAt": "2022-02-28T21:33:39Z",
          "comments": [
            {
              "originalPosition": 187,
              "body": "It's currently used directly, rather than being extracted from the commitment list, so I'm leaving this as-is for now. In a followup change, we should go through and implement helpers for mapping the commitment list to individual commitment values and participant lists.",
              "createdAt": "2022-02-28T21:33:38Z",
              "updatedAt": "2022-02-28T21:33:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841Yga3",
          "commit": {
            "abbreviatedOid": "9ddb8a9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:33:44Z",
          "updatedAt": "2022-02-28T21:33:45Z",
          "comments": [
            {
              "originalPosition": 206,
              "body": "```suggestion\r\n    # Compute Lagrange coefficient\r\n```",
              "createdAt": "2022-02-28T21:33:45Z",
              "updatedAt": "2022-02-28T21:33:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841Ygf4",
          "commit": {
            "abbreviatedOid": "8ec6d74"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:34:05Z",
          "updatedAt": "2022-02-28T21:34:05Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "```suggestion\r\nparameters, to check that the signature share is valid using the following procedure.\r\n```",
              "createdAt": "2022-02-28T21:34:05Z",
              "updatedAt": "2022-02-28T21:34:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YghT",
          "commit": {
            "abbreviatedOid": "8ec6d74"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T21:34:12Z",
          "updatedAt": "2022-02-28T21:34:12Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "Applied via suggestion.",
              "createdAt": "2022-02-28T21:34:12Z",
              "updatedAt": "2022-02-28T21:34:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841eSg0",
          "commit": {
            "abbreviatedOid": "9205e4f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-02T06:07:18Z",
          "updatedAt": "2022-03-02T06:07:18Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-03-02T06:07:18Z",
              "updatedAt": "2022-03-02T06:07:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841eS8j",
          "commit": {
            "abbreviatedOid": "9205e4f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-02T06:10:41Z",
          "updatedAt": "2022-03-02T06:10:41Z",
          "comments": [
            {
              "originalPosition": 232,
              "body": "```suggestion\r\n  - group_commitment, the group commitment returned by compute_group_commitment\r\n```",
              "createdAt": "2022-03-02T06:10:41Z",
              "updatedAt": "2022-03-02T06:10:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841eVs3",
          "commit": {
            "abbreviatedOid": "af73848"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-02T06:30:04Z",
          "updatedAt": "2022-03-02T06:30:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 95,
      "id": "PR_kwDOEpUZs84zqXmm",
      "title": "Bump actions/setup-python from 2 to 3.0.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/95",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 2 to 3.0.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Update default runtime to node16 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/340\">actions/setup-python#340</a>)</li>\n<li>Update <code>package-lock.json</code> file version to 2, <code>@types/node</code> to 16.11.25 and <code>typescript</code> to 4.2.3 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/341\">actions/setup-python#341</a>)</li>\n<li>Remove legacy <code>pypy2</code> and <code>pypy3</code> keywords (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/342\">actions/setup-python#342</a>)</li>\n</ul>\n<h3>Breaking Changes</h3>\n<p>With the update to Node 16, all scripts will now be run with Node 16 rather than Node 12.</p>\n<p>This new major release removes support of legacy <code>pypy2</code> and <code>pypy3</code> keywords. Please use more specific and flexible syntax to specify a PyPy version:</p>\n<pre lang=\"yaml\"><code>jobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version:\n        - 'pypy-2.7' # the latest available version of PyPy that supports Python 2.7\n        - 'pypy-3.8' # the latest available version of PyPy that supports Python 3.8\n        - 'pypy-3.8-v7.3.8' # Python 3.8 and PyPy 7.3.8\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n</code></pre>\n<p>See more usage examples in the <a href=\"https://github.com/actions/setup-python#specifying-a-pypy-version\">documentation</a></p>\n<h2>Update primary and restore keys for pip</h2>\n<p>In scope of this release we <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/303\">include a version of python in restore and primary cache keys for pip</a>. Besides, we add temporary fix for Windows caching <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/332\">issue</a>, that the <code>pip cache dir</code> command returns non zero exit code or writes to stderr. Moreover we updated <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/327\">node-fetch dependency</a>.</p>\n<h2>Update\u00a0actions/cache\u00a0version to 1.0.8</h2>\n<p>We have updated\u00a0<a href=\"https://github.com/actions/toolkit/blob/main/packages/cache/RELEASES.md#108\">actions/cache</a>\u00a0dependency version to 1.0.8 to support 10GB cache upload</p>\n<h2>Support caching dependencies</h2>\n<p>This release introduces dependency caching support (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/266\">actions/setup-python#266</a>)</p>\n<h2>Caching dependencies.</h2>\n<p>The action has a built-in functionality for caching and restoring pip/pipenv dependencies. The <code>cache</code> input is optional, and caching is turned off by default.</p>\n<p>Besides, this release introduces dependency caching support for mono repos and repositories with complex structure.</p>\n<p>By default, the action searches for the dependency file (requirements.txt for pip or Pipfile.lock for pipenv) in the whole repository. Use the <code>cache-dependency-path</code> input for cases when you want to override current behaviour and use different file for hash generation (for example requirements-dev.txt). This input supports wildcards or a list of file names for caching multiple dependencies.</p>\n<h3>Caching pip dependencies:</h3>\n<pre><code>steps:\n- uses: actions/checkout@v2\n- uses: actions/setup-python@v2\n  with:\n    python-version: '3.9'\n&lt;/tr&gt;&lt;/table&gt; \n</code></pre>\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/0ebf233433c08fb9061af664d501c3f3ff0e9e20\"><code>0ebf233</code></a> Remove legacy PyPy input (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/342\">#342</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/665cd78205d9937a51af8cdb754840e2bc95c2d5\"><code>665cd78</code></a> Update lockfileversion (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/341\">#341</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/93cb78f17ba30b733a6c17d0f21183bdc0140887\"><code>93cb78f</code></a> Update to node16 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/340\">#340</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/setup-python/compare/v2...v3.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=2&new-version=3.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-02-28T12:34:09Z",
      "updatedAt": "2022-02-28T19:27:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "edaeb3f0584dbc1159c1a64ed684273b500c1b28",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-3.0.0",
      "headRefOid": "797a5cd4e8549757b169f0a34a49ccbf0bf11c2f",
      "closedAt": "2022-02-28T19:27:21Z",
      "mergedAt": "2022-02-28T19:27:21Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "dc6372ee542fe530be3cb0d89f92ac9848b260d5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841YFBn",
          "commit": {
            "abbreviatedOid": "797a5cd"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-28T19:27:13Z",
          "updatedAt": "2022-02-28T19:27:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 96,
      "id": "PR_kwDOEpUZs84zrv6i",
      "title": "Add `frost-ristretto255` to the existing implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/96",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-28T19:20:12Z",
      "updatedAt": "2022-04-18T17:01:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "edaeb3f0584dbc1159c1a64ed684273b500c1b28",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "f294b19127840ae8ba7f330dc41274c79bb45cc1",
      "closedAt": "2022-02-28T19:21:40Z",
      "mergedAt": "2022-02-28T19:21:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0f86b1918dc6216c3995178fedb20784c0fcd545"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 97,
      "id": "PR_kwDOEpUZs84zrwPc",
      "title": "Delete secrets when done",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/97",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #44.",
      "createdAt": "2022-02-28T19:21:50Z",
      "updatedAt": "2022-02-28T19:41:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "0f86b1918dc6216c3995178fedb20784c0fcd545",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/delete-secret-things",
      "headRefOid": "39f5807b3f397657916e6add98399e7f6e0309b3",
      "closedAt": "2022-02-28T19:41:36Z",
      "mergedAt": "2022-02-28T19:41:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a8f9c346c7f9b387374afd7b6b96959a2d982ba5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841YEKz",
          "commit": {
            "abbreviatedOid": "39f5807"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-28T19:23:15Z",
          "updatedAt": "2022-02-28T19:23:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs841YELi",
          "commit": {
            "abbreviatedOid": "39f5807"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-28T19:23:19Z",
          "updatedAt": "2022-02-28T19:23:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs841YEt9",
          "commit": {
            "abbreviatedOid": "39f5807"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T19:25:50Z",
          "updatedAt": "2022-02-28T19:25:50Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nthe nonce and SHOULD delete the corresponding commitment after this round completes.\r\n```",
              "createdAt": "2022-02-28T19:25:50Z",
              "updatedAt": "2022-02-28T19:25:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YFke",
          "commit": {
            "abbreviatedOid": "39f5807"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T19:29:41Z",
          "updatedAt": "2022-02-28T19:29:41Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Clarify to ensure that nonces are used only once. ",
              "createdAt": "2022-02-28T19:29:41Z",
              "updatedAt": "2022-02-28T19:29:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841YIIp",
          "commit": {
            "abbreviatedOid": "39f5807"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-28T19:41:32Z",
          "updatedAt": "2022-02-28T19:41:33Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Done in #98.",
              "createdAt": "2022-02-28T19:41:32Z",
              "updatedAt": "2022-02-28T19:41:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 98,
      "id": "PR_kwDOEpUZs84zrymh",
      "title": "Require that nonces MUST NOT be used more than once",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/98",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-28T19:36:39Z",
      "updatedAt": "2022-02-28T19:41:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "dc6372ee542fe530be3cb0d89f92ac9848b260d5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-3",
      "headRefOid": "8aaf199ca6383979714904a09ad21c9ba8e582bd",
      "closedAt": "2022-02-28T19:41:46Z",
      "mergedAt": "2022-02-28T19:41:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "320cb6dbb5ffd79bc13413097dffeb5395f47866"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841YH0g",
          "commit": {
            "abbreviatedOid": "8aaf199"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good!",
          "createdAt": "2022-02-28T19:39:59Z",
          "updatedAt": "2022-02-28T19:39:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDOEpUZs84z02u7",
      "title": "Bump actions/checkout from 2 to 3",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/100",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/checkout](https://github.com/actions/checkout) from 2 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<ul>\n<li>Update default runtime to node16</li>\n</ul>\n<h2>v2.4.0</h2>\n<ul>\n<li>Convert SSH URLs like <code>org-&lt;ORG_ID&gt;@github.com:</code> to <code>https://github.com/</code> - <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/621\">pr</a></li>\n</ul>\n<h2>v2.3.5</h2>\n<p>Update dependencies</p>\n<h2>v2.3.4</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/379\">Add missing <code>await</code>s</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/360\">Swap to Environment Files</a></li>\n</ul>\n<h2>v2.3.3</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/345\">Remove Unneeded commit information from build logs</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/326\">Add Licensed to verify third party dependencies</a></li>\n</ul>\n<h2>v2.3.2</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/320\">Add Third Party License Information to Dist Files</a></p>\n<h2>v2.3.1</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></p>\n<h2>v2.3.0</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></p>\n<h2>v2.2.0</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></p>\n<h2>v2.1.1</h2>\n<p>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</p>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v2.3.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></li>\n</ul>\n<h2>v2.3.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n<h2>v2.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/108\">Do not pass cred on command line</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/107\">Add input persist-credentials</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/104\">Fallback to REST API to download repo</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/a12a3943b4bdde767164f792f33f40b04645d846\"><code>a12a394</code></a> update readme for v3 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/708\">#708</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8f9e05e482293f862823fcca12d9eddfb3723131\"><code>8f9e05e</code></a> Update to node 16 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/689\">#689</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/230611dbd0eb52da1e1f4f7bc8bb0c3a339fc8b7\"><code>230611d</code></a> Change secret name for PAT to not start with GITHUB_ (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/623\">#623</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v2...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-03-02T12:33:58Z",
      "updatedAt": "2022-03-02T19:01:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "320cb6dbb5ffd79bc13413097dffeb5395f47866",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/checkout-3",
      "headRefOid": "e509c8a9b9fac07444f204622e4de91a1780fdd6",
      "closedAt": "2022-03-02T19:01:27Z",
      "mergedAt": "2022-03-02T19:01:27Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "42e400b70f340dc527a9820f3e6c0ad321befd6c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841htOa",
          "commit": {
            "abbreviatedOid": "e509c8a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-02T19:01:22Z",
          "updatedAt": "2022-03-02T19:01:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 101,
      "id": "PR_kwDOEpUZs84z3QoO",
      "title": "minor fix in verify_signature_share pseudo code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/101",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-03T01:22:49Z",
      "updatedAt": "2022-03-03T02:27:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "42e400b70f340dc527a9820f3e6c0ad321befd6c",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "minor-fix",
      "headRefOid": "aed60f95e1b8b59eda33c53a58c0aa9dc5f13fd4",
      "closedAt": "2022-03-03T01:58:45Z",
      "mergedAt": "2022-03-03T01:58:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e3bf48984f01a6330e23f843c3a6a9e8500854bb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841jAek",
          "commit": {
            "abbreviatedOid": "aed60f9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-03T01:58:41Z",
          "updatedAt": "2022-03-03T01:58:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 102,
      "id": "PR_kwDOEpUZs84z3dLw",
      "title": "add a c implementation to readme",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/102",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hello, for your consideration (relevant files):\r\n\r\nhttps://github.com/aldenml/ecc/blob/master/src/frost.h\r\nhttps://github.com/aldenml/ecc/blob/master/src/frost.c\r\nhttps://github.com/aldenml/ecc/blob/master/test/test_frost.c",
      "createdAt": "2022-03-03T03:27:56Z",
      "updatedAt": "2022-03-03T19:50:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e3bf48984f01a6330e23f843c3a6a9e8500854bb",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "add-c-impl",
      "headRefOid": "d7b732c75383b2c01bbe2a7eed7be95872d554b5",
      "closedAt": "2022-03-03T19:49:25Z",
      "mergedAt": "2022-03-03T19:49:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "def80a0a85c12ff95fb88f38d84f7f616a9a3ecf"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Excellent work!",
          "createdAt": "2022-03-03T19:49:21Z",
          "updatedAt": "2022-03-03T19:49:21Z"
        },
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thanks for your feedback!",
          "createdAt": "2022-03-03T19:50:40Z",
          "updatedAt": "2022-03-03T19:50:40Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 103,
      "id": "PR_kwDOEpUZs84z5yHW",
      "title": "Add additional check for t",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/103",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We additionally require that t > 1",
      "createdAt": "2022-03-03T16:36:05Z",
      "updatedAt": "2022-03-03T16:38:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e3bf48984f01a6330e23f843c3a6a9e8500854bb",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "verify-t",
      "headRefOid": "0d27a1b6ff424ebaa593f2363c3e9091ea3bd2b0",
      "closedAt": "2022-03-03T16:38:00Z",
      "mergedAt": "2022-03-03T16:38:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "183f36429a674b42bc96f6474b4d616d11e8c454"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841mIy2",
          "commit": {
            "abbreviatedOid": "0d27a1b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-03T16:37:55Z",
          "updatedAt": "2022-03-03T16:37:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 104,
      "id": "PR_kwDOEpUZs84z54RN",
      "title": "Make trusted_dealer_keygen deterministic and clarify description",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/104",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-03T17:01:40Z",
      "updatedAt": "2022-03-03T19:58:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "183f36429a674b42bc96f6474b4d616d11e8c454",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "deterministic-keygen-and-language",
      "headRefOid": "188e4e37cf74e958ebbfde84086c513736c6d123",
      "closedAt": "2022-03-03T19:58:01Z",
      "mergedAt": "2022-03-03T19:58:01Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "8a804a0ce2fffcbda2b756dfe87739a5bbf31489"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841nAIf",
          "commit": {
            "abbreviatedOid": "3be4f7a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:23:59Z",
          "updatedAt": "2022-03-03T19:23:59Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Assigning it to this variable does spit out the group secret as a test vector correctly",
              "createdAt": "2022-03-03T19:23:59Z",
              "updatedAt": "2022-03-03T19:24:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841nAKA",
          "commit": {
            "abbreviatedOid": "3be4f7a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-03-03T19:24:04Z",
          "updatedAt": "2022-03-03T19:24:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs841nAwB",
          "commit": {
            "abbreviatedOid": "3be4f7a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM pending suggestions -- thanks!",
          "createdAt": "2022-03-03T19:26:27Z",
          "updatedAt": "2022-03-03T19:28:19Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n    group_secret_key = G.random_scalar()\r\n```",
              "createdAt": "2022-03-03T19:26:28Z",
              "updatedAt": "2022-03-03T19:28:19Z"
            },
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n  - s, a group secret that MUST be derived from at least `Ns` bytes of entropy\r\n```",
              "createdAt": "2022-03-03T19:28:10Z",
              "updatedAt": "2022-03-03T19:28:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841nF3a",
          "commit": {
            "abbreviatedOid": "f96295e"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:47:24Z",
          "updatedAt": "2022-03-03T19:47:24Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Where is 'Ns' defined? ",
              "createdAt": "2022-03-03T19:47:24Z",
              "updatedAt": "2022-03-03T19:47:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841nGSX",
          "commit": {
            "abbreviatedOid": "f96295e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-03T19:49:05Z",
          "updatedAt": "2022-03-03T19:49:05Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "It's the length of a serialized scalar, defined as part of the group.",
              "createdAt": "2022-03-03T19:49:05Z",
              "updatedAt": "2022-03-03T19:49:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 105,
      "id": "PR_kwDOEpUZs84z6gWi",
      "title": "Raise an error if participant index is ever 0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/105",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Because identifiers are provided externally, signers should check that they are non-zero. This is more to prevent doing things like dividing by zero or outputting an invalid signature than an actual security break. ",
      "createdAt": "2022-03-03T20:12:14Z",
      "updatedAt": "2022-03-03T20:40:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8a804a0ce2fffcbda2b756dfe87739a5bbf31489",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "check-invalid-indices",
      "headRefOid": "e3be54d0cb4bfe9a7d038ffa813a5e6c12c268fb",
      "closedAt": "2022-03-03T20:39:39Z",
      "mergedAt": "2022-03-03T20:39:39Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "4ccc0371f15a930a7b03837da9c016f2af9879df"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841nMkm",
          "commit": {
            "abbreviatedOid": "b25b65c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-03T20:14:54Z",
          "updatedAt": "2022-03-03T20:15:08Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n    for x_j in L:\r\n      if x_j <= 0:\r\n        raise \"invalid parameters\"\r\n```",
              "createdAt": "2022-03-03T20:14:54Z",
              "updatedAt": "2022-03-03T20:15:08Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n`i` MUST never equal `0`; recall that `f(0) = s`, where `f` is the polynomial defined in a Shamir secret sharing operation.\r\n```",
              "createdAt": "2022-03-03T20:15:04Z",
              "updatedAt": "2022-03-03T20:15:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841nSKn",
          "commit": {
            "abbreviatedOid": "57ccc5e"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-03T20:39:21Z",
          "updatedAt": "2022-03-03T20:39:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 107,
      "id": "PR_kwDOEpUZs840A1oO",
      "title": "Add -03 change log",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/107",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T02:44:20Z",
      "updatedAt": "2022-03-07T13:23:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "210f4a44f273ab8da8811d79370f987ec81204d7",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/draft-03",
      "headRefOid": "f377a56655e88abc21151764d3a01a7222c09600",
      "closedAt": "2022-03-07T13:22:59Z",
      "mergedAt": "2022-03-07T13:22:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "47e27d07c67a6aed3b7a1dc5abf3eb5fac6ab044"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs841tw1x",
          "commit": {
            "abbreviatedOid": "f6d1762"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T02:49:55Z",
          "updatedAt": "2022-03-07T02:49:56Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "typo in `verifiation`",
              "createdAt": "2022-03-07T02:49:55Z",
              "updatedAt": "2022-03-07T02:49:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841txAz",
          "commit": {
            "abbreviatedOid": "f6d1762"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T02:51:56Z",
          "updatedAt": "2022-03-07T02:51:56Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n- Ensure that verificaftion of signature shares from the second round uses commitments from the first round (#94).\r\n```",
              "createdAt": "2022-03-07T02:51:56Z",
              "updatedAt": "2022-03-07T02:51:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs841tyyn",
          "commit": {
            "abbreviatedOid": "f377a56"
          },
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-07T03:11:48Z",
          "updatedAt": "2022-03-07T03:11:48Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "well, now there is another typo `verificaftion` :)",
              "createdAt": "2022-03-07T03:11:48Z",
              "updatedAt": "2022-03-07T03:11:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 109,
      "id": "PR_kwDOEpUZs840CsQI",
      "title": "fixed a few typos",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/109",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-07T13:30:24Z",
      "updatedAt": "2022-03-07T13:52:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "47e27d07c67a6aed3b7a1dc5abf3eb5fac6ab044",
      "headRepository": "aldenml/draft-irtf-cfrg-frost",
      "headRefName": "fix-typos",
      "headRefOid": "83839b9e0d6387984c602aa23260772fc80ff5f8",
      "closedAt": "2022-03-07T13:49:05Z",
      "mergedAt": "2022-03-07T13:49:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "50a57138ca7f805ef90398fd5143a7a7f5c09ff2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 113,
      "id": "PR_kwDOEpUZs840Id1S",
      "title": "Add Alden as a draft contributor",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/113",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Thanks for all of your help @aldenml ! ",
      "createdAt": "2022-03-08T21:44:24Z",
      "updatedAt": "2022-03-09T02:36:39Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "50a57138ca7f805ef90398fd5143a7a7f5c09ff2",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "update-contributors",
      "headRefOid": "55d1571982f9b332f54d985fe7dc689db4c9ee0e",
      "closedAt": "2022-03-08T21:46:00Z",
      "mergedAt": "2022-03-08T21:46:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1ffe85f5b151c63a7bdc3dbfb9495ffbc6aba3c2"
      },
      "comments": [
        {
          "author": "aldenml",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thank you!! \ud83c\udf89",
          "createdAt": "2022-03-09T02:36:39Z",
          "updatedAt": "2022-03-09T02:36:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8413Q5j",
          "commit": {
            "abbreviatedOid": "55d1571"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "\ud83d\udc4d ",
          "createdAt": "2022-03-08T22:52:59Z",
          "updatedAt": "2022-03-08T22:52:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDOEpUZs840aePX",
      "title": "Remove extraneous comma",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/116",
      "state": "MERGED",
      "author": "isislovecruft",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Commas are required when a subordinate clause comes before the main body of a sentence, but are not to be used when the subordinate clause occurs afterwards.",
      "createdAt": "2022-03-14T17:52:47Z",
      "updatedAt": "2022-03-14T20:53:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1ffe85f5b151c63a7bdc3dbfb9495ffbc6aba3c2",
      "headRepository": "isislovecruft/draft-irtf-cfrg-frost",
      "headRefName": "fix/comma-typo",
      "headRefOid": "c63a4efdd1319bd1740c68b25a5ed2bbc378da99",
      "closedAt": "2022-03-14T20:53:51Z",
      "mergedAt": "2022-03-14T20:53:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "21b92d115f0318e44c7c7389d1ad26570861246e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842MhuM",
          "commit": {
            "abbreviatedOid": "c63a4ef"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T18:49:22Z",
          "updatedAt": "2022-03-14T18:49:22Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Unrelated to this PR, but this sentence in general is even a bit broad - deriving nonces deterministically is insecure for FROST, but not necessarily for any multi-party signature scheme. ",
              "createdAt": "2022-03-14T18:49:22Z",
              "updatedAt": "2022-03-14T18:49:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842M3vh",
          "commit": {
            "abbreviatedOid": "c63a4ef"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-14T20:16:54Z",
          "updatedAt": "2022-03-14T20:16:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 118,
      "id": "PR_kwDOEpUZs840bVUY",
      "title": "Define cofactor checks for verification",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/118",
      "state": "MERGED",
      "author": "isislovecruft",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "* CLOSES #68 \r\n\r\nI also went over the matrice of malleability issues in https://eprint.iacr.org/2020/1244.pdf again to double check compatibility versus malleability issues.",
      "createdAt": "2022-03-14T22:23:10Z",
      "updatedAt": "2022-03-28T17:18:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "21b92d115f0318e44c7c7389d1ad26570861246e",
      "headRepository": "isislovecruft/draft-irtf-cfrg-frost",
      "headRefName": "feature/verification-cofactor-checks",
      "headRefOid": "bc52c90e83ff4017508521fbca7cf98452f5a090",
      "closedAt": "2022-03-28T17:18:14Z",
      "mergedAt": "2022-03-28T17:18:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6133239eec31a808427f8c5b2cf0c5edbaff61cb"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "I added the cofactor values for each ciphersuite in a commit (GitHub wouldn't let me make them as suggestions). These commits together fully close #68.\r\n\r\n// @chris-wood @chelseakomlo ",
          "createdAt": "2022-03-15T00:29:52Z",
          "updatedAt": "2022-03-15T00:29:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842N2rt",
          "commit": {
            "abbreviatedOid": "bc52c90"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-15T02:48:00Z",
          "updatedAt": "2022-03-15T02:48:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs842Pp5_",
          "commit": {
            "abbreviatedOid": "bc52c90"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This looks great! We should also update the reference implementation to match. (If we don't want to do that in this PR, let's file an issue to track it separately.)",
          "createdAt": "2022-03-15T11:44:24Z",
          "updatedAt": "2022-03-15T11:44:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs843C0oG",
          "commit": {
            "abbreviatedOid": "bc52c90"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "On call, merging and will update PoC in a followup change.",
          "createdAt": "2022-03-28T17:18:09Z",
          "updatedAt": "2022-03-28T17:18:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 119,
      "id": "PR_kwDOEpUZs840bsqM",
      "title": "Add specific sentence regarding security in a deterministic setting",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/119",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #117",
      "createdAt": "2022-03-15T01:44:14Z",
      "updatedAt": "2022-03-15T04:23:16Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "21b92d115f0318e44c7c7389d1ad26570861246e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "determinism",
      "headRefOid": "8099aaf60ab58382b8382d24170f1cfc585f9b70",
      "closedAt": "2022-03-15T04:23:14Z",
      "mergedAt": "2022-03-15T04:23:14Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "f9712b28353a679a35f4878a48c8f7123446eade"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842N2uN",
          "commit": {
            "abbreviatedOid": "8099aaf"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-15T02:48:19Z",
          "updatedAt": "2022-03-15T02:48:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 120,
      "id": "PR_kwDOEpUZs840btMC",
      "title": "Consistent notation and denote where PK comes from",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/120",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #114",
      "createdAt": "2022-03-15T01:50:19Z",
      "updatedAt": "2022-03-15T04:22:43Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "21b92d115f0318e44c7c7389d1ad26570861246e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "pk-notation",
      "headRefOid": "3adb045723b8ff6c42a5e70afe0dbda372f7feab",
      "closedAt": "2022-03-15T04:22:40Z",
      "mergedAt": "2022-03-15T04:22:40Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "736ced4f69d78715cc7edaeeec4755e2b0d220e2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842N3Ws",
          "commit": {
            "abbreviatedOid": "3adb045"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-15T02:52:23Z",
          "updatedAt": "2022-03-15T02:52:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 121,
      "id": "PR_kwDOEpUZs840fVFP",
      "title": "Update group info, consistent notation for secret keys",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/121",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses  #112 and #115, and also makes the notation for participant secret keys consistent.",
      "createdAt": "2022-03-15T20:17:03Z",
      "updatedAt": "2022-03-16T16:17:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "f9712b28353a679a35f4878a48c8f7123446eade",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "group-info",
      "headRefOid": "c4c330a49649e5adea6fdc55e9932b3f19eb6f54",
      "closedAt": "2022-03-16T16:16:11Z",
      "mergedAt": "2022-03-16T16:16:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2b957521ea88f2d5d4152a1ffb7c7822f2e9ef87"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "The implementation's notation is already out of date with the spec, so I think bringing the two into alignment is a larger change than this PR. I'll start on this in https://github.com/cfrg/draft-irtf-cfrg-frost/issues/106",
          "createdAt": "2022-03-16T16:05:04Z",
          "updatedAt": "2022-03-16T16:05:04Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds good! Let's leave a note in that issue then.",
          "createdAt": "2022-03-16T16:15:28Z",
          "updatedAt": "2022-03-16T16:15:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842S9-J",
          "commit": {
            "abbreviatedOid": "c4c330a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This is a good change, but please also update the notation in the reference implementation (if necessary!) so the two are in sync.",
          "createdAt": "2022-03-15T23:39:58Z",
          "updatedAt": "2022-03-15T23:39:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs842Wsx-",
          "commit": {
            "abbreviatedOid": "c4c330a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-16T16:16:05Z",
          "updatedAt": "2022-03-16T16:16:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 122,
      "id": "PR_kwDOEpUZs840vEBv",
      "title": "Bump actions/cache from 2 to 3",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/122",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/cache](https://github.com/actions/cache) from 2 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/cache/releases\">actions/cache's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<ul>\n<li>\n<p>This change adds a minimum runner version(node12 -&gt; node16), which can break users using an out-of-date/fork of the runner. This would be most commonly affecting users on GHES 3.3 or before, as those runners do not support node16 actions and they can use actions from github.com via <a href=\"https://docs.github.com/en/enterprise-server@3.0/admin/github-actions/managing-access-to-actions-from-githubcom/enabling-automatic-access-to-githubcom-actions-using-github-connect\">github connect</a> or manually copying the repo to their GHES instance.</p>\n</li>\n<li>\n<p>Few dependencies and cache action usage examples have also been updated.</p>\n</li>\n</ul>\n<h2>v2.1.7</h2>\n<p>Support 10GB cache upload using the latest version <code>1.0.8</code> of <a href=\"https://www.npmjs.com/package/@actions/cache\"><code>@actions/cache</code> </a></p>\n<h2>v2.1.6</h2>\n<ul>\n<li>Catch unhandled &quot;bad file descriptor&quot; errors that sometimes occurs when the cache server returns non-successful response (<a href=\"https://github-redirect.dependabot.com/actions/cache/pull/596\">actions/cache#596</a>)</li>\n</ul>\n<h2>v2.1.5</h2>\n<ul>\n<li>Fix permissions error seen when extracting caches with GNU tar that were previously created using BSD tar (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/527\">actions/cache#527</a>)</li>\n</ul>\n<h2>v2.1.4</h2>\n<ul>\n<li>Make caching more verbose <a href=\"https://github-redirect.dependabot.com/actions/toolkit/pull/650\">#650</a></li>\n<li>Use GNU tar on macOS if available <a href=\"https://github-redirect.dependabot.com/actions/toolkit/pull/701\">#701</a></li>\n</ul>\n<h2>v2.1.3</h2>\n<ul>\n<li>Upgrades <code>@actions/core</code> to v1.2.6 for <a href=\"https://github.com/advisories/GHSA-mfwh-5m23-j46w\">CVE-2020-15228</a>. This action was not using the affected methods.</li>\n<li>Fix error handling in <code>uploadChunk</code> where 400-level errors were not being detected and handled correctly</li>\n</ul>\n<h2>v2.1.2</h2>\n<ul>\n<li>Adds input to limit the chunk upload size, useful for self-hosted runners with slower upload speeds</li>\n<li>No-op when executing on GHES</li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Update <code>@actions/cache</code> package to <code>v1.0.2</code> which allows cache action to use posix format when taring files.</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li>Replaces the <code>http-client</code> with the Azure Storage SDK for NodeJS when downloading cache content from Azure.  This should help improve download performance and reliability as the SDK downloads files in 4 MB chunks, which can be parallelized and retried independently</li>\n<li>Display download progress and speed</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/cache/commit/4b0cf6cc4619e737324ddfcec08fff2413359514\"><code>4b0cf6c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/769\">#769</a> from actions/users/ashwinsangem/bump_major_version</li>\n<li><a href=\"https://github.com/actions/cache/commit/60c606a2b4c5358e11c2ca7b4694e59049d008d1\"><code>60c606a</code></a> Update licensed files</li>\n<li><a href=\"https://github.com/actions/cache/commit/b6e9a919a7da3606e9b2db756823ee1c39c7b48d\"><code>b6e9a91</code></a> Revert &quot;Updated to the latest version.&quot;</li>\n<li><a href=\"https://github.com/actions/cache/commit/c8425035834f98c304ecf92f5d50f41d433885c1\"><code>c842503</code></a> Updated to the latest version.</li>\n<li><a href=\"https://github.com/actions/cache/commit/2b7da2a62c3af9fa2692cd8d2d117da76faf31ac\"><code>2b7da2a</code></a> Bumped up to a major version.</li>\n<li><a href=\"https://github.com/actions/cache/commit/deae296ab340574da1ec86242984dfc91f0a7b81\"><code>deae296</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/651\">#651</a> from magnetikonline/fix-golang-windows-example</li>\n<li><a href=\"https://github.com/actions/cache/commit/c7c46bcb6db3c571021a3a2dc2d2557b512ecace\"><code>c7c46bc</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/707\">#707</a> from duxtland/main</li>\n<li><a href=\"https://github.com/actions/cache/commit/6535c5fb5fe2870754afba7bd4e514867ac9cb98\"><code>6535c5f</code></a> Regenerated <code>examples.md</code> TOC</li>\n<li><a href=\"https://github.com/actions/cache/commit/3fdafa472e0db16435add384585aa138ffdd16d3\"><code>3fdafa4</code></a> Update GitHub Actions status badge markdown in <code>README.md</code></li>\n<li><a href=\"https://github.com/actions/cache/commit/341e6d75d9826beb2fa659263d862f6aec63a064\"><code>341e6d7</code></a> Merge branch 'actions:main' into fix-golang-windows-example</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/cache/compare/v2...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/cache&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-03-21T12:12:39Z",
      "updatedAt": "2022-03-21T23:28:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2b957521ea88f2d5d4152a1ffb7c7822f2e9ef87",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/cache-3",
      "headRefOid": "e0fbe5697fe311cdcb64a6e666337d7f127ffad2",
      "closedAt": "2022-03-21T23:27:58Z",
      "mergedAt": "2022-03-21T23:27:58Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "86612c7d8e584bb94e00a373d0b1e4e9feb814c1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842oBAJ",
          "commit": {
            "abbreviatedOid": "e0fbe56"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-21T23:27:53Z",
          "updatedAt": "2022-03-21T23:27:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 123,
      "id": "PR_kwDOEpUZs840xlOk",
      "title": "Specify distinction between single and two round, and FROST keygen",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/123",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR explains why single-round FROST is out of scope, and also clarifies between the variant presented in this draft, and the paper. Some people might get confused because the FROST paper also presents a new-ish DKG and so is not just signing. ",
      "createdAt": "2022-03-21T23:14:23Z",
      "updatedAt": "2022-03-21T23:39:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2b957521ea88f2d5d4152a1ffb7c7822f2e9ef87",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "single-round",
      "headRefOid": "70ce56fc8030ef6cc485f970e53b493201bb5a5d",
      "closedAt": "2022-03-21T23:31:01Z",
      "mergedAt": "2022-03-21T23:31:01Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "c8b29a74dcced94416c4a5df4cf22a64d3e84d16"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842oAA_",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:20:25Z",
          "updatedAt": "2022-03-21T23:20:25Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "\ud83d\udc4d ",
              "createdAt": "2022-03-21T23:20:25Z",
              "updatedAt": "2022-03-21T23:20:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842oAC3",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:20:37Z",
          "updatedAt": "2022-03-21T23:20:38Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-03-21T23:20:37Z",
              "updatedAt": "2022-03-21T23:20:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842oAJJ",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:21:21Z",
          "updatedAt": "2022-03-21T23:21:22Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-03-21T23:21:21Z",
              "updatedAt": "2022-03-21T23:21:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842oAWV",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:22:59Z",
          "updatedAt": "2022-03-21T23:22:59Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Nit: FROST (flexible round-optimized schnorr-based threshold) threshold signature protocol?\r\n\r\nmaybe: \r\n```suggestion\r\nWe now present the two-round variant of the FROST signature protocol for producing Schnorr signatures in the threshold setting.\r\n```",
              "createdAt": "2022-03-21T23:22:59Z",
              "updatedAt": "2022-03-21T23:22:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842oAfI",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:24:06Z",
          "updatedAt": "2022-03-21T23:24:06Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "\ud83d\udc4d ",
              "createdAt": "2022-03-21T23:24:06Z",
              "updatedAt": "2022-03-21T23:24:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs842oA8H",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved, I left a possible suggestion, you can take it or leave it \ud83d\udc4d",
          "createdAt": "2022-03-21T23:27:23Z",
          "updatedAt": "2022-03-21T23:27:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs842oBNX",
          "commit": {
            "abbreviatedOid": "70ce56f"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T23:29:35Z",
          "updatedAt": "2022-03-21T23:29:36Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "FROST is a threshold signature protocol, so going with the original language. ",
              "createdAt": "2022-03-21T23:29:35Z",
              "updatedAt": "2022-03-21T23:29:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 124,
      "id": "PR_kwDOEpUZs840xvyj",
      "title": "Intro refactor",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/124",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "While reviewing #123 I noticed one thing I wanted to fix, but got carried away and refactored and simplified some of the intro. I think it had irrelevant information for the purposes of this document.",
      "createdAt": "2022-03-22T00:05:16Z",
      "updatedAt": "2022-03-22T11:58:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c8b29a74dcced94416c4a5df4cf22a64d3e84d16",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-4",
      "headRefOid": "b3854900111d5fe918097d426540f3c30e24d753",
      "closedAt": "2022-03-22T11:58:55Z",
      "mergedAt": "2022-03-22T11:58:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e970a9ab82f478c43608f67324efc16e94ea8809"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs842oUGL",
          "commit": {
            "abbreviatedOid": "b385490"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "lgtm, but I'll let @chelseakomlo look also",
          "createdAt": "2022-03-22T00:42:55Z",
          "updatedAt": "2022-03-22T00:42:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs842oh1S",
          "commit": {
            "abbreviatedOid": "b385490"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great! Thanks @chris-wood ",
          "createdAt": "2022-03-22T02:40:17Z",
          "updatedAt": "2022-03-22T02:40:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 126,
      "id": "PR_kwDOEpUZs84015Jo",
      "title": "Add VSS commitments to trusted_dealer_keygen",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/126",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Also implements `vss_commit` and `vss_verify` in the POC code and adds these checks to the test. ",
      "createdAt": "2022-03-22T21:47:50Z",
      "updatedAt": "2022-03-28T17:48:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e970a9ab82f478c43608f67324efc16e94ea8809",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "vss-commit",
      "headRefOid": "41553d8ea9080005aabfa3de2b1eba47f14cab30",
      "closedAt": "2022-03-28T17:48:45Z",
      "mergedAt": "2022-03-28T17:48:45Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "f1b35fe7f0f74291968f6aaacd1df8d704d68587"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8422h6W",
          "commit": {
            "abbreviatedOid": "9f9be26"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Excellent \ud83c\udf89 Thanks for updating both spec and code. This all looks good. I only have style nits, so approved pending those changes. =)",
          "createdAt": "2022-03-24T13:26:53Z",
          "updatedAt": "2022-03-24T13:29:03Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "```suggestion\r\n      A_i = G.ScalarBaseMult(coeff)\r\n```\r\n(Just noticing this now)",
              "createdAt": "2022-03-24T13:26:53Z",
              "updatedAt": "2022-03-24T13:29:03Z"
            },
            {
              "originalPosition": 32,
              "body": "Style nit: can we unify indentation for `vss_commit` and `vss_verify`? (4 spaces instead of 2)",
              "createdAt": "2022-03-24T13:28:08Z",
              "updatedAt": "2022-03-24T13:29:03Z"
            },
            {
              "originalPosition": 80,
              "body": "Same style nit here",
              "createdAt": "2022-03-24T13:28:32Z",
              "updatedAt": "2022-03-24T13:29:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 127,
      "id": "PR_kwDOEpUZs84018HR",
      "title": "Add additional failure check",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/127",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Last check to address #48",
      "createdAt": "2022-03-22T22:07:14Z",
      "updatedAt": "2022-04-18T17:01:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e970a9ab82f478c43608f67324efc16e94ea8809",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "error-abort",
      "headRefOid": "d1301d161b1fe1619e86c5b9912c5fb900e0fa8d",
      "closedAt": "2022-03-28T17:17:23Z",
      "mergedAt": "2022-03-28T17:17:23Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "01f74a250215848b4cf8b4964f4f3c17ad664cde"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8422jEp",
          "commit": {
            "abbreviatedOid": "401e605"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-24T13:30:05Z",
          "updatedAt": "2022-03-24T13:30:09Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This seems like text that already exists above:\r\n\r\n> If the validation fails, the participant can issue a complaint\r\n> against the dealer, and take actions such as broadcasting this complaint to all\r\n> other participants. We do not specify the complaint procedure in this draft, as\r\n> it will be implementation-specific.\r\n\r\nCan we update the text there instead?",
              "createdAt": "2022-03-24T13:30:05Z",
              "updatedAt": "2022-03-24T13:30:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84232FW",
          "commit": {
            "abbreviatedOid": "401e605"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-24T17:14:05Z",
          "updatedAt": "2022-03-24T17:14:05Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Yeah agreed",
              "createdAt": "2022-03-24T17:14:05Z",
              "updatedAt": "2022-03-24T17:14:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843CsAz",
          "commit": {
            "abbreviatedOid": "401e605"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-28T16:48:44Z",
          "updatedAt": "2022-03-28T16:48:44Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Removed the other text as broadcast rounds/complaints/etc is 1) hard to get right, and 2) very out of scope for this draft. We now only specify that if this check fails, the participant MUST abort and failure should be investigated out of band.",
              "createdAt": "2022-03-28T16:48:44Z",
              "updatedAt": "2022-03-28T16:48:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843Cz0M",
          "commit": {
            "abbreviatedOid": "d1301d1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T17:16:10Z",
          "updatedAt": "2022-03-28T17:16:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs843C0N3",
          "commit": {
            "abbreviatedOid": "d1301d1"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T17:17:16Z",
          "updatedAt": "2022-03-28T17:17:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 128,
      "id": "PR_kwDOEpUZs841Ils4",
      "title": "The commitment share is only computed as part of aggregate",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/128",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "bug"
      ],
      "body": "We still had commitment share in some wire structs and mentions.",
      "createdAt": "2022-03-28T07:31:23Z",
      "updatedAt": "2022-04-18T17:01:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e970a9ab82f478c43608f67324efc16e94ea8809",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "commitment-shares",
      "headRefOid": "8a153f8ab20a2d33452ae24bc7e1771deacc357a",
      "closedAt": "2022-03-28T13:37:29Z",
      "mergedAt": "2022-03-28T13:37:29Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c3522f0e4cb6003769be64882d0a06b523076963"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843Blsf",
          "commit": {
            "abbreviatedOid": "8a153f8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T13:37:24Z",
          "updatedAt": "2022-03-28T13:37:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 129,
      "id": "PR_kwDOEpUZs841KxMc",
      "title": "Split up test vectors into separate files",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/129",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #99.",
      "createdAt": "2022-03-28T16:22:10Z",
      "updatedAt": "2022-03-28T18:36:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c3522f0e4cb6003769be64882d0a06b523076963",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/split-vector-files",
      "headRefOid": "fcf94964a843986096f3ed59dd9c3d1c2f4392b7",
      "closedAt": "2022-03-28T18:36:04Z",
      "mergedAt": "2022-03-28T18:36:04Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "3eb87b6e2f3c7070a3ff5e67133620bac50eea57"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843DMHu",
          "commit": {
            "abbreviatedOid": "fcf9496"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm! Thank you!",
          "createdAt": "2022-03-28T18:35:55Z",
          "updatedAt": "2022-03-28T18:35:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 130,
      "id": "PR_kwDOEpUZs841KzWl",
      "title": "Allow some secrets to be zero.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/130",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #110.",
      "createdAt": "2022-03-28T16:28:43Z",
      "updatedAt": "2022-03-28T18:21:18Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c3522f0e4cb6003769be64882d0a06b523076963",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/zero-scalars",
      "headRefOid": "ab1a21a5b6ec9a9111c270e4f4a9088ced6bacba",
      "closedAt": "2022-03-28T18:21:15Z",
      "mergedAt": "2022-03-28T18:21:14Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "638dbd0287b112a6f11f7828990aa3f141530962"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843C-vj",
          "commit": {
            "abbreviatedOid": "ab1a21a"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me, and the naming is very clear. ",
          "createdAt": "2022-03-28T17:51:04Z",
          "updatedAt": "2022-03-28T17:51:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs843DHXA",
          "commit": {
            "abbreviatedOid": "ab1a21a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T18:21:01Z",
          "updatedAt": "2022-03-28T18:21:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 132,
      "id": "PR_kwDOEpUZs841LZ7k",
      "title": "Add function to derive group info in trusted dealer setting",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/132",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-28T19:08:33Z",
      "updatedAt": "2022-03-29T14:16:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3eb87b6e2f3c7070a3ff5e67133620bac50eea57",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "group-info-derive",
      "headRefOid": "3d52452b6ef5800d6f79dc8db8adaea6c9cf177a",
      "closedAt": "2022-03-29T14:16:26Z",
      "mergedAt": "2022-03-29T14:16:26Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "aae023316479185fa32d5c1780f66c720f7e3402"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This PR also clarifies naming around signer private and public keys.",
          "createdAt": "2022-03-28T19:08:54Z",
          "updatedAt": "2022-03-28T19:08:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843D3Ie",
          "commit": {
            "abbreviatedOid": "bbb80ec"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-28T21:11:42Z",
          "updatedAt": "2022-03-28T21:11:59Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "This is the signing group? As opposed to the algebraic structure?",
              "createdAt": "2022-03-28T21:11:43Z",
              "updatedAt": "2022-03-28T21:11:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843D9Kq",
          "commit": {
            "abbreviatedOid": "bbb80ec"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-28T21:40:06Z",
          "updatedAt": "2022-03-28T21:40:06Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "We use group info earlier in the document as an input to each signer and the coordinator with these keys. ",
              "createdAt": "2022-03-28T21:40:06Z",
              "updatedAt": "2022-03-28T21:40:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843D1FZ",
          "commit": {
            "abbreviatedOid": "bbb80ec"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-28T21:02:51Z",
          "updatedAt": "2022-03-28T21:41:33Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "```suggestion\r\n    derive_group_info(MAX_SIGNERS, THRESHOLD_LIMIT, vss_commitment):\r\n```\r\n\r\nWe now use MAX_SIGNERS and THRESHOLD_LIMIT instead of n and t, respectively. (Side bar: maybe we should rename THRESHOLD_LIMIT to MIN_SIGNERS?)",
              "createdAt": "2022-03-28T21:02:51Z",
              "updatedAt": "2022-03-28T21:41:33Z"
            },
            {
              "originalPosition": 73,
              "body": "```suggestion\r\n    - signer_public_keys, a list of MAX_SIGNERS public keys PK_i for i=1,...,n, where PK_i is the public key for participant i.\r\n```",
              "createdAt": "2022-03-28T21:03:23Z",
              "updatedAt": "2022-03-28T21:41:33Z"
            },
            {
              "originalPosition": 67,
              "body": "```suggestion\r\n    - MAX_SIGNERS, the number of shares to generate, an integer\r\n```",
              "createdAt": "2022-03-28T21:03:39Z",
              "updatedAt": "2022-03-28T21:41:33Z"
            },
            {
              "originalPosition": 68,
              "body": "```suggestion\r\n    - THRESHOLD_LIMIT, the threshold of the secret sharing scheme, an integer\r\n```",
              "createdAt": "2022-03-28T21:03:46Z",
              "updatedAt": "2022-03-28T21:41:33Z"
            },
            {
              "originalPosition": 77,
              "body": "```suggestion\r\n      signer_public_keys = []\r\n```",
              "createdAt": "2022-03-28T21:40:36Z",
              "updatedAt": "2022-03-28T21:41:34Z"
            },
            {
              "originalPosition": 80,
              "body": "```suggestion\r\n        signer_public_keys.append(PK_i)\r\n```",
              "createdAt": "2022-03-28T21:41:17Z",
              "updatedAt": "2022-03-28T21:41:34Z"
            },
            {
              "originalPosition": 79,
              "body": "We don't use this notation anymore -- can you please rewrite it using a loop?",
              "createdAt": "2022-03-28T21:41:31Z",
              "updatedAt": "2022-03-28T21:41:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843EEDE",
          "commit": {
            "abbreviatedOid": "bbb80ec"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-28T22:13:08Z",
          "updatedAt": "2022-03-28T22:13:08Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "I would prefer keeping threshold in the name, to keep in line with existing terminology. ",
              "createdAt": "2022-03-28T22:13:08Z",
              "updatedAt": "2022-03-28T22:13:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843EJBU",
          "commit": {
            "abbreviatedOid": "bbb80ec"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-28T22:40:00Z",
          "updatedAt": "2022-03-28T22:40:01Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Addressed this and the loop in verify share.",
              "createdAt": "2022-03-28T22:40:00Z",
              "updatedAt": "2022-03-28T22:40:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843HVOy",
          "commit": {
            "abbreviatedOid": "40b0b48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-29T13:56:22Z",
          "updatedAt": "2022-03-29T13:57:48Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "```suggestion\r\n    derive_group_info(MAX_SIGNERS, THRESHOLD_LIMIT, vss_commitment)\r\n```",
              "createdAt": "2022-03-29T13:56:22Z",
              "updatedAt": "2022-03-29T13:57:49Z"
            },
            {
              "originalPosition": 82,
              "body": "```suggestion\r\n    - signer_public_keys, a list of MAX_SIGNERS public keys PK_i for i=1,...,MAX_SIGNERS, where PK_i is the public key for participant i.\r\n```",
              "createdAt": "2022-03-29T13:56:32Z",
              "updatedAt": "2022-03-29T13:57:49Z"
            },
            {
              "originalPosition": 87,
              "body": "```suggestion\r\n      for i in range(1, MAX_SIGNERS):\r\n```",
              "createdAt": "2022-03-29T13:56:43Z",
              "updatedAt": "2022-03-29T13:57:49Z"
            },
            {
              "originalPosition": 89,
              "body": "```suggestion\r\n        for j in range(0, THRESHOLD_LIMIT-1):\r\n```",
              "createdAt": "2022-03-29T13:56:55Z",
              "updatedAt": "2022-03-29T13:57:49Z"
            },
            {
              "originalPosition": 63,
              "body": "```suggestion\r\n      for j in range(0, THRESHOLD_LIMIT-1):\r\n```",
              "createdAt": "2022-03-29T13:57:45Z",
              "updatedAt": "2022-03-29T13:57:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 133,
      "id": "PR_kwDOEpUZs841Lctv",
      "title": "Elements in a field with prime modulus are positive",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/133",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-28T19:20:28Z",
      "updatedAt": "2022-03-28T19:29:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3eb87b6e2f3c7070a3ff5e67133620bac50eea57",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "threshold-min",
      "headRefOid": "3a6d516719000c0336d306cb5226a665cbf0a4ab",
      "closedAt": "2022-03-28T19:29:02Z",
      "mergedAt": "2022-03-28T19:29:02Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "867517b6afc64436a1ddb926eeb6dec6a49c23f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843DYNF",
          "commit": {
            "abbreviatedOid": "3a6d516"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-03-28T19:20:58Z",
          "updatedAt": "2022-03-28T19:20:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 134,
      "id": "PR_kwDOEpUZs841PTMw",
      "title": "Add -04 change log",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/134",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-29T15:23:04Z",
      "updatedAt": "2022-03-29T15:29:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "aae023316479185fa32d5c1780f66c720f7e3402",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "changelog-v4",
      "headRefOid": "133d4e58b9bdef18a2aa888f9f0975703e3fe0f2",
      "closedAt": "2022-03-29T15:29:45Z",
      "mergedAt": "2022-03-29T15:29:45Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "a3e36bf183a217df6c09346928d0f9fd8ed6e151"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843H5Es",
          "commit": {
            "abbreviatedOid": "9624b65"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-29T15:23:33Z",
          "updatedAt": "2022-03-29T15:23:49Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n- Added methods to verify VSS commitments and derive group info (#126, #132).\r\n```",
              "createdAt": "2022-03-29T15:23:33Z",
              "updatedAt": "2022-03-29T15:23:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 135,
      "id": "PR_kwDOEpUZs841PmXJ",
      "title": "Update style and vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/135",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-29T16:33:58Z",
      "updatedAt": "2022-03-29T17:06:12Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "a3e36bf183a217df6c09346928d0f9fd8ed6e151",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/update-poc",
      "headRefOid": "342be1976dc29c1088a9fbcf60c5d90c206fd4a5",
      "closedAt": "2022-03-29T17:04:32Z",
      "mergedAt": "2022-03-29T17:04:32Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2f2dff76e44c2cedea27dc7e465935efebad5f0d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843ISwp",
          "commit": {
            "abbreviatedOid": "2cd86af"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-29T16:35:58Z",
          "updatedAt": "2022-03-29T16:35:58Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-03-29T16:35:58Z",
              "updatedAt": "2022-03-29T16:35:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843IS2G",
          "commit": {
            "abbreviatedOid": "2cd86af"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-29T16:36:13Z",
          "updatedAt": "2022-03-29T16:36:13Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "This was the bug.",
              "createdAt": "2022-03-29T16:36:13Z",
              "updatedAt": "2022-03-29T16:36:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs843IbKo",
          "commit": {
            "abbreviatedOid": "342be19"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-29T17:03:23Z",
          "updatedAt": "2022-03-29T17:03:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 136,
      "id": "PR_kwDOEpUZs841bj25",
      "title": "Update existing implementations table",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/136",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "documentation"
      ],
      "body": "",
      "createdAt": "2022-03-31T20:17:38Z",
      "updatedAt": "2022-04-18T17:01:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2f2dff76e44c2cedea27dc7e465935efebad5f0d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-3",
      "headRefOid": "c6d52c7d8fec331ed8b182e5c183212bca90efd9",
      "closedAt": "2022-04-01T21:48:30Z",
      "mergedAt": "2022-04-01T21:48:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e65e141afb68a96ebc108f445c9522cd7390bb4d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs843X3Qb",
          "commit": {
            "abbreviatedOid": "c6d52c7"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, looks good! ",
          "createdAt": "2022-04-01T14:19:24Z",
          "updatedAt": "2022-04-01T14:19:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs843ZjhS",
          "commit": {
            "abbreviatedOid": "c6d52c7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-01T21:48:26Z",
          "updatedAt": "2022-04-01T21:48:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 137,
      "id": "PR_kwDOEpUZs841e19y",
      "title": "Bump actions/setup-python from 3.0.0 to 3.1.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/137",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 3.0.0 to 3.1.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Support caching poetry dependencies and caching on GHES 3.5</h2>\n<ul>\n<li>In the scope of this release, we added <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/362\">support for caching from GHES 3.5</a> and fixed the download issue for files &gt; 2GB during restore.</li>\n<li>Caching poetry dependencies</li>\n</ul>\n<pre lang=\"yaml\"><code>steps:\n- uses: actions/checkout@v3\n- name: Install poetry\n  run: pipx install poetry\n- uses: actions/setup-python@v3\n  with:\n    python-version: '3.9'\n    cache: 'poetry'\n- run: poetry install\n- run: poetry run pytest\n</code></pre>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/9c644ca2ab8e57ea0a487b5ec2f8290740378bfd\"><code>9c644ca</code></a> Update README.md to fix setup-python version  in example (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/368\">#368</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3e8e90edf01accdf7b76addef61eac60c478e3a7\"><code>3e8e90e</code></a> dist fix (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/367\">#367</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/05fb98de9ae200fbc898ddcaa011ef774ac3837f\"><code>05fb98d</code></a> Cache on ghes (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/363\">#363</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/6c566026c0404efac87e650f7de19f11a9406300\"><code>6c56602</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/281\">#281</a> from patrick91/feature/poetry-caching</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9516be869fd78eb4feec5395859f8dd36d3c8b75\"><code>9516be8</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/358\">#358</a> from actions/brcrista/codeql-main</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7aa3e95001ed5078678a8bf348e8d617387daed8\"><code>7aa3e95</code></a> Update dist</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/6c31eb3fc78f87d417c5590abb7825859b6ae048\"><code>6c31eb3</code></a> Use <code>\\n</code> instead of <code>os.EOL</code></li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7a37d78806d29e4ee010fb549fb611760e8f5330\"><code>7a37d78</code></a> Update dist</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/e4be7a40b0903c3448f9e9894753fc18e781fee2\"><code>e4be7a4</code></a> Initialise pyproject.toml</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/aac0ef93ba652dc2a23d1c1c6f2b44c3c5bef498\"><code>aac0ef9</code></a> Build and format</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v3.0.0...v3.1.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=3.0.0&new-version=3.1.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-04-01T11:27:33Z",
      "updatedAt": "2022-04-07T11:40:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2f2dff76e44c2cedea27dc7e465935efebad5f0d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-3.1.0",
      "headRefOid": "a1bf595ca8266c0892515ec5dd822bd6997a0251",
      "closedAt": "2022-04-07T11:40:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Superseded by #138.",
          "createdAt": "2022-04-07T11:40:36Z",
          "updatedAt": "2022-04-07T11:40:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 138,
      "id": "PR_kwDOEpUZs841zSl0",
      "title": "Bump actions/setup-python from 3.0.0 to 3.1.1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/138",
      "state": "CLOSED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 3.0.0 to 3.1.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Add &quot;cache-hit&quot; output and fix &quot;python-version&quot; output for PyPy</h2>\n<p>This release introduces new output cache-hit (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/373\">actions/setup-python#373</a>) and fix python-version output for PyPy (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/365\">actions/setup-python#365</a>)</p>\n<p>The cache-hit output contains boolean value indicating that an exact match was found for the key. It shows that the action uses already existing cache or not. The output is available only if cache is enabled.</p>\n<p>The python-version contains version of Python or PyPy.</p>\n<h2>Support caching poetry dependencies and caching on GHES 3.5</h2>\n<ul>\n<li>In the scope of this release, we added <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/362\">support for caching from GHES 3.5</a> and fixed the download issue for files &gt; 2GB during restore.</li>\n<li>Caching poetry dependencies</li>\n</ul>\n<pre lang=\"yaml\"><code>steps:\n- uses: actions/checkout@v3\n- name: Install poetry\n  run: pipx install poetry\n- uses: actions/setup-python@v3\n  with:\n    python-version: '3.9'\n    cache: 'poetry'\n- run: poetry install\n- run: poetry run pytest\n</code></pre>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/21c0493ecfd34b1217f0a90ec19a327f3cc0a048\"><code>21c0493</code></a> Cache hit output (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/373\">#373</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7933d5a3dd7112211f44c3c6d4c1156a64d3f5bf\"><code>7933d5a</code></a> Add pyton-version to setup PyPy output (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/365\">#365</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7885ec3539f8a6278aa15a514b195c3b3e10dd32\"><code>7885ec3</code></a> Rework pipenv caching test (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/375\">#375</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9c644ca2ab8e57ea0a487b5ec2f8290740378bfd\"><code>9c644ca</code></a> Update README.md to fix setup-python version  in example (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/368\">#368</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3e8e90edf01accdf7b76addef61eac60c478e3a7\"><code>3e8e90e</code></a> dist fix (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/367\">#367</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/05fb98de9ae200fbc898ddcaa011ef774ac3837f\"><code>05fb98d</code></a> Cache on ghes (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/363\">#363</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/6c566026c0404efac87e650f7de19f11a9406300\"><code>6c56602</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/281\">#281</a> from patrick91/feature/poetry-caching</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9516be869fd78eb4feec5395859f8dd36d3c8b75\"><code>9516be8</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/358\">#358</a> from actions/brcrista/codeql-main</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7aa3e95001ed5078678a8bf348e8d617387daed8\"><code>7aa3e95</code></a> Update dist</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/6c31eb3fc78f87d417c5590abb7825859b6ae048\"><code>6c31eb3</code></a> Use <code>\\n</code> instead of <code>os.EOL</code></li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v3.0.0...v3.1.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=3.0.0&new-version=3.1.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-04-07T11:40:32Z",
      "updatedAt": "2022-04-12T14:02:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e65e141afb68a96ebc108f445c9522cd7390bb4d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-3.1.1",
      "headRefOid": "240da73707c7c9a2dab6416be1030111d7a5e684",
      "closedAt": "2022-04-12T14:02:33Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dependabot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Superseded by #140.",
          "createdAt": "2022-04-12T14:02:32Z",
          "updatedAt": "2022-04-12T14:02:32Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 139,
      "id": "PR_kwDOEpUZs841_s0I",
      "title": "Bump actions/upload-artifact from 2 to 3",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/139",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 2 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/upload-artifact/releases\">actions/upload-artifact's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<h2>What's Changed</h2>\n<ul>\n<li>Update default runtime to node16 (<a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/293\">#293</a>)</li>\n<li>Update package-lock.json file version to 2 (<a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/302\">#302</a>)</li>\n</ul>\n<h3>Breaking Changes</h3>\n<p>With the update to Node 16, all scripts will now be run with Node 16 rather than Node 12.</p>\n<h2>v2.3.1</h2>\n<p>Fix for empty fails on Windows failing on upload <a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/281\">#281</a></p>\n<h2>v2.3.0 Upload Artifact</h2>\n<ul>\n<li>Optimizations for faster uploads of larger files that are already compressed</li>\n<li>Significantly improved logging when there are chunked uploads</li>\n<li>Clarifications in logs around the upload size and prohibited characters that aren't allowed in the artifact name or any uploaded files</li>\n<li>Various other small bugfixes &amp; optimizations</li>\n</ul>\n<h2>v2.2.4</h2>\n<ul>\n<li>Retry on HTTP 500 responses from the service</li>\n</ul>\n<h2>v2.2.3</h2>\n<ul>\n<li>Fixes for proxy related issues</li>\n</ul>\n<h2>v2.2.2</h2>\n<ul>\n<li>Improved retryability and error handling</li>\n</ul>\n<h2>v2.2.1</h2>\n<ul>\n<li>Update used actions/core package to the latest version</li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li>Support for artifact retention</li>\n</ul>\n<h2>v2.1.4</h2>\n<ul>\n<li>Add Third Party License Information</li>\n</ul>\n<h2>v2.1.3</h2>\n<ul>\n<li>Use updated version of the <code>@action/artifact</code> NPM package</li>\n</ul>\n<h2>v2.1.2</h2>\n<ul>\n<li>Increase upload chunk size from 4MB to 8MB</li>\n<li>Detect case insensitive file uploads</li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Fix for certain symlinks not correctly being identified as directories before starting uploads</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li>Support for uploading artifacts with multiple paths</li>\n<li>Support for using exclude paths</li>\n<li>Updates to dependencies</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/6673cd052c4cd6fcf4b4e6e60ea986c889389535\"><code>6673cd0</code></a> Update <code>lockfileVersion</code> in <code>package-lock.json</code> (<a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/302\">#302</a>)</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/2244c8200304ec9588bf9399eac622d9fadc28c4\"><code>2244c82</code></a> Update to node16 (<a href=\"https://github-redirect.dependabot.com/actions/upload-artifact/issues/293\">#293</a>)</li>\n<li><a href=\"https://github.com/actions/upload-artifact/commit/87348cee5fefa95e42e9b4804b4d68e130304158\"><code>87348ce</code></a> Add 503 warning when uploading to the same artifact</li>\n<li>See full diff in <a href=\"https://github.com/actions/upload-artifact/compare/v2...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/upload-artifact&package-manager=github_actions&previous-version=2&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-04-11T11:37:43Z",
      "updatedAt": "2022-04-12T15:56:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e65e141afb68a96ebc108f445c9522cd7390bb4d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/upload-artifact-3",
      "headRefOid": "8cd59a2e3a2a7d9abe730eece436c0cc4a3fe7a3",
      "closedAt": "2022-04-12T15:56:42Z",
      "mergedAt": "2022-04-12T15:56:42Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "1d023cebff21ab48465963754ea009de76d8d712"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844BBOX",
          "commit": {
            "abbreviatedOid": "8cd59a2"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-12T15:56:37Z",
          "updatedAt": "2022-04-12T15:56:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 140,
      "id": "PR_kwDOEpUZs842GtiU",
      "title": "Bump actions/setup-python from 3.0.0 to 3.1.2",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/140",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 3.0.0 to 3.1.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>Update actions/cache version to 2.0.2</h2>\n<p>In scope of this release we updated <code>actions/cache</code> package as the new version contains fixes related to GHES 3.5 (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/382\">actions/setup-python#382</a>)</p>\n<h2>Add &quot;cache-hit&quot; output and fix &quot;python-version&quot; output for PyPy</h2>\n<p>This release introduces new output cache-hit (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/373\">actions/setup-python#373</a>) and fix python-version output for PyPy (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/365\">actions/setup-python#365</a>)</p>\n<p>The cache-hit output contains boolean value indicating that an exact match was found for the key. It shows that the action uses already existing cache or not. The output is available only if cache is enabled.</p>\n<p>The python-version contains version of Python or PyPy.</p>\n<h2>Support caching poetry dependencies and caching on GHES 3.5</h2>\n<ul>\n<li>In the scope of this release, we added <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/362\">support for caching from GHES 3.5</a> and fixed the download issue for files &gt; 2GB during restore.</li>\n<li>Caching poetry dependencies</li>\n</ul>\n<pre lang=\"yaml\"><code>steps:\n- uses: actions/checkout@v3\n- name: Install poetry\n  run: pipx install poetry\n- uses: actions/setup-python@v3\n  with:\n    python-version: '3.9'\n    cache: 'poetry'\n- run: poetry install\n- run: poetry run pytest\n</code></pre>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/98f2ad02fd48d057ee3b4d4f66525b231c3e52b6\"><code>98f2ad0</code></a> Updated <code>@\u200bactions/cache</code> (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/382\">#382</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/5d6f0c8a87d930c1f9308457abe4c4568399410a\"><code>5d6f0c8</code></a> ci(workflow): add 'npm' cache for actions/setup-node in .github/workflows (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/379\">#379</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/21c0493ecfd34b1217f0a90ec19a327f3cc0a048\"><code>21c0493</code></a> Cache hit output (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/373\">#373</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7933d5a3dd7112211f44c3c6d4c1156a64d3f5bf\"><code>7933d5a</code></a> Add pyton-version to setup PyPy output (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/365\">#365</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/7885ec3539f8a6278aa15a514b195c3b3e10dd32\"><code>7885ec3</code></a> Rework pipenv caching test (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/375\">#375</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9c644ca2ab8e57ea0a487b5ec2f8290740378bfd\"><code>9c644ca</code></a> Update README.md to fix setup-python version  in example (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/368\">#368</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3e8e90edf01accdf7b76addef61eac60c478e3a7\"><code>3e8e90e</code></a> dist fix (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/367\">#367</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/05fb98de9ae200fbc898ddcaa011ef774ac3837f\"><code>05fb98d</code></a> Cache on ghes (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/363\">#363</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/6c566026c0404efac87e650f7de19f11a9406300\"><code>6c56602</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/281\">#281</a> from patrick91/feature/poetry-caching</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/9516be869fd78eb4feec5395859f8dd36d3c8b75\"><code>9516be8</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/358\">#358</a> from actions/brcrista/codeql-main</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v3.0.0...v3.1.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=3.0.0&new-version=3.1.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-04-12T14:02:28Z",
      "updatedAt": "2022-04-12T15:57:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e65e141afb68a96ebc108f445c9522cd7390bb4d",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-3.1.2",
      "headRefOid": "ddde04f4412975e9e3f16872ff2824c2ca7165ba",
      "closedAt": "2022-04-12T15:57:02Z",
      "mergedAt": "2022-04-12T15:57:02Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "b1f1af682671af5e83f5a2f066b6e219e85e45fc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844BBVd",
          "commit": {
            "abbreviatedOid": "ddde04f"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-12T15:56:55Z",
          "updatedAt": "2022-04-12T15:56:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 143,
      "id": "PR_kwDOEpUZs842XrM_",
      "title": "Updates per review",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/143",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "This may be super redundant in places, but we can pare it back to being minimally redundant but explicit about typing.",
      "createdAt": "2022-04-18T16:20:40Z",
      "updatedAt": "2022-04-18T17:13:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b1f1af682671af5e83f5a2f066b6e219e85e45fc",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "notes",
      "headRefOid": "9ad7fefaf13078878e1025837af64d9edb1cbbad",
      "closedAt": "2022-04-18T17:13:52Z",
      "mergedAt": "2022-04-18T17:13:52Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "b774465289d84aa1838698d4b40bdb47ece7adbe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844TXz-",
          "commit": {
            "abbreviatedOid": "b4c03c6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-18T16:56:09Z",
          "updatedAt": "2022-04-18T17:00:39Z",
          "comments": [
            {
              "originalPosition": 203,
              "body": "```suggestion\r\n  Outputs: The resulting secret s, a `Scalar` in `GF(p)`, that was previously split into shares\r\n```",
              "createdAt": "2022-04-18T16:56:09Z",
              "updatedAt": "2022-04-18T17:00:39Z"
            },
            {
              "originalPosition": 223,
              "body": "```suggestion\r\n    identifier, and sk_i the participant's secret key, a secret share of the constant term of f, where sk_i is in `GF(p)`.\r\n```",
              "createdAt": "2022-04-18T16:57:33Z",
              "updatedAt": "2022-04-18T17:00:39Z"
            },
            {
              "originalPosition": 223,
              "body": "```suggestion\r\n    identifier, and sk_i the participant's secret key, a secret share of the constant term of f, where sk_i is a `Scalar` of `F`, the scalar field `GF(p)` of `G`.\r\n```",
              "createdAt": "2022-04-18T16:59:07Z",
              "updatedAt": "2022-04-18T17:00:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 145,
      "id": "PR_kwDOEpUZs842X2W_",
      "title": "Fix group notation and clarify member functions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/145",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR does two things: \r\n1. Uses consistent notation for the group `G`\r\n2. Specifies the member functions on `G`",
      "createdAt": "2022-04-18T17:23:23Z",
      "updatedAt": "2022-04-20T15:24:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b774465289d84aa1838698d4b40bdb47ece7adbe",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-gg",
      "headRefOid": "e010fa7a3a24a78269dae699710129856c2d120b",
      "closedAt": "2022-04-18T17:47:22Z",
      "mergedAt": "2022-04-18T17:47:22Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "e25c30eaa3d8aad8cf3596382d93ff03afc625ad"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think this addresses the concern? I'll propose an alternate change.",
          "createdAt": "2022-04-20T15:24:54Z",
          "updatedAt": "2022-04-20T15:24:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844ThTa",
          "commit": {
            "abbreviatedOid": "e010fa7"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2022-04-18T17:37:27Z",
          "updatedAt": "2022-04-18T17:37:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 146,
      "id": "PR_kwDOEpUZs842X6CB",
      "title": "checkout@3.0.1 for fix",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/146",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "dependencies"
      ],
      "body": "",
      "createdAt": "2022-04-18T17:43:29Z",
      "updatedAt": "2022-04-18T18:28:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b774465289d84aa1838698d4b40bdb47ece7adbe",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "7ce19d43db185a877811fa8130acc59e6357b369",
      "closedAt": "2022-04-18T18:28:45Z",
      "mergedAt": "2022-04-18T18:28:45Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "6b5456d8088f0da972e1fe941024d4649bdc38c4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 147,
      "id": "PR_kwDOEpUZs842X72D",
      "title": "Consistent terminology for byte string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/147",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-18T17:54:22Z",
      "updatedAt": "2022-04-18T18:13:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e25c30eaa3d8aad8cf3596382d93ff03afc625ad",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "bytes",
      "headRefOid": "a83942cd310f5696b1a1a00f71d325cb4836b09f",
      "closedAt": "2022-04-18T18:13:50Z",
      "mergedAt": "2022-04-18T18:13:50Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "c22acf55a3643eda935e741a1164aa3929f8fb55"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844TpWb",
          "commit": {
            "abbreviatedOid": "a83942c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-18T18:13:41Z",
          "updatedAt": "2022-04-18T18:13:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 148,
      "id": "PR_kwDOEpUZs842X74U",
      "title": "Use RandomNonzeroScalar for single-party Schnorr example",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/148",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-18T17:54:35Z",
      "updatedAt": "2022-04-18T18:12:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "e25c30eaa3d8aad8cf3596382d93ff03afc625ad",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "random-nonzero-scalar",
      "headRefOid": "2fb31ac076178685537b0d3a4da2c2a7f48227ac",
      "closedAt": "2022-04-18T18:12:55Z",
      "mergedAt": "2022-04-18T18:12:55Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "dbcc270571bf260b83f150a277b256f2d753f6f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844Tmhq",
          "commit": {
            "abbreviatedOid": "2fb31ac"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-18T18:00:36Z",
          "updatedAt": "2022-04-18T18:00:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 149,
      "id": "PR_kwDOEpUZs842YEJP",
      "title": "s/SHOULD BE/SHOULD be/",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/149",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-18T18:37:11Z",
      "updatedAt": "2022-04-18T18:46:21Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6b5456d8088f0da972e1fe941024d4649bdc38c4",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "1e066a54a62ba6516ca2f18aaa33d3e4b03366f3",
      "closedAt": "2022-04-18T18:46:18Z",
      "mergedAt": "2022-04-18T18:46:18Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "8b9482a563779f96165801a4c526a7317c6e89c8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 150,
      "id": "PR_kwDOEpUZs842bzo5",
      "title": "Update group commitment derivation to have a single scalarmul",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/150",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This fixes the derivation of the group commitment so that it requires a single scalar multiplication, as opposed to `t`",
      "createdAt": "2022-04-19T15:28:25Z",
      "updatedAt": "2022-04-25T20:59:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8b9482a563779f96165801a4c526a7317c6e89c8",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "scalarmul",
      "headRefOid": "39bd7a8c128478363076181b882a4f3243a7b0fc",
      "closedAt": "2022-04-25T20:59:24Z",
      "mergedAt": "2022-04-25T20:59:24Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3474ec087a51fbd0e11ec0838233c53ba99e940e"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "> This is good, but let's please also update the reference implementation to match.\r\n\r\nThanks, updated. ",
          "createdAt": "2022-04-24T12:43:53Z",
          "updatedAt": "2022-04-24T12:43:53Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844ZxnU",
          "commit": {
            "abbreviatedOid": "ef41428"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This is good, but let's please also update the reference implementation to match.",
          "createdAt": "2022-04-19T20:50:46Z",
          "updatedAt": "2022-04-19T20:50:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs844xTBe",
          "commit": {
            "abbreviatedOid": "39bd7a8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM!",
          "createdAt": "2022-04-25T20:59:11Z",
          "updatedAt": "2022-04-25T20:59:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 153,
      "id": "PR_kwDOEpUZs842gE9c",
      "title": "Various editorial improvements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/153",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-20T15:45:17Z",
      "updatedAt": "2022-04-27T15:31:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8b9482a563779f96165801a4c526a7317c6e89c8",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/edits",
      "headRefOid": "f932e268848fb6860c15a2939490062c2194fc99",
      "closedAt": "2022-04-27T15:31:50Z",
      "mergedAt": "2022-04-27T15:31:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b3063a8b7a66bce22545b4398b698a4debede4db"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "We received feedback that the definition of G as an abstract data type as opposed to a mathematical group should be made more clear, so we need to do that. If you don't want to add `G` in front of each function, then please add some more text clarifying that `G` is more than the mathematical type. ",
          "createdAt": "2022-04-25T14:13:43Z",
          "updatedAt": "2022-04-25T14:13:43Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> We received feedback that the definition of G as an abstract data type as opposed to a mathematical group should be made more clear, so we need to do that. If you don't want to add G in front of each function, then please add some more text clarifying that G is more than the mathematical type.\r\n\r\nI think the text is quite clear as-is, so I think the feedback has been adequately addressed. I would prefer we not hold up this PR on something that can be addressed in subsequent changes. \r\n",
          "createdAt": "2022-04-25T20:05:48Z",
          "updatedAt": "2022-04-25T20:05:48Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Opened #155 and assigned it to myself, let's merge in these editorial changes so they are not blocked on a nit. \r\n",
          "createdAt": "2022-04-26T20:25:02Z",
          "updatedAt": "2022-04-26T20:25:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @chelseakomlo!",
          "createdAt": "2022-04-27T15:31:58Z",
          "updatedAt": "2022-04-27T15:31:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844vHEB",
          "commit": {
            "abbreviatedOid": "f932e26"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This looks good but we should have something that clarifies where the functions on `G` come from.",
          "createdAt": "2022-04-25T13:35:18Z",
          "updatedAt": "2022-04-25T13:42:56Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Adding the `G` in front is meant to clarify questions later on as to where these functions are from? ",
              "createdAt": "2022-04-25T13:35:18Z",
              "updatedAt": "2022-04-25T13:42:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs844vLaM",
          "commit": {
            "abbreviatedOid": "f932e26"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-25T13:46:06Z",
          "updatedAt": "2022-04-25T13:46:06Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "The sentence right before this list says all functions are member functions on G, so I don't think this is necessary.",
              "createdAt": "2022-04-25T13:46:06Z",
              "updatedAt": "2022-04-25T13:46:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs844vHEC",
          "commit": {
            "abbreviatedOid": "f932e26"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, with the TODO moved to a separate issue.",
          "createdAt": "2022-04-25T13:35:18Z",
          "updatedAt": "2022-04-26T20:26:05Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Adding the `G` in front is meant to clarify questions later on as to where these functions are from? ",
              "createdAt": "2022-04-25T13:35:18Z",
              "updatedAt": "2022-04-26T20:26:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 154,
      "id": "PR_kwDOEpUZs842jWjU",
      "title": "Bump divergentdave/i-d-template from 1.pre.alpha to 1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/154",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [divergentdave/i-d-template](https://github.com/divergentdave/i-d-template) from 1.pre.alpha to 1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/cdd0b6a57dc10006d8937595df9c78805270d41c\"><code>cdd0b6a</code></a> Damned quoting</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/aa32825d42c99ef0eb7d40513379396f5af561ee\"><code>aa32825</code></a> Use the token parameter</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/254f51daf48ceeda1979d579623f0e8c4f7e24ad\"><code>254f51d</code></a> Add a token input</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/abef2738de24bb021767bf873fe38bc002a668e0\"><code>abef273</code></a> Use a bearer token perhaps</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/744378076cc320c5e3ee378ed98fe8505debaa74\"><code>7443780</code></a> Don't look at HEAD for the default branch except as a last resort</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/28d6fa2f417c08e523347d583daff889d0ceadfc\"><code>28d6fa2</code></a> Lint first</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/b39ca039bd0eb35ec2ae8037a913c7af609d0892\"><code>b39ca03</code></a> Only match draft-<em>.txt and rfc</em>.txt</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/1348df4597e7b98c8b2bdb93692860b61258c977\"><code>1348df4</code></a> Remove build-index-md.sh</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/6acfe554c3f534202ef8398ca98fb411c000ccd6\"><code>6acfe55</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/divergentdave/i-d-template/issues/248\">#248</a> from martinthomson/mnot-index-md</li>\n<li><a href=\"https://github.com/divergentdave/i-d-template/commit/1d562b8f8b2f2cec602687b1902ab55561b61b3c\"><code>1d562b8</code></a> Merge branch 'main' into mnot-index-md</li>\n<li>Additional commits viewable in <a href=\"https://github.com/divergentdave/i-d-template/compare/v1-alpha...v1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=divergentdave/i-d-template&package-manager=github_actions&previous-version=1.pre.alpha&new-version=1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-04-21T11:29:32Z",
      "updatedAt": "2022-05-09T22:26:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "8b9482a563779f96165801a4c526a7317c6e89c8",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/divergentdave/i-d-template-1",
      "headRefOid": "701317c69b8880dba7fa15792c7879fbe172ef09",
      "closedAt": "2022-05-09T22:26:01Z",
      "mergedAt": "2022-05-09T22:26:01Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "4f431b1495173d740b894c3520cb67f389c85279"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "`martinthomson` has merged the fix but not published or tagged a new release yet, so we can stay on the fork for now",
          "createdAt": "2022-05-09T22:26:47Z",
          "updatedAt": "2022-05-09T22:26:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs844n1vW",
          "commit": {
            "abbreviatedOid": "701317c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-22T11:43:18Z",
          "updatedAt": "2022-04-22T11:43:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs845oZsd",
          "commit": {
            "abbreviatedOid": "701317c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-09T22:25:02Z",
          "updatedAt": "2022-05-09T22:25:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 156,
      "id": "PR_kwDOEpUZs84209nh",
      "title": "Remove wire format section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/156",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Applications that embed FROST will need to decide how to encode things, so doing anything here doesn't add much value. Note that this follows the. HPKE convention of specifying the protocol construction but deferring application embeddings to other specifications.",
      "createdAt": "2022-04-26T20:35:46Z",
      "updatedAt": "2022-04-27T21:19:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b3063a8b7a66bce22545b4398b698a4debede4db",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-1",
      "headRefOid": "db2f2f410ca27a36013a90ba31c29112691fd8cf",
      "closedAt": "2022-04-27T21:19:14Z",
      "mergedAt": "2022-04-27T21:19:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c2d80b2a9c56a07223810612816d1484c52c3543"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8448d55",
          "commit": {
            "abbreviatedOid": "9ec2c45"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGMT, thanks @chris-wood ",
          "createdAt": "2022-04-27T18:35:51Z",
          "updatedAt": "2022-04-27T18:35:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 158,
      "id": "PR_kwDOEpUZs8421zM0",
      "title": "Validate signature *shares*",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/158",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... not signatures!",
      "createdAt": "2022-04-27T02:32:40Z",
      "updatedAt": "2022-04-27T04:04:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3474ec087a51fbd0e11ec0838233c53ba99e940e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "chris-wood-patch-2",
      "headRefOid": "346511b0cf3572efac4cc2d24b50cd3c32476d2b",
      "closedAt": "2022-04-27T04:04:41Z",
      "mergedAt": "2022-04-27T04:04:41Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "0abaef98d34cbc26119197814ae7896971e58b9a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8444S-Y",
          "commit": {
            "abbreviatedOid": "346511b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-27T04:04:34Z",
          "updatedAt": "2022-04-27T04:04:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 162,
      "id": "PR_kwDOEpUZs843PRhk",
      "title": "Add additional language for group and data types",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/162",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #155 ",
      "createdAt": "2022-05-03T16:16:06Z",
      "updatedAt": "2022-05-09T22:17:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c2d80b2a9c56a07223810612816d1484c52c3543",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "member-functions",
      "headRefOid": "5f051eb3bb2ec30a68a189d71c5f147290a1ef7b",
      "closedAt": "2022-05-03T17:56:04Z",
      "mergedAt": "2022-05-03T17:56:04Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "765c999b68a51728a93cd9f026f009c8eced2d91"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @chris-wood ! ",
          "createdAt": "2022-05-03T17:55:51Z",
          "updatedAt": "2022-05-03T17:55:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845QuBd",
          "commit": {
            "abbreviatedOid": "19f4976"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM!",
          "createdAt": "2022-05-03T16:49:43Z",
          "updatedAt": "2022-05-03T16:49:49Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\ngroup as the object `G` that additionally defines helper functions described below. The group operation\n```\n",
              "createdAt": "2022-05-03T16:49:43Z",
              "updatedAt": "2022-05-03T16:49:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs845RFQs",
          "commit": {
            "abbreviatedOid": "5f051eb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-03T18:06:42Z",
          "updatedAt": "2022-05-03T18:06:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs845oYe0",
          "commit": {
            "abbreviatedOid": "5f051eb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-05-09T22:17:01Z",
          "updatedAt": "2022-05-09T22:17:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 163,
      "id": "PR_kwDOEpUZs843bfyj",
      "title": "Assert that the network channel used for signing should be authenticated",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/163",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "While fewer than `t` misbehaving players cannot do anything other than cause a DOS attack during signing, implementations should be able to identify which players misbehaved. This asserts that the network channel used during signing should be authenticated and reliable, but is allowed to be public. ",
      "createdAt": "2022-05-06T18:04:03Z",
      "updatedAt": "2022-05-09T17:10:18Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "765c999b68a51728a93cd9f026f009c8eced2d91",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "authenticated-channel",
      "headRefOid": "fbe12ce41a8a77ca6f344a1ba4220fb34053c541",
      "closedAt": "2022-05-09T17:10:15Z",
      "mergedAt": "2022-05-09T17:10:15Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "09c66e0c9895e5cf63d78c85df0a5f34d92f1440"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845ia_F",
          "commit": {
            "abbreviatedOid": "b15294e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-07T11:51:42Z",
          "updatedAt": "2022-05-07T11:53:58Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nwe assume that the network channel is additionally authenticated; confidentiality is not required.\r\n```",
              "createdAt": "2022-05-07T11:51:43Z",
              "updatedAt": "2022-05-07T11:53:58Z"
            },
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n```\r\n\r\nI don't think a new header is necessary here.",
              "createdAt": "2022-05-07T11:53:09Z",
              "updatedAt": "2022-05-07T11:53:58Z"
            },
            {
              "originalPosition": 11,
              "body": "We probably should repeat this in the security considerations section, but that can happen separately.",
              "createdAt": "2022-05-07T11:53:52Z",
              "updatedAt": "2022-05-07T11:53:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 165,
      "id": "PR_kwDOEpUZs843hRSt",
      "title": "Clarify types of NUM_SIGNERS and THRESHOLD_LIMIT",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/165",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #144",
      "createdAt": "2022-05-09T17:43:52Z",
      "updatedAt": "2022-05-09T18:00:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "09c66e0c9895e5cf63d78c85df0a5f34d92f1440",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "clarify-types",
      "headRefOid": "e893c24fc7421a26fdecfa676ef9f7cd35ea4834",
      "closedAt": "2022-05-09T18:00:50Z",
      "mergedAt": "2022-05-09T18:00:50Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "62cdc32b46c8c4478757590786444d64733a46bf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845naLg",
          "commit": {
            "abbreviatedOid": "595ec64"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-09T17:58:17Z",
          "updatedAt": "2022-05-09T17:58:17Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n  This value MUST NOT exceed p.\r\n```",
              "createdAt": "2022-05-09T17:58:17Z",
              "updatedAt": "2022-05-09T17:58:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs845naNW",
          "commit": {
            "abbreviatedOid": "595ec64"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-09T17:58:24Z",
          "updatedAt": "2022-05-09T17:58:24Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n  This value MUST NOT exceed p.\r\n```",
              "createdAt": "2022-05-09T17:58:24Z",
              "updatedAt": "2022-05-09T17:58:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs845naQj",
          "commit": {
            "abbreviatedOid": "595ec64"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM pending suggestions.",
          "createdAt": "2022-05-09T17:58:33Z",
          "updatedAt": "2022-05-09T17:58:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 166,
      "id": "PR_kwDOEpUZs843hUAP",
      "title": "Specify what the dealer is trusted to do",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/166",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #159",
      "createdAt": "2022-05-09T17:58:27Z",
      "updatedAt": "2022-05-09T22:24:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "09c66e0c9895e5cf63d78c85df0a5f34d92f1440",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "trusted-dealer-threat-mdoel",
      "headRefOid": "61770b3a7eb6a2e70d602fb9cad2e73a03e93100",
      "closedAt": "2022-05-09T21:01:41Z",
      "mergedAt": "2022-05-09T21:01:41Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "5ac520ff5ab33d0200b31ff76b73c2e22bc98a9a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845nxf8",
          "commit": {
            "abbreviatedOid": "61770b3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-09T19:24:48Z",
          "updatedAt": "2022-05-09T19:24:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs845oZiz",
          "commit": {
            "abbreviatedOid": "61770b3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "\ud83d\udc4d",
          "createdAt": "2022-05-09T22:24:00Z",
          "updatedAt": "2022-05-09T22:24:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 167,
      "id": "PR_kwDOEpUZs8430NKv",
      "title": "Change participant index terminology to identifier",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/167",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #142",
      "createdAt": "2022-05-14T03:01:49Z",
      "updatedAt": "2022-05-14T17:16:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f431b1495173d740b894c3520cb67f389c85279",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "identifier",
      "headRefOid": "79ce8f1cd9b26577c1eb3babdf36ce835861b7ee",
      "closedAt": "2022-05-14T17:16:31Z",
      "mergedAt": "2022-05-14T17:16:31Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "da54ae29e42105f99d2332d733c152748b0eda30"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845_u1k",
          "commit": {
            "abbreviatedOid": "4205000"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-14T11:37:24Z",
          "updatedAt": "2022-05-14T11:38:09Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n- Add additional constraints on participant indexes and nonce usage (#105, #103, #98, #97).\r\n```\r\nWe probably shouldn't update this one since it's the change log.",
              "createdAt": "2022-05-14T11:37:41Z",
              "updatedAt": "2022-05-14T11:38:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 168,
      "id": "PR_kwDOEpUZs8430PQT",
      "title": "Specify ordering of polynomial",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/168",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-14T03:29:23Z",
      "updatedAt": "2022-05-14T15:13:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f431b1495173d740b894c3520cb67f389c85279",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "coeff-vec",
      "headRefOid": "0ea7f096320038e800b9c4cd9dc494a0f8f889d2",
      "closedAt": "2022-05-14T15:13:52Z",
      "mergedAt": "2022-05-14T15:13:52Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "35125c31b28f1d63c94e7f319293629a5bb9a832"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845_u0l",
          "commit": {
            "abbreviatedOid": "401b018"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-14T11:36:43Z",
          "updatedAt": "2022-05-14T11:36:46Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nis in the first position and the highest-degree coefficient is in the last position. \r\n```",
              "createdAt": "2022-05-14T11:36:43Z",
              "updatedAt": "2022-05-14T11:36:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 169,
      "id": "PR_kwDOEpUZs8430Pwx",
      "title": "Clarify Lagrange function",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/169",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-14T03:40:26Z",
      "updatedAt": "2022-05-14T15:14:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "4f431b1495173d740b894c3520cb67f389c85279",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "lagrange",
      "headRefOid": "2644bc8f2d45aa5423452142168ca1a239613b09",
      "closedAt": "2022-05-14T15:14:26Z",
      "mergedAt": "2022-05-14T15:14:26Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "e4f0aee154c8041c2a4a52c403378821af576c2e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs845_uzp",
          "commit": {
            "abbreviatedOid": "ac76519"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-14T11:35:45Z",
          "updatedAt": "2022-05-14T11:35:50Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n`f` at point 0, i.e., `f(0)`, given a set of `t` other points.\r\n```",
              "createdAt": "2022-05-14T11:35:45Z",
              "updatedAt": "2022-05-14T11:35:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 170,
      "id": "PR_kwDOEpUZs8432LHD",
      "title": "Clarify lagrange terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/170",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-16T02:10:00Z",
      "updatedAt": "2022-05-16T15:34:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "da54ae29e42105f99d2332d733c152748b0eda30",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "clarify-degree",
      "headRefOid": "95d0d2a0a7a1aa89f5df76ea5f30d781ff0bdb8d",
      "closedAt": "2022-05-16T15:34:24Z",
      "mergedAt": "2022-05-16T15:34:24Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "51fa62de8de6f66052a1f493572ac423f86bc9da"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846A_jY",
          "commit": {
            "abbreviatedOid": "95d0d2a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-16T02:17:40Z",
          "updatedAt": "2022-05-16T02:17:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 171,
      "id": "PR_kwDOEpUZs8436O-4",
      "title": "Use THRESHOLD_LIMIT instead of t and MAX_SIGNERS instead of n",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/171",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-16T21:17:42Z",
      "updatedAt": "2022-05-17T19:45:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "51fa62de8de6f66052a1f493572ac423f86bc9da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "consistent-threshold-limit",
      "headRefOid": "0bb6418c073edbd0ec94f49a01e7c819daf32d17",
      "closedAt": "2022-05-17T19:45:47Z",
      "mergedAt": "2022-05-17T19:45:46Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "ba36b41d74403ffdb0547f73e45da6223af8aee6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846GF4T",
          "commit": {
            "abbreviatedOid": "344aed7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This seems partially done. For consistency, if we're going to use `THRESHOLD_LIMIT` everywhere instead of `t`, then I think we ought to also use `MAX_SIGNERS` everywhere instead of `n`.",
          "createdAt": "2022-05-16T23:40:26Z",
          "updatedAt": "2022-05-16T23:40:59Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Should we also use `MAX_SIGNERS` instead of `n` everywhere? ",
              "createdAt": "2022-05-16T23:40:26Z",
              "updatedAt": "2022-05-16T23:40:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846GiJY",
          "commit": {
            "abbreviatedOid": "344aed7"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T03:42:14Z",
          "updatedAt": "2022-05-17T03:42:14Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Sure, good idea. ",
              "createdAt": "2022-05-17T03:42:14Z",
              "updatedAt": "2022-05-17T03:42:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846Jj_3",
          "commit": {
            "abbreviatedOid": "344aed7"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T14:29:56Z",
          "updatedAt": "2022-05-17T14:29:57Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "@chris-wood fixed. ",
              "createdAt": "2022-05-17T14:29:57Z",
              "updatedAt": "2022-05-17T14:29:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846KoR7",
          "commit": {
            "abbreviatedOid": "0bb6418"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-17T17:40:33Z",
          "updatedAt": "2022-05-17T17:40:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 172,
      "id": "PR_kwDOEpUZs8436QX1",
      "title": "Allow for t=1, if desired by implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/172",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-16T21:23:44Z",
      "updatedAt": "2022-05-17T17:33:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "51fa62de8de6f66052a1f493572ac423f86bc9da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "threshold-one",
      "headRefOid": "dcfc75e4520be8cb4e0c4596726406f26df0c304",
      "closedAt": "2022-05-17T17:33:25Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "After discussion with @dconnolly, we agree with @chris-wood and decided to not merge this. ",
          "createdAt": "2022-05-17T17:33:25Z",
          "updatedAt": "2022-05-17T17:33:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846GF0U",
          "commit": {
            "abbreviatedOid": "dcfc75e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Hmm, I'm not sure about this one. I think we ought to continue requiring t >= 2, as otherwise there's no benefit to the function. ",
          "createdAt": "2022-05-16T23:39:53Z",
          "updatedAt": "2022-05-16T23:39:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 174,
      "id": "PR_kwDOEpUZs8437OCu",
      "title": "Clarify VSS description, add MUST for view of VSS commitment",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/174",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T03:51:00Z",
      "updatedAt": "2022-05-19T16:13:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "51fa62de8de6f66052a1f493572ac423f86bc9da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "clarify-vss",
      "headRefOid": "ac79e507edac657be6e6b6c0058892ca5ed0f9ac",
      "closedAt": "2022-05-19T16:13:20Z",
      "mergedAt": "2022-05-19T16:13:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "61b7a5c6234a4b432a667d986b0695cfd8ffb794"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846IIZU",
          "commit": {
            "abbreviatedOid": "3fd7a4b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Mostly reverts.",
          "createdAt": "2022-05-17T10:15:07Z",
          "updatedAt": "2022-05-17T10:16:45Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This change will conflict with the other one in flight, so I'd revert it.",
              "createdAt": "2022-05-17T10:15:07Z",
              "updatedAt": "2022-05-17T10:16:45Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n  - vss_commitment, a vector commitment of `Element`s in `G`, to each of the coefficients in the polynomial defined by secret_key_shares and whose constant term is G.ScalarBaseMult(s).\r\n```",
              "createdAt": "2022-05-17T10:16:00Z",
              "updatedAt": "2022-05-17T10:16:45Z"
            },
            {
              "originalPosition": 23,
              "body": "If we're going to use normative language here, then we need to describe what happens or should happen when this isn't met. I'd revert this, too.",
              "createdAt": "2022-05-17T10:16:35Z",
              "updatedAt": "2022-05-17T10:16:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846KnfX",
          "commit": {
            "abbreviatedOid": "3fd7a4b"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T17:37:49Z",
          "updatedAt": "2022-05-17T17:37:49Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "After discussion with @dconnolly, we can just add \"MUST abort if they do not have the same view of `C`\" ",
              "createdAt": "2022-05-17T17:37:49Z",
              "updatedAt": "2022-05-17T17:37:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846WFy2",
          "commit": {
            "abbreviatedOid": "ac79e50"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-19T16:12:57Z",
          "updatedAt": "2022-05-19T16:12:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 175,
      "id": "PR_kwDOEpUZs8437Q_5",
      "title": "Consistent function naming and fix up old comments",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/175",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T04:12:25Z",
      "updatedAt": "2022-05-17T10:14:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "51fa62de8de6f66052a1f493572ac423f86bc9da",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-up-comments",
      "headRefOid": "8002b8ea6624418b12b73db0f9f137082dfbc199",
      "closedAt": "2022-05-17T10:14:31Z",
      "mergedAt": "2022-05-17T10:14:31Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1780cb4eef8bcd4808697793617dd4b4efeb7c57"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846IINP",
          "commit": {
            "abbreviatedOid": "8002b8e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-17T10:14:27Z",
          "updatedAt": "2022-05-17T10:14:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 176,
      "id": "PR_kwDOEpUZs8437Ww_",
      "title": "Update number of assumed corrupted",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/176",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T04:50:15Z",
      "updatedAt": "2022-05-20T22:35:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "19158a9d4f77a3a79de3182332b31037a233c257",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "unforg-t",
      "headRefOid": "0c8ee749fd810120cdadf1298484b8713dc86178",
      "closedAt": "2022-05-20T22:35:36Z",
      "mergedAt": "2022-05-20T22:35:36Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "ac27238a056c88e0774a2c32a4f29846164d17b1"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Cited EUF-CMA definition from Boneh/Shoup, so closing. ",
          "createdAt": "2022-05-20T22:35:31Z",
          "updatedAt": "2022-05-20T22:35:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846IICz",
          "commit": {
            "abbreviatedOid": "45c20f6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-17T10:13:55Z",
          "updatedAt": "2022-05-17T10:13:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs846IIIR",
          "commit": {
            "abbreviatedOid": "45c20f6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T10:14:11Z",
          "updatedAt": "2022-05-17T10:14:12Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Can we also drop a citation to EUF-CMA security while we're at it?",
              "createdAt": "2022-05-17T10:14:12Z",
              "updatedAt": "2022-05-17T10:14:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846IyN-",
          "commit": {
            "abbreviatedOid": "45c20f6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T12:31:08Z",
          "updatedAt": "2022-05-17T12:31:08Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Is there one you had in mind? Otherwise I'll just cite Boneh/Shoup, I guess. ",
              "createdAt": "2022-05-17T12:31:08Z",
              "updatedAt": "2022-05-17T12:31:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846KlkB",
          "commit": {
            "abbreviatedOid": "45c20f6"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-17T17:30:47Z",
          "updatedAt": "2022-05-17T17:30:47Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n* Unforgeability assuming at most `(t-1)` corrupted signers. So long as an adversary\r\n```",
              "createdAt": "2022-05-17T17:30:47Z",
              "updatedAt": "2022-05-17T17:30:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 177,
      "id": "PR_kwDOEpUZs843-x9k",
      "title": "Various editorial improvements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/177",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T19:40:49Z",
      "updatedAt": "2022-05-18T17:01:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ba36b41d74403ffdb0547f73e45da6223af8aee6",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "hashes",
      "headRefOid": "4b0111de7e088e7ea080485aba2c4650bcd93971",
      "closedAt": "2022-05-18T17:01:45Z",
      "mergedAt": "2022-05-18T17:01:45Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "0f8a8dc8c84bc6951d2ef9ed2adb8d9126346d8a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846Pig6",
          "commit": {
            "abbreviatedOid": "27bc957"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-18T15:12:22Z",
          "updatedAt": "2022-05-18T15:12:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 178,
      "id": "PR_kwDOEpUZs843-0MG",
      "title": "Add more specific information about participant identifiers",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/178",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-17T19:51:08Z",
      "updatedAt": "2022-05-20T22:24:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ba36b41d74403ffdb0547f73e45da6223af8aee6",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "signer-index",
      "headRefOid": "bf767eac7de2c6af149dcbc80e380b83fbf6efdc",
      "closedAt": "2022-05-20T22:24:20Z",
      "mergedAt": "2022-05-20T22:24:20Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "19158a9d4f77a3a79de3182332b31037a233c257"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging in as this addresses @chris-wood's review. ",
          "createdAt": "2022-05-20T22:23:56Z",
          "updatedAt": "2022-05-20T22:23:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846PiLH",
          "commit": {
            "abbreviatedOid": "a6fe83b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Suggest relocating this text to somewhere else, but otherwise LGTM.",
          "createdAt": "2022-05-18T15:11:32Z",
          "updatedAt": "2022-05-18T15:11:45Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I would move this to the start of section 5, where we first start talking about participants (outside of this terminology list).",
              "createdAt": "2022-05-18T15:11:32Z",
              "updatedAt": "2022-05-18T15:11:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846RRVA",
          "commit": {
            "abbreviatedOid": "a6fe83b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-18T20:34:56Z",
          "updatedAt": "2022-05-18T20:34:56Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I'm cool with it in either location",
              "createdAt": "2022-05-18T20:34:56Z",
              "updatedAt": "2022-05-18T20:34:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dHJN",
          "commit": {
            "abbreviatedOid": "a6fe83b"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T22:23:19Z",
          "updatedAt": "2022-05-20T22:23:19Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Done",
              "createdAt": "2022-05-20T22:23:19Z",
              "updatedAt": "2022-05-20T22:23:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 179,
      "id": "PR_kwDOEpUZs843-1jN",
      "title": "Require SerializeElement to fail if the Element is the identity element; Add specific Serialize functions for public keys",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/179",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need to specify different serialization/deserialization functions for public keys, which are allowed to be the identity element. ",
      "createdAt": "2022-05-17T19:58:34Z",
      "updatedAt": "2022-05-27T12:21:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ba36b41d74403ffdb0547f73e45da6223af8aee6",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "serializeelem",
      "headRefOid": "cb2266923e88f8a84c9aa7d875bac53e9deff8b8",
      "closedAt": "2022-05-27T12:21:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> We need to specify different serialization/deserialization functions for public keys, which are allowed to be the identity element.\r\n\r\nWhy do we allow public keys to be the identity element?",
          "createdAt": "2022-05-18T11:20:38Z",
          "updatedAt": "2022-05-18T11:20:38Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "So that sampling the secret key occurs from the full distribution. ",
          "createdAt": "2022-05-18T14:07:56Z",
          "updatedAt": "2022-05-18T14:07:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> So that sampling the secret key occurs from the full distribution.\r\n\r\nWell, in principle that's nice, but if the public key is the identity element then the secret key is known. I think there's nothing to be gained from permitting this value, so I'm opposed to this change.",
          "createdAt": "2022-05-18T14:09:31Z",
          "updatedAt": "2022-05-18T14:09:31Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Can you point to other standards that sample secret key material from the distribution that excludes the zero element? \r\n\r\nFrom what I can tell, RFC 8032 does not exclude zero from being the value of the secret key (although it is unlikely). https://datatracker.ietf.org/doc/html/rfc8032#section-5.1.5\r\n\r\n\r\n",
          "createdAt": "2022-05-18T14:27:08Z",
          "updatedAt": "2022-05-18T14:28:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Certainly! [ECDSA key generation](https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.186-4.pdf) (appendix B.4), for example, omits the zero key. \r\n\r\n> From what I can tell, RFC 8032 does not exclude zero from being the value of the secret key (although it is unlikely). https://datatracker.ietf.org/doc/html/rfc8032#section-5.1.5\r\n\r\nThis isn't quite the same. RFC 8032 doesn't permit the _seed_ from being all zeroes, but doesn't say anything about the resulting scalar (the seed is hashed with some other stuff to get the scalar). We don't specify key generation for FROST because it's somewhat out of scope.\r\n\r\nIf we do anything here, I'd recommend saying that the secret key split by the dealer must not be 0. We're not really very precise with how that secret is generated.",
          "createdAt": "2022-05-18T14:43:22Z",
          "updatedAt": "2022-05-18T14:43:22Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "To use these signatures as binding signatures the identity _must_ be permitted as a valid verification key (public key) to ensure it satisfies the definition of a key monomorphism. We want the distribution of signing keys (secret keys) to be uniform and identical as well.\r\n\r\nWhen signatures like these are used in higher-order protocols like Zcash, the rejection of 0's as secret keys or the identity as public keys is done at the _protocol_ level, not as part of the signature scheme, to preserve these uniform distribution properties.\r\n\r\nIn either way, I think similar to our `RandomNonZeroScalar` and `RandomScalar` functions, we could specify `SerializeNonIdentityElement` and `DeserializeNonIdentityElement` for use when serializing/deserializing the nonce commitments and the polynomial coefficient commitments, which MUST never be zero/their commitments be the identity element (// @chelseakomlo can double-check me on that)",
          "createdAt": "2022-05-18T14:47:01Z",
          "updatedAt": "2022-05-18T14:47:01Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> To use these signatures as binding signatures the identity must be permitted as a valid verification key (public key) to ensure it satisfies the definition of a key monomorphism. We want the distribution of signing keys (secret keys) to be uniform and identical as well.\r\n\r\nIf the identity public key is permitted, then anyone can forge signatures. Would you agree with this?\r\n\r\n> When signatures like these are used in higher-order protocols like Zcash, the rejection of 0's as secret keys or the identity as public keys is done at the protocol level, not as part of the signature scheme, to preserve these uniform distribution properties.\r\n\r\nYes, this is a perfectly fine way to deal with it! We don't specify key generation here, as that's something for the application to deal with. \r\n\r\n> In either way, I think similar to our RandomNonZeroScalar and RandomScalar functions, we could specify SerializeNonIdentityElement and DeserializeNonIdentityElement for use when serializing/deserializing the nonce commitments and the polynomial coefficient commitments, which MUST never be zero/their commitments be the identity element\r\n\r\nI don't see why this would be necessary as those elements are guaranteed to be non-zero by construction. What am I missing?",
          "createdAt": "2022-05-18T14:49:25Z",
          "updatedAt": "2022-05-18T14:51:22Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't see why this would be necessary as those elements are guaranteed to be non-zero by construction. What am I missing?\r\n\r\nIf we're receiving nonce commitments from other parties we should check that they are actually not the identity, if they are we don't use them. This is defense in depth.",
          "createdAt": "2022-05-18T14:54:13Z",
          "updatedAt": "2022-05-18T14:54:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> If we're receiving nonce commitments from other parties we should check that they are actually not the identity, if they are we don't use them. This is defense in depth.\r\n\r\nYes, and we do that already by failing to deserialize the identity.",
          "createdAt": "2022-05-18T14:54:40Z",
          "updatedAt": "2022-05-18T14:54:40Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> > If we're receiving nonce commitments from other parties we should check that they are actually not the identity, if they are we don't use them. This is defense in depth.\r\n> \r\n> Yes, and we do that already by failing to deserialize the identity.\r\n\r\nBut we _should not_ fail to deserialize the identity for public keys, or the final R in the final Schnorr signature / group commitment. Hence a separate function.",
          "createdAt": "2022-05-18T14:55:57Z",
          "updatedAt": "2022-05-18T14:55:57Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> But we should not fail to deserialize the identity for public keys, or the final R in the final Schnorr signature / group commitment. Hence a separate function.\r\n\r\nI'm saying I disagree with this claim, and would like to see a reason why it's needed.",
          "createdAt": "2022-05-18T14:56:28Z",
          "updatedAt": "2022-05-18T14:56:28Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> > But we should not fail to deserialize the identity for public keys, or the final R in the final Schnorr signature / group commitment. Hence a separate function.\r\n> \r\n> I'm saying I disagree with this claim, and would like to see a reason why it's needed.\r\n\r\ntl;dr this scheme is not composable in other protocols that need a uniform distribution of keys to achieve binding. The rejection of zero keys / identity pubkeys can be done as part of keygen, but those kinds of keys must be possible as part of this signature scheme.",
          "createdAt": "2022-05-18T14:58:54Z",
          "updatedAt": "2022-05-18T14:58:54Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's discuss offline.",
          "createdAt": "2022-05-18T14:59:46Z",
          "updatedAt": "2022-05-18T14:59:46Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Naming things debate: `PublicKey` or `VerifyingKey`? \r\n\r\n(this is of course a low priority thing)",
          "createdAt": "2022-05-19T18:07:02Z",
          "updatedAt": "2022-05-19T18:07:02Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "We use public key terminology elsewhere in the draft, so I'm going to stick with that. ",
          "createdAt": "2022-05-19T22:56:51Z",
          "updatedAt": "2022-05-19T22:56:51Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "TODO from discussion with @chris-wood: Define an alias in the helper functions for `SerializePublicKey/DeserializePublicKey` and then define `SerializeNonIdentity/DeserializeNonIdentity` as a function for the group",
          "createdAt": "2022-05-20T15:29:53Z",
          "updatedAt": "2022-05-20T15:29:53Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll spin out a separate issue to include the security considerations.",
          "createdAt": "2022-05-23T17:21:17Z",
          "updatedAt": "2022-05-23T17:21:17Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "TODO: Add deserialization of the group info so that this function is used.",
          "createdAt": "2022-05-25T16:22:17Z",
          "updatedAt": "2022-05-25T16:22:17Z"
        },
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to close this as a won't fix until we have further discussions about which direction to take going forward.",
          "createdAt": "2022-05-27T12:21:13Z",
          "updatedAt": "2022-05-27T12:21:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846V8-U",
          "commit": {
            "abbreviatedOid": "9039f01"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T15:51:25Z",
          "updatedAt": "2022-05-19T15:51:26Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\n```\r\nThis is duplicated from `DesieralizeElement` above.",
              "createdAt": "2022-05-19T15:51:25Z",
              "updatedAt": "2022-05-19T15:51:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846V9TA",
          "commit": {
            "abbreviatedOid": "9039f01"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T15:52:22Z",
          "updatedAt": "2022-05-19T15:52:23Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "@dconnolly's suggestion to make this SerializeNonIdentityElement seems good, so I might make that change here (and similarly for the deserialize function).",
              "createdAt": "2022-05-19T15:52:22Z",
              "updatedAt": "2022-05-19T15:52:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846Wr3W",
          "commit": {
            "abbreviatedOid": "9039f01"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T18:03:52Z",
          "updatedAt": "2022-05-19T18:03:52Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Since the only place where we may allow the identity is pub keys, and all other element serializations in this spec can/should exclude the identity, I have come around to the suggestion of a ciphersuite-defined `*serializePublicKey`\r\n",
              "createdAt": "2022-05-19T18:03:52Z",
              "updatedAt": "2022-05-19T18:03:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846WsaI",
          "commit": {
            "abbreviatedOid": "9039f01"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T18:05:54Z",
          "updatedAt": "2022-05-19T18:05:54Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Signature commitments, nonce commitments, group commitments, all can/should reject the identity, and the only place that MAY not are the public keys (just reviewing the spec just now this appears correct)",
              "createdAt": "2022-05-19T18:05:54Z",
              "updatedAt": "2022-05-19T18:05:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dhld",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Beyond these suggestions, I think we're still missing security considerations for what happens when the identity element is allowed to be the public key.",
          "createdAt": "2022-05-21T11:12:23Z",
          "updatedAt": "2022-05-21T11:21:21Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n- SerializeElement(A): Maps an `Element` `A` to a unique byte array `buf` of fixed length `Ne`.\r\n```",
              "createdAt": "2022-05-21T11:12:23Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n- SerializeNonIdentityElement(A): Maps an `Element` `A` to a unique byte array `buf` of fixed length `Ne`.\r\n  This function will raise a SerializeError if `A` is the identity element of the group.\r\n```",
              "createdAt": "2022-05-21T11:13:04Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-05-21T11:13:39Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 41,
              "body": "This isn't used?",
              "createdAt": "2022-05-21T11:14:42Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nFinally, the protocol in this document uses the function `SerializePublicKey` as an alias for `SerializeElement`. \r\n```",
              "createdAt": "2022-05-21T11:16:14Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 121,
              "body": "This is missing the identity check, right?",
              "createdAt": "2022-05-21T11:16:50Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 151,
              "body": "```suggestion\r\n    This function raises a SerializeError exception if the input is the identity element.\r\n```",
              "createdAt": "2022-05-21T11:18:27Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 133,
              "body": "```suggestion\r\n    This function raises a SerializeError exception if the input is the identity element.\r\n```",
              "createdAt": "2022-05-21T11:18:41Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 120,
              "body": "```suggestion\r\n  - SerializeNonIdentityElement: Implemented using the 'Encode' function from {{!RISTRETTO}}.\r\n     This function raises a SerializeError exception if the input is the identity element.\r\n```",
              "createdAt": "2022-05-21T11:18:56Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            },
            {
              "originalPosition": 107,
              "body": "```suggestion\r\n    This function raises a SerializeError exception if the input is the identity element.\r\n```",
              "createdAt": "2022-05-21T11:19:05Z",
              "updatedAt": "2022-05-21T11:21:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwzn",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:05:44Z",
          "updatedAt": "2022-05-21T22:05:44Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-05-21T22:05:44Z",
              "updatedAt": "2022-05-21T22:05:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dw18",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:09:17Z",
          "updatedAt": "2022-05-21T22:09:17Z",
          "comments": [
            {
              "originalPosition": 168,
              "body": "The P256 thing excludes the point at infinity, which is usually the identity. Is there a way to exclude the identity for this version of P256 at all?",
              "createdAt": "2022-05-21T22:09:17Z",
              "updatedAt": "2022-05-21T22:09:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846g6rt",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-23T12:48:09Z",
          "updatedAt": "2022-05-23T12:48:10Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "You don't think we should define it, for symmetry? ",
              "createdAt": "2022-05-23T12:48:09Z",
              "updatedAt": "2022-05-23T12:48:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846h6cr",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-23T15:25:04Z",
          "updatedAt": "2022-05-23T15:25:04Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "My take is that if it's not used it shouldn't be included, like any dead code. ",
              "createdAt": "2022-05-23T15:25:04Z",
              "updatedAt": "2022-05-23T15:25:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846idoK",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-23T17:10:13Z",
          "updatedAt": "2022-05-23T17:10:13Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Per a conversation with @dconnolly , it is currently being used implicitly when receiving as input the group info. We agreed to make this step explicit, and to keep `DeserializePublicKey`. ",
              "createdAt": "2022-05-23T17:10:13Z",
              "updatedAt": "2022-05-23T17:10:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846t63q",
          "commit": {
            "abbreviatedOid": "88468e2"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-25T16:16:07Z",
          "updatedAt": "2022-05-25T16:16:07Z",
          "comments": [
            {
              "originalPosition": 168,
              "body": "P256 is a group, which requires inclusion of the identity element. ",
              "createdAt": "2022-05-25T16:16:07Z",
              "updatedAt": "2022-05-25T16:16:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 181,
      "id": "PR_kwDOEpUZs844Ioi4",
      "title": "Add `DeserializeNonIdentityElement` and`SerializeNonIdentityElement`",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/181",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- [ ] TODO: double-check the P256 decoding algorithm we reference\r\n- [ ] TODO: add section in appendix that explicitly allows final group pubkeys to be the full uniform distribution of the group including the identity,  to support key rerandomization applications, but to note that where this is deployed in practice, low-order pubkeys (including the identity) are rejected at other locations in protocol composition (but not in the _signing_ and _verifying_ subroutines)",
      "createdAt": "2022-05-19T16:54:20Z",
      "updatedAt": "2022-05-19T17:59:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "serializeelem",
      "baseRefOid": "9039f013fc3163f39ac55b78975baa7ac5075b8a",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "erialize-elements-identity",
      "headRefOid": "f431f9132c1805294eda5da076f81aadaf5f6a4b",
      "closedAt": "2022-05-19T17:59:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> * [ ]  TODO: double-check the P256 decoding algorithm we reference\r\n\r\n@chris-wood if you have a chance can you help clarify this?",
          "createdAt": "2022-05-19T17:18:48Z",
          "updatedAt": "2022-05-19T17:18:48Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "NEVERMIND going with @chelseakomlo 's original. All places _except public keys_ must reject the identity",
          "createdAt": "2022-05-19T17:57:18Z",
          "updatedAt": "2022-05-19T17:57:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846WZyT",
          "commit": {
            "abbreviatedOid": "0058387"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T17:15:46Z",
          "updatedAt": "2022-05-19T17:15:46Z",
          "comments": [
            {
              "originalPosition": 111,
              "body": "```suggestion\r\n  - SerializeNonIdentityElement: Implemented using the compressed Elliptic-Curve-Point-to-Octet-String\r\n    method according to {{SECG}}.  Additionally, this function validates that the element is not the group identity element.\r\n```",
              "createdAt": "2022-05-19T17:15:46Z",
              "updatedAt": "2022-05-19T17:15:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 182,
      "id": "PR_kwDOEpUZs844MWmY",
      "title": "Add `nonce_generate()` functions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/182",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I am uncomfortable creating subroutine definitions that allow passing in randomness, it screams \"give me [0u8; 32]\". So these functions have randomness sampling internal. \r\n\r\nOne has the `secret_share` (or should it just be `secret_key`, so this can be used in the singleton subroutines?), and the other does not. It 'calls' `H` directly, instead of adding another parameterized hash function to the ciphersuites. I have not update the nonce generation in the rest of the subroutines to use these yet, because of these kinda API questions.\r\n\r\nThoughts? ",
      "createdAt": "2022-05-20T14:01:44Z",
      "updatedAt": "2022-05-27T11:29:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "748f495741f2e3e9dbffa8e50ad5e995d38d2206",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "161",
      "headRefOid": "db579ef25707727193b812c21f5af4eed4910967",
      "closedAt": "2022-05-27T11:29:55Z",
      "mergedAt": "2022-05-27T11:29:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9863d3d394a524a0ddd47f0de196c4739594c3c9"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> If we're going to _always_ call nonce_generate with randomness, then let's just drop the variant that takes no randomness as input. It's just dead code at this point.\n\nOh yes definitely, I meant to remove the old one",
          "createdAt": "2022-05-20T21:09:54Z",
          "updatedAt": "2022-05-20T21:09:54Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> Looking for two changes:\r\n> \r\n> 1. Apply the editorial suggestion to remove \"in GF(p)\".\r\n> 2. Add this to the PoC (this can happen separately if we file an issue for it).\r\n\r\nOK including POC updates in this PR",
          "createdAt": "2022-05-23T17:24:24Z",
          "updatedAt": "2022-05-23T17:24:24Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Looking for two changes:\n> > \n> > 1. Apply the editorial suggestion to remove \"in GF(p)\".\n> > 2. Add this to the PoC (this can happen separately if we file an issue for it).\n> \n> OK including POC updates in this PR\n\nDone",
          "createdAt": "2022-05-24T15:08:48Z",
          "updatedAt": "2022-05-24T15:08:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846bEo3",
          "commit": {
            "abbreviatedOid": "91f25fa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T14:07:45Z",
          "updatedAt": "2022-05-20T14:10:38Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n  - secret_share, a Scalar\r\n```\r\n\r\nAlso, why is this called `secret_share`, and why does it need to be a Scalar? Can't it just be random bytes?",
              "createdAt": "2022-05-20T14:07:45Z",
              "updatedAt": "2022-05-20T14:10:38Z"
            },
            {
              "originalPosition": 42,
              "body": "```suggestion\r\n    hash_input = contextString || \"nonce\" || secret_share_enc || k_enc\r\n```\r\n\r\n... presumably?",
              "createdAt": "2022-05-20T14:08:10Z",
              "updatedAt": "2022-05-20T14:10:38Z"
            },
            {
              "originalPosition": 45,
              "body": "Since `DeserializeScalar` is fallible, I'd recommend we just do this:\r\n\r\n```\r\ndef nonce_generate(random_bytes):\r\n   k = G.RandomNonzeroScalar()\r\n   k_enc = G.SerializeScalar(k)\r\n   return H4(k_enc || random_bytes) \r\n```\r\n\r\nand then define `H4` _exactly_ as we do for H1 and H2, just with a different domain separator. ",
              "createdAt": "2022-05-20T14:10:35Z",
              "updatedAt": "2022-05-20T14:21:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846bGeW",
          "commit": {
            "abbreviatedOid": "91f25fa"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T14:12:52Z",
          "updatedAt": "2022-05-20T14:12:52Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "So we can do that even if it's 'optional'? (Optional because this was not part of the security proof)",
              "createdAt": "2022-05-20T14:12:52Z",
              "updatedAt": "2022-05-20T14:12:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846bG1M",
          "commit": {
            "abbreviatedOid": "91f25fa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T14:13:49Z",
          "updatedAt": "2022-05-20T14:13:49Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "~Also, as this function doesn't _sample_ any randomness, I might call it `nonce_derive` (or `derive_nonce`).~\r\n\r\nI overlooked the first line -- oops -- disregard this comment!",
              "createdAt": "2022-05-20T14:13:49Z",
              "updatedAt": "2022-05-20T14:22:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846bVE6",
          "commit": {
            "abbreviatedOid": "7d2644d"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T14:49:01Z",
          "updatedAt": "2022-05-20T14:49:02Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "This is to perform `H(randomness, sk_i)` so I agree with @dconnolly's naming",
              "createdAt": "2022-05-20T14:49:02Z",
              "updatedAt": "2022-05-20T14:49:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846cASB",
          "commit": {
            "abbreviatedOid": "7d2644d"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T16:45:06Z",
          "updatedAt": "2022-05-20T16:45:07Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "OK cool",
              "createdAt": "2022-05-20T16:45:06Z",
              "updatedAt": "2022-05-20T16:45:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846cWGm",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good but let's be consistent with notation. ",
          "createdAt": "2022-05-20T18:03:58Z",
          "updatedAt": "2022-05-20T18:05:46Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I would be more specific here; we don't protect against a RNG returning all zero for example, but this does help for RNGs that return predictable randomness. ",
              "createdAt": "2022-05-20T18:03:58Z",
              "updatedAt": "2022-05-20T18:05:47Z"
            },
            {
              "originalPosition": 39,
              "body": "secret_share? or sk_i, to use notation that we employ elsewhere. ",
              "createdAt": "2022-05-20T18:04:34Z",
              "updatedAt": "2022-05-20T18:05:47Z"
            },
            {
              "originalPosition": 70,
              "body": "this is sk_i",
              "createdAt": "2022-05-20T18:04:59Z",
              "updatedAt": "2022-05-20T18:05:47Z"
            },
            {
              "originalPosition": 63,
              "body": "this is sk_i, see how it is defined in the sign algorithm. ",
              "createdAt": "2022-05-20T18:05:13Z",
              "updatedAt": "2022-05-20T22:17:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846c9KZ",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-20T21:05:06Z",
          "updatedAt": "2022-05-20T21:05:06Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I don't think this is true? The entropy of the output scalar is in the worst case min(entropy of random input, entropy of internally generated scalar), and if the RNG outputs zero or any other predictable value then we fall back on the entropy of the input. ",
              "createdAt": "2022-05-20T21:05:06Z",
              "updatedAt": "2022-05-20T21:05:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846c9Qd",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "If we're going to _always_ call nonce_generate with randomness, then let's just drop the variant that takes no randomness as input. It's just dead code at this point.",
          "createdAt": "2022-05-20T21:05:39Z",
          "updatedAt": "2022-05-20T21:07:45Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I don't think this should be a Scalar input -- I think it should be random bytes. ",
              "createdAt": "2022-05-20T21:05:40Z",
              "updatedAt": "2022-05-20T21:07:46Z"
            },
            {
              "originalPosition": 54,
              "body": "```suggestion\r\n    sk_enc = G.SerializeScalar(sk)\r\n    k = nonce_generate(sk_enc)\r\n```",
              "createdAt": "2022-05-20T21:07:01Z",
              "updatedAt": "2022-05-20T21:07:46Z"
            },
            {
              "originalPosition": 54,
              "body": "... to make my suggestion concrete.",
              "createdAt": "2022-05-20T21:07:10Z",
              "updatedAt": "2022-05-20T21:07:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dV5m",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T01:41:34Z",
          "updatedAt": "2022-05-21T01:41:35Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nTo hedge against a bad RNG, we generate nonces by sourcing fresh randomness and \r\n```",
              "createdAt": "2022-05-21T01:41:35Z",
              "updatedAt": "2022-05-21T01:41:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwnj",
          "commit": {
            "abbreviatedOid": "5b3a5df"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T21:49:28Z",
          "updatedAt": "2022-05-21T21:49:29Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\n  def commit(sk_i):\r\n    hiding_nonce = nonce_generate(sk_i)\r\n    binding_nonce = nonce_generate(sk_i)\r\n```",
              "createdAt": "2022-05-21T21:49:28Z",
              "updatedAt": "2022-05-21T21:49:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwn8",
          "commit": {
            "abbreviatedOid": "6ce4ae8"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T21:49:56Z",
          "updatedAt": "2022-05-21T21:49:57Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "```suggestion\r\n  Inputs: sk_i, the secret key share, a Scalar\r\n```",
              "createdAt": "2022-05-21T21:49:57Z",
              "updatedAt": "2022-05-21T21:49:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwo6",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T21:51:21Z",
          "updatedAt": "2022-05-21T21:51:22Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "If we also want to use this in `schnorr_signature_generate()` which I do in this PR, it has to be either a singleton full secret key or a threshold secret key share",
              "createdAt": "2022-05-21T21:51:21Z",
              "updatedAt": "2022-05-21T21:51:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwu7",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T21:59:53Z",
          "updatedAt": "2022-05-21T21:59:54Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I would argue for `Scalar` - no other subroutine takes 'bytes', the closest is a 'message'. The ~closest subroutine to this `nonce_generate` is `compute_challenge()`, which has `Public key, an Element` as an input; similarly here, we expect some `secret key`, which in either singleton or threshold is a `Scalar`.",
              "createdAt": "2022-05-21T21:59:53Z",
              "updatedAt": "2022-05-21T21:59:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dww5",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:02:26Z",
          "updatedAt": "2022-05-21T22:02:26Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Why does this need to be a secret key as input though? One could, for example, fold in any high-entropy secret established out of band to achieve the same effect, right? (My point is that this is too restrictive, basically.)",
              "createdAt": "2022-05-21T22:02:26Z",
              "updatedAt": "2022-05-21T22:02:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dw5T",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:13:59Z",
          "updatedAt": "2022-05-21T22:13:59Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "A good question!",
              "createdAt": "2022-05-21T22:13:59Z",
              "updatedAt": "2022-05-21T22:13:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dxVJ",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:59:30Z",
          "updatedAt": "2022-05-21T22:59:30Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "So, this hedge is here against a bad runtime RNG, by hoping/assuming that the RNG used to generate the secret key (share) was possibly better. We give specific requirements/assumptions for how FROST secret shares are generated. Allowing some generic set of bytes vs the secret key has less strict guarantees about the randomness of those bytes. Specifying that this is the secret key (share) gives users less leeway to say, rng the input bytes with the same rng used to source more nonce randomness at runtime. ",
              "createdAt": "2022-05-21T22:59:30Z",
              "updatedAt": "2022-05-21T22:59:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dyh5",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T00:59:52Z",
          "updatedAt": "2022-05-22T00:59:52Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Where do we give requirements for how secret key shares are generated? I thought that was out of scope for this document.",
              "createdAt": "2022-05-22T00:59:52Z",
              "updatedAt": "2022-05-22T00:59:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dypK",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:10:46Z",
          "updatedAt": "2022-05-22T01:10:46Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "![Screenshot_20220521-211017.png](https://user-images.githubusercontent.com/552961/169674108-6b04b9fa-df94-4abc-a366-68ae07340a32.png)",
              "createdAt": "2022-05-22T01:10:46Z",
              "updatedAt": "2022-05-22T01:10:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dyw7",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:23:19Z",
          "updatedAt": "2022-05-22T01:23:20Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "That's the requirement for any sampling in the spec, including the nonce, so I don't really think it's relevant to the discussion here? In any case, this is entirely an implementation detail that does not affect interoperability, so whatever we put here cannot possibly be enforced. I think we ought to go with the thing that can be used most broadly, and I currently think making it take in bytes -- which can be the encoded secret key share! -- is the best way to achieve that. ",
              "createdAt": "2022-05-22T01:23:20Z",
              "updatedAt": "2022-05-22T01:23:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dyzG",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:26:51Z",
          "updatedAt": "2022-05-22T01:26:51Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "It's not just about interop or enforceability but about the first suggestion to an implementor, and this suggestion is not about 'used most broadly', it's about taking learned lessons from ECDSA to hedge against bad RNGs.",
              "createdAt": "2022-05-22T01:26:51Z",
              "updatedAt": "2022-05-22T01:26:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dy0O",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:28:51Z",
          "updatedAt": "2022-05-22T01:28:51Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I'm not really sure we're understanding each other, because the suggestion I've provided would yield the exact same implementation as that which is currently done. ",
              "createdAt": "2022-05-22T01:28:51Z",
              "updatedAt": "2022-05-22T01:28:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dy2E",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:31:55Z",
          "updatedAt": "2022-05-22T01:31:55Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "no, text that tells a human implementer, pass in your secret key, versus text that says, pass in 32 bytes, does not deterministically result in the same implementation",
              "createdAt": "2022-05-22T01:31:55Z",
              "updatedAt": "2022-05-22T01:31:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dy2p",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:33:04Z",
          "updatedAt": "2022-05-22T01:33:05Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Please take a look at the suggestion I left.",
              "createdAt": "2022-05-22T01:33:04Z",
              "updatedAt": "2022-05-22T01:33:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dy3J",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T01:34:00Z",
          "updatedAt": "2022-05-22T01:34:00Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "@dconnolly this specifically^",
              "createdAt": "2022-05-22T01:34:00Z",
              "updatedAt": "2022-05-22T01:34:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dzGJ",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T02:01:21Z",
          "updatedAt": "2022-05-22T02:01:22Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I would still enforce this subroutine signature as a Scalar type, not 32 bytes (or equivalent number of Scalar bytes), as it is more likely to result in a function implementation that takes a 'key' type or at least a Scalar type which comes with more checks, and not an array of bytes\n\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/182#discussion_r878779753",
              "createdAt": "2022-05-22T02:01:22Z",
              "updatedAt": "2022-05-22T02:01:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dzHd",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T02:02:59Z",
          "updatedAt": "2022-05-22T02:02:59Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Although the sourcing of a new random scalar and the immediately turning it into bytes to be hashed could be changed, if this is the only invocation of RandomNonZeroScalar maybe it should be replaced with RandomBytes of something ",
              "createdAt": "2022-05-22T02:02:59Z",
              "updatedAt": "2022-05-22T02:02:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846eB7c",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T12:00:32Z",
          "updatedAt": "2022-05-22T12:00:32Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "> I would still enforce this subroutine signature as a Scalar type, not 32 bytes (or equivalent number of Scalar bytes), as it is more likely to result in a function implementation that takes a 'key' type or at least a Scalar type which comes with more checks, and not an array of bytes\r\n\r\nWell, since this is an implementation detail, we can't force anything to happen really. At best we can nudge folks to do the sensible thing.\r\n\r\nIn any case, I think we've discussed this through enough. I think this is the wrong way to slice the abstraction for the spec, and I'm willing to be in the rough on that.",
              "createdAt": "2022-05-22T12:00:32Z",
              "updatedAt": "2022-05-22T12:00:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846eB8O",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-22T12:01:00Z",
          "updatedAt": "2022-05-22T12:01:00Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\n  - secret, a Scalar\r\n```\r\n\r\nScalars are in GF(p) by definition, so we don't need to say it here.",
              "createdAt": "2022-05-22T12:01:00Z",
              "updatedAt": "2022-05-22T12:01:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846eB-P",
          "commit": {
            "abbreviatedOid": "f0c4473"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looking for two changes:\r\n\r\n1. Apply the editorial suggestion to remove \"in GF(p)\".\r\n2. Add this to the PoC (this can happen separately if we file an issue for it).",
          "createdAt": "2022-05-22T12:02:14Z",
          "updatedAt": "2022-05-22T12:02:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs846id4O",
          "commit": {
            "abbreviatedOid": "a43952c"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-23T17:11:09Z",
          "updatedAt": "2022-05-23T17:11:09Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Yes this is a nudge, cannot enforce but hopefully lead",
              "createdAt": "2022-05-23T17:11:09Z",
              "updatedAt": "2022-05-23T17:11:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846ipBX",
          "commit": {
            "abbreviatedOid": "bc54077"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-23T17:52:10Z",
          "updatedAt": "2022-05-23T17:52:10Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n  Outputs: nonce, a Scalar\r\n```",
              "createdAt": "2022-05-23T17:52:10Z",
              "updatedAt": "2022-05-23T17:52:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846nmgI",
          "commit": {
            "abbreviatedOid": "f41596d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I would change how we define RandomBytes, as it seems orthogonal from the prime-order group, and we really don't need it to produce any more than 32 bytes.",
          "createdAt": "2022-05-24T15:36:04Z",
          "updatedAt": "2022-05-24T15:40:33Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n```\r\n\r\nI wouldn't make this a function for the group -- it's sort of just a routine that exists.\r\n",
              "createdAt": "2022-05-24T15:36:04Z",
              "updatedAt": "2022-05-24T15:40:33Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nThese sections describes these operations in more detail. We also assume the existence\r\nof a function called `RandomBytes(n)`, which outputs `n` bytes from a cryptographically\r\nsecure pseudorandom number generator. See {{?RFC4086}} for guidance on randomness\r\ngeneration.\r\n```",
              "createdAt": "2022-05-24T15:39:15Z",
              "updatedAt": "2022-05-24T15:40:33Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\n    k_enc = RandomBytes(32)\r\n```\r\n\r\nAnything more than 32 is extreme overkill, so I'd recommend simplifying here.",
              "createdAt": "2022-05-24T15:39:51Z",
              "updatedAt": "2022-05-24T15:40:33Z"
            },
            {
              "originalPosition": 87,
              "body": "I would remove these per the suggestion above. ",
              "createdAt": "2022-05-24T15:40:10Z",
              "updatedAt": "2022-05-24T15:40:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8460ZDN",
          "commit": {
            "abbreviatedOid": "66d6374"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T21:25:00Z",
          "updatedAt": "2022-05-26T21:25:00Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Don't we have to mention / define a method like this in the context of the document?",
              "createdAt": "2022-05-26T21:25:00Z",
              "updatedAt": "2022-05-26T21:25:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8460ZUw",
          "commit": {
            "abbreviatedOid": "66d6374"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T21:26:26Z",
          "updatedAt": "2022-05-26T21:26:26Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Should I put this in `terminology`?",
              "createdAt": "2022-05-26T21:26:26Z",
              "updatedAt": "2022-05-26T21:26:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8460ZVo",
          "commit": {
            "abbreviatedOid": "66d6374"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T21:26:30Z",
          "updatedAt": "2022-05-26T21:26:31Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Yeah, we can put it in the beginning of the helper section. I just don't think it makes much sense as a member function for the group.",
              "createdAt": "2022-05-26T21:26:31Z",
              "updatedAt": "2022-05-26T21:26:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8460aFX",
          "commit": {
            "abbreviatedOid": "66d6374"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T21:30:23Z",
          "updatedAt": "2022-05-26T21:30:23Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Yup definitely",
              "createdAt": "2022-05-26T21:30:23Z",
              "updatedAt": "2022-05-26T21:30:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8460bCS",
          "commit": {
            "abbreviatedOid": "66d6374"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T21:35:29Z",
          "updatedAt": "2022-05-26T21:35:29Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "OH. We were going to vary this by ciphersuite to match the byte size of the scalars. Is 32 bytes fine 'for everyone', in the failure case?",
              "createdAt": "2022-05-26T21:35:29Z",
              "updatedAt": "2022-05-26T21:35:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8462lAX",
          "commit": {
            "abbreviatedOid": "60c4f0a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83c\udf89 ",
          "createdAt": "2022-05-27T11:28:22Z",
          "updatedAt": "2022-05-27T11:28:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 183,
      "id": "PR_kwDOEpUZs844OVKa",
      "title": "Add more reasoning why the coordinator MUST abort",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/183",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #180\r\n",
      "createdAt": "2022-05-20T23:07:26Z",
      "updatedAt": "2022-05-21T00:36:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "ac27238a056c88e0774a2c32a4f29846164d17b1",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "coord-abort",
      "headRefOid": "9611ae8411c7c80948467d6c7e43351784827d86",
      "closedAt": "2022-05-21T00:36:34Z",
      "mergedAt": "2022-05-21T00:36:34Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d920e8f585a1eee37c68d6947e384e9dc6c97f1f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846dRQ2",
          "commit": {
            "abbreviatedOid": "9611ae8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-21T00:36:30Z",
          "updatedAt": "2022-05-21T00:36:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 184,
      "id": "PR_kwDOEpUZs844O2MM",
      "title": "Cite TLS notation source",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/184",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #157.",
      "createdAt": "2022-05-21T11:41:09Z",
      "updatedAt": "2022-05-21T22:09:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "d920e8f585a1eee37c68d6947e384e9dc6c97f1f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/cite-tls-notation",
      "headRefOid": "b266c25fe6123d44c34827162e32eae1f047b50f",
      "closedAt": "2022-05-21T22:06:10Z",
      "mergedAt": "2022-05-21T22:06:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5bd30592ad717c257528ce3db58eadb265f7a63f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846dlQN",
          "commit": {
            "abbreviatedOid": "b266c25"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T14:37:37Z",
          "updatedAt": "2022-05-21T14:37:37Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Should this like to  {{?TLS=RFC8446}} instead? ",
              "createdAt": "2022-05-21T14:37:37Z",
              "updatedAt": "2022-05-21T14:37:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dsIu",
          "commit": {
            "abbreviatedOid": "b266c25"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T16:51:12Z",
          "updatedAt": "2022-05-21T16:51:13Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Not necessary since we already did that once before.",
              "createdAt": "2022-05-21T16:51:13Z",
              "updatedAt": "2022-05-21T16:51:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dww1",
          "commit": {
            "abbreviatedOid": "b266c25"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-21T22:02:20Z",
          "updatedAt": "2022-05-21T22:02:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs846dwyX",
          "commit": {
            "abbreviatedOid": "b266c25"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:04:05Z",
          "updatedAt": "2022-05-21T22:04:05Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "That is done lower in the document, does the link matching work with one definition anywhere?",
              "createdAt": "2022-05-21T22:04:05Z",
              "updatedAt": "2022-05-21T22:04:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846dwzx",
          "commit": {
            "abbreviatedOid": "b266c25"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-21T22:06:03Z",
          "updatedAt": "2022-05-21T22:06:03Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Yeah, otherwise the document wouldn't build correctly.",
              "createdAt": "2022-05-21T22:06:03Z",
              "updatedAt": "2022-05-21T22:06:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 186,
      "id": "PR_kwDOEpUZs844U10p",
      "title": "Don't rely on overloaded/set variable in list comprehension -> string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/186",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-23T23:08:38Z",
      "updatedAt": "2022-05-23T23:15:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "5bd30592ad717c257528ce3db58eadb265f7a63f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "fix-participant-serialization",
      "headRefOid": "2ab81452d2f8785cc295d2959bf6c625cde68bb0",
      "closedAt": "2022-05-23T23:14:01Z",
      "mergedAt": "2022-05-23T23:14:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c45b1fc31e3958d9eaa65393664492ad277eb48f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846jrlw",
          "commit": {
            "abbreviatedOid": "2ab8145"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-23T23:13:50Z",
          "updatedAt": "2022-05-23T23:13:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 187,
      "id": "PR_kwDOEpUZs844X6Mk",
      "title": "Use non-contiguous signers for the test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/187",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #152.\r\nCloses #151.\r\nCloses #108.",
      "createdAt": "2022-05-24T15:33:08Z",
      "updatedAt": "2022-05-26T17:20:18Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "c45b1fc31e3958d9eaa65393664492ad277eb48f",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/use-non-contiguous-signers",
      "headRefOid": "2df67b6fef9dc9b833c1e61e7085e3a6bcb824b0",
      "closedAt": "2022-05-26T17:20:14Z",
      "mergedAt": "2022-05-26T17:20:13Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "748f495741f2e3e9dbffa8e50ad5e995d38d2206"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846vD9F",
          "commit": {
            "abbreviatedOid": "2df67b6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-25T20:11:10Z",
          "updatedAt": "2022-05-25T20:11:10Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "Hm. This should be NUM_SIGNERS, no? I.e, if THRESHOLD_LIMIT=t, NUM_SIGNERS=n, then MAX_SIGNERS is at least t but at most n? ",
              "createdAt": "2022-05-25T20:11:10Z",
              "updatedAt": "2022-05-25T20:11:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846vIRy",
          "commit": {
            "abbreviatedOid": "2df67b6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-25T20:28:34Z",
          "updatedAt": "2022-05-25T20:28:36Z",
          "comments": [
            {
              "originalPosition": 341,
              "body": "NUM_SIGNERS, no? ",
              "createdAt": "2022-05-25T20:28:34Z",
              "updatedAt": "2022-05-25T20:28:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs846vM1M",
          "commit": {
            "abbreviatedOid": "2df67b6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great! Thanks @chris-wood ",
          "createdAt": "2022-05-25T20:47:13Z",
          "updatedAt": "2022-05-25T20:47:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs846xgyD",
          "commit": {
            "abbreviatedOid": "2df67b6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-26T11:03:27Z",
          "updatedAt": "2022-05-26T11:03:27Z",
          "comments": [
            {
              "originalPosition": 127,
              "body": "Discussed offline, but MAX_SIGNERS=n and NUM_SIGNERS is the number of signers between THRESHOLD_LIMIT=t and n. ",
              "createdAt": "2022-05-26T11:03:27Z",
              "updatedAt": "2022-05-26T11:03:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 192,
      "id": "PR_kwDOEpUZs844k-7c",
      "title": "THRESHOLD_LIMIT to MIN_SIGNERS",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/192",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #189.",
      "createdAt": "2022-05-27T11:34:14Z",
      "updatedAt": "2022-05-27T13:54:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "9863d3d394a524a0ddd47f0de196c4739594c3c9",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/min-signers",
      "headRefOid": "5247679640de114d6070ab49aea5f614b56501dc",
      "closedAt": "2022-05-27T13:54:10Z",
      "mergedAt": "2022-05-27T13:54:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "12ea129f4c168febafa878090299e0195bb80242"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8463LMj",
          "commit": {
            "abbreviatedOid": "5247679"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me, no need to stick with academic terms if we can have more intuitive terminology.",
          "createdAt": "2022-05-27T13:51:16Z",
          "updatedAt": "2022-05-27T13:51:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 193,
      "id": "PR_kwDOEpUZs844lFbp",
      "title": "Remove cofactor stuff, and apply more editorial changes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/193",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #191.\r\nCloses #190.\r\nCloses #160.\r\n",
      "createdAt": "2022-05-27T12:10:08Z",
      "updatedAt": "2022-05-27T16:02:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "12ea129f4c168febafa878090299e0195bb80242",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/more-iang-edits",
      "headRefOid": "03e2f749fc28a68d178a3a13fbc504abe33fba45",
      "closedAt": "2022-05-27T16:02:21Z",
      "mergedAt": "2022-05-27T16:02:20Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "69bf963d696e0648e447cdaec86963ec61ef9b09"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8463MFk",
          "commit": {
            "abbreviatedOid": "51a850c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:54:05Z",
          "updatedAt": "2022-05-27T13:54:05Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "Hm- what is the role of the coordinator then, if we don't say which elements are sent by them?",
              "createdAt": "2022-05-27T13:54:05Z",
              "updatedAt": "2022-05-27T13:54:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8463NFM",
          "commit": {
            "abbreviatedOid": "51a850c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good, we'll have some merge issues with #198  but I'll fix them up.",
          "createdAt": "2022-05-27T13:57:12Z",
          "updatedAt": "2022-05-27T13:57:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs8463Nji",
          "commit": {
            "abbreviatedOid": "51a850c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:58:21Z",
          "updatedAt": "2022-05-27T13:58:21Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "We just don't need to say it here. We do say that the coordinator sends these messages elsewhere.",
              "createdAt": "2022-05-27T13:58:21Z",
              "updatedAt": "2022-05-27T13:58:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 198,
      "id": "PR_kwDOEpUZs844lZ09",
      "title": "Various editorial improvements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/198",
      "state": "CLOSED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-27T13:46:17Z",
      "updatedAt": "2022-05-27T16:30:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "9863d3d394a524a0ddd47f0de196c4739594c3c9",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "editorial",
      "headRefOid": "d19b945e97077cc2d0c0b536d608d4cf2f76dd7f",
      "closedAt": "2022-05-27T16:30:17Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing due to merge conflicts, will re-open a fresh PR",
          "createdAt": "2022-05-27T16:30:17Z",
          "updatedAt": "2022-05-27T16:30:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8463MUq",
          "commit": {
            "abbreviatedOid": "ae19d41"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:54:49Z",
          "updatedAt": "2022-05-27T13:54:50Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nprotocol. The Coordinator is an entity with the following responsibilities:\r\n```",
              "createdAt": "2022-05-27T13:54:49Z",
              "updatedAt": "2022-05-27T13:54:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8463MeI",
          "commit": {
            "abbreviatedOid": "ae19d41"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:55:17Z",
          "updatedAt": "2022-05-27T13:55:17Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "This is done in my PR -- please review that first.",
              "createdAt": "2022-05-27T13:55:17Z",
              "updatedAt": "2022-05-27T13:55:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8463Moz",
          "commit": {
            "abbreviatedOid": "ae19d41"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:55:50Z",
          "updatedAt": "2022-05-27T13:55:50Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "This is addressed in my PR -- please review that first.",
              "createdAt": "2022-05-27T13:55:50Z",
              "updatedAt": "2022-05-27T13:55:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs8463Mr-",
          "commit": {
            "abbreviatedOid": "ae19d41"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T13:55:59Z",
          "updatedAt": "2022-05-27T13:55:59Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "This was also addressed.",
              "createdAt": "2022-05-27T13:55:59Z",
              "updatedAt": "2022-05-27T13:55:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 199,
      "id": "PR_kwDOEpUZs844mARE",
      "title": "Editorial changes v2",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/199",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-27T16:40:22Z",
      "updatedAt": "2022-05-28T14:11:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "69bf963d696e0648e447cdaec86963ec61ef9b09",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "editorial-v2",
      "headRefOid": "9914deaaa019adf6a3cf88b303e22d680ee0c009",
      "closedAt": "2022-05-28T14:10:49Z",
      "mergedAt": "2022-05-28T14:10:48Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "2b919c80799fcd95129061250d1d61862315f881"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8466pTG",
          "commit": {
            "abbreviatedOid": "67c4c6c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-28T09:45:46Z",
          "updatedAt": "2022-05-28T09:46:05Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\n    r = comm_share + ((challenge * lambda_i) * PK_i)\r\n```\r\nI think this is perhaps more clear because (challenge * lambda_i) is a scalar. Maybe instead we should introduce a function explicitly for scalar multiplication, and then use it like so?\r\n\r\n```\r\nr = comm_share + G.ScalarMult(challenge * lambda_i, PK_i)\r\n```",
              "createdAt": "2022-05-28T09:45:47Z",
              "updatedAt": "2022-05-28T09:46:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs84667Vm",
          "commit": {
            "abbreviatedOid": "67c4c6c"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-28T14:10:41Z",
          "updatedAt": "2022-05-28T14:10:41Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "`G.ScalarMult` would indeed be clearer- I'll open an issue for this as a nice to have, but will cut v5 with this as is. ",
              "createdAt": "2022-05-28T14:10:41Z",
              "updatedAt": "2022-05-28T14:10:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 200,
      "id": "PR_kwDOEpUZs844m6sO",
      "title": "Add v5 changelog",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/200",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is missing #199 and the PR to close #188, will update with those once we close them.",
      "createdAt": "2022-05-27T20:32:36Z",
      "updatedAt": "2022-05-31T18:09:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "69bf963d696e0648e447cdaec86963ec61ef9b09",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "changelog-v5",
      "headRefOid": "66be9894aac457075165af2b7f235426ce2948bb",
      "closedAt": "2022-05-31T18:09:48Z",
      "mergedAt": "2022-05-31T18:09:48Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "f1829a4f5ebf2c068f60120cc150bd8dc755a849"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8466pWV",
          "commit": {
            "abbreviatedOid": "897ee4c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-28T09:46:25Z",
          "updatedAt": "2022-05-28T09:46:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 202,
      "id": "PR_kwDOEpUZs844sXTz",
      "title": "Add versions to context string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/202",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #188",
      "createdAt": "2022-05-30T16:06:54Z",
      "updatedAt": "2022-05-30T22:22:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "2b919c80799fcd95129061250d1d61862315f881",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "version-string",
      "headRefOid": "e85ddddf56ad05ceb7c495ff510cc69a5dc520f5",
      "closedAt": "2022-05-30T22:22:04Z",
      "mergedAt": "2022-05-30T22:22:04Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "b0cd17a9c9f9e5abe447964f86a20503af0b7e62"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs846-5Px",
          "commit": {
            "abbreviatedOid": "e85dddd"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-30T16:53:39Z",
          "updatedAt": "2022-05-30T16:53:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 203,
      "id": "PR_kwDOEpUZs844tLPJ",
      "title": "Update test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/203",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "To match changes made in #202 ",
      "createdAt": "2022-05-30T22:47:50Z",
      "updatedAt": "2022-05-31T17:45:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "b0cd17a9c9f9e5abe447964f86a20503af0b7e62",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "update-test-vectors",
      "headRefOid": "9dc75d32dff97db1954dd0fc9d654877741a9bd7",
      "closedAt": "2022-05-31T17:45:03Z",
      "mergedAt": "2022-05-31T17:45:03Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "b9a06f49c713515609fbefbf1ef4ef956fa4f893"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "These don't look like they match in multiple places, such as the group binding factor input and group binding factor, across the ciphersuites:\r\n\r\n<img width=\"1644\" alt=\"image\" src=\"https://user-images.githubusercontent.com/552961/171156325-6c54c3e8-9ec7-4235-9744-1d8700d5ea56.png\">\r\n",
          "createdAt": "2022-05-31T10:46:06Z",
          "updatedAt": "2022-05-31T10:46:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs847D3q7",
          "commit": {
            "abbreviatedOid": "9dc75d3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good!",
          "createdAt": "2022-05-31T17:44:36Z",
          "updatedAt": "2022-05-31T17:44:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 205,
      "id": "PR_kwDOEpUZs845Dtd_",
      "title": "Update Ed25519's hash functions to reduce the full digest when deriving a scalar",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/205",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In response to https://github.com/cfrg/draft-irtf-cfrg-frost/issues/204, which goes over the reasons why, notably RFC8032 compatibility. The reference code does not need updating as it already used the full digest, producing vectors also using it, making this not just further match specs yet also resolve a conflict within this work.",
      "createdAt": "2022-06-03T09:46:57Z",
      "updatedAt": "2022-06-14T12:45:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6590e8e30455bfa485733d77bcdd0166825bc4d7",
      "headRepository": null,
      "headRefName": "ed25519-rfc8032-reduction",
      "headRefOid": "59a608b126deb1ba24f5761341f878ee508ccaeb",
      "closedAt": "2022-06-14T10:03:59Z",
      "mergedAt": "2022-06-14T10:03:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3b7c832265a1b921d87d5ca466f7e6d0c15626db"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs8474q__",
          "commit": {
            "abbreviatedOid": "59a608b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Nice catch!",
          "createdAt": "2022-06-13T17:45:06Z",
          "updatedAt": "2022-06-13T17:45:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 206,
      "id": "PR_kwDOEpUZs845Ympe",
      "title": "Bump actions/setup-python from 3.1.2 to 4.0.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/206",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 3.1.2 to 4.0.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v4.0.0</h2>\n<h3>What's Changed</h3>\n<ul>\n<li>Support for <code>python-version-file</code> input: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/336\">#336</a></li>\n</ul>\n<p>Example of usage:</p>\n<pre lang=\"yaml\"><code>- uses: actions/setup-python@v4\n  with:\n    python-version-file: '.python-version' # Read python version from a file\n- run: python my_script.py\n</code></pre>\n<p>There is no default python version for this <code>setup-python</code> major version, the action requires to specify either <code>python-version</code> input or <code>python-version-file</code> input. If the <code>python-version</code> input is not specified the action will try to read required version from file from <code>python-version-file</code> input.</p>\n<ul>\n<li>Use pypyX.Y for PyPy <code>python-version</code> input: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/349\">#349</a></li>\n</ul>\n<p>Example of usage:</p>\n<pre lang=\"yaml\"><code>- uses: actions/setup-python@v4\n  with:\n    python-version: 'pypy3.9' # pypy-X.Y kept for backward compatibility\n- run: python my_script.py\n</code></pre>\n<ul>\n<li>\n<p><code>RUNNER_TOOL_CACHE</code> environment variable is equal <code>AGENT_TOOLSDIRECTORY</code>: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/338\">#338</a></p>\n</li>\n<li>\n<p>Bugfix: create missing <code>pypyX.Y</code> symlinks: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/347\">#347</a></p>\n</li>\n<li>\n<p><code>PKG_CONFIG_PATH</code> environment variable: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/400\">#400</a></p>\n</li>\n<li>\n<p>Added <code>python-path</code> output: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/405\">#405</a>\n<code>python-path</code> output contains Python executable path.</p>\n</li>\n<li>\n<p>Updated <code>zeit/ncc</code> to <code>vercel/ncc</code> package: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/393\">#393</a></p>\n</li>\n<li>\n<p>Bugfix: fixed output for prerelease version of poetry: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/409\">#409</a></p>\n</li>\n<li>\n<p>Made <code>pythonLocation</code> environment variable consistent for Python and PyPy: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/418\">#418</a></p>\n</li>\n<li>\n<p>Bugfix for <code>3.x-dev</code> syntax: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/417\">#417</a></p>\n</li>\n<li>\n<p>Other improvements: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/318\">#318</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/396\">#396</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/384\">#384</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/387\">#387</a> <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/388\">#388</a></p>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/d09bd5e6005b175076f227b13d9730d56e9dcfcb\"><code>d09bd5e</code></a> fix: 3.x-dev can install a 3.y version (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/417\">#417</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/f72db171abf897c3f4cea0427d5af95fa57fb1bc\"><code>f72db17</code></a> Made env.var pythonLocation consistent for Python and PyPy (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/418\">#418</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/53e15292cd6a522cb460037b6f031eadbd6f6920\"><code>53e1529</code></a> add support for python-version-file (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/336\">#336</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/3f82819745be54edd3bd8a83639605e58826bfe9\"><code>3f82819</code></a> Fix output for prerelease version of poetry (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/409\">#409</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/397252c5825684a4ffed92b79e0d840c618c0a93\"><code>397252c</code></a> Update zeit/ncc to vercel/ncc (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/393\">#393</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/de977ad1321ff211fd43f0f232a4d8851726d4bb\"><code>de977ad</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/412\">#412</a> from vsafonkin/v-vsafonkin/fix-poetry-cache-test</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/22c6af91ce03997c5925db1f6e9f0b9b2364adcc\"><code>22c6af9</code></a> Change PyPy version to rebuild cache</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/081a3cf1a51ab5fff2ae9d70f0cfacf0686293ea\"><code>081a3cf</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/405\">#405</a> from mayeut/interpreter-path</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/ff706563d754e642609a7008f4568a5386f3e94c\"><code>ff70656</code></a> feature: add a <code>python-path</code> output</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/fff15a21cc8b16191cb1249f621fa3a55b9005b8\"><code>fff15a2</code></a> Use pypyX.Y for PyPy python-version input (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/349\">#349</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v3.1.2...v4.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=3.1.2&new-version=4.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-06-09T11:27:16Z",
      "updatedAt": "2022-06-20T17:05:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "6590e8e30455bfa485733d77bcdd0166825bc4d7",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.0.0",
      "headRefOid": "3a24fae8d5b7e844bfd7f8862bbf19318f68d886",
      "closedAt": "2022-06-20T17:05:02Z",
      "mergedAt": "2022-06-20T17:05:02Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "156c203c2fa97e97e8846c15d4e919c9612351fb"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 207,
      "id": "PR_kwDOEpUZs84551xu",
      "title": "Add Modular FROST as an implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/207",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Instead of listing as `FROST(Ed25519, SHA-512, FROST(ristretto255, SHA-512), FROST(P-256, SHA-256)`, I listed as `All except FROST(Ed448, SHAKE256)` to be succinct. It should be noted this is a modular library, being usable for a variety of Schnorr-like constructions, with non-standard functionality offered directly in it already (key offsetting for HDKD/privacy schemes), yet a Schnorr algorithm and IETF HRAMs are provided.\r\n\r\nThis does pass the v5 vectors, as proven with these files:\r\nhttps://github.com/serai-dex/serai/blob/develop/crypto/frost/src/tests/literal/kp256.rs\r\nhttps://github.com/serai-dex/serai/blob/develop/crypto/frost/src/tests/literal/dalek.rs\r\n\r\nThough as my other issue noted, this isn't technically a v5 implementation, due to a discrepancy which will be resolved in v6. I believe it is an implementation of the current develop branch however.",
      "createdAt": "2022-06-19T11:26:39Z",
      "updatedAt": "2022-06-23T17:02:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3b7c832265a1b921d87d5ca466f7e6d0c15626db",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "patch-1",
      "headRefOid": "67c93ff3407c743c8bcd7271c17aecf41fa2a860",
      "closedAt": "2022-06-20T14:33:54Z",
      "mergedAt": "2022-06-20T14:33:54Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f49bb37632ca8d85cf97e92eb087d417366b01d0"
      },
      "comments": [
        {
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "body": "This is great to see, thank you! :) ",
          "createdAt": "2022-06-23T17:02:04Z",
          "updatedAt": "2022-06-23T17:02:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs848V98M",
          "commit": {
            "abbreviatedOid": "67c93ff"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-20T14:33:50Z",
          "updatedAt": "2022-06-20T14:33:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 208,
      "id": "PR_kwDOEpUZs8458vhb",
      "title": "Address Ian's followup review",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/208",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-20T13:20:21Z",
      "updatedAt": "2022-06-21T19:30:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "3b7c832265a1b921d87d5ca466f7e6d0c15626db",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/iang-review",
      "headRefOid": "858e248ebacb94e9053ec6326935365ff409699e",
      "closedAt": "2022-06-21T16:55:46Z",
      "mergedAt": "2022-06-21T16:55:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "57d79975aee540e18558e7be61537086c5b174bb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs848XjMB",
          "commit": {
            "abbreviatedOid": "7bfe5d9"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great, thanks for taking this on. ",
          "createdAt": "2022-06-20T23:13:14Z",
          "updatedAt": "2022-06-20T23:13:34Z",
          "comments": [
            {
              "originalPosition": 236,
              "body": "Should there be an s after `Element` here?",
              "createdAt": "2022-06-20T23:13:14Z",
              "updatedAt": "2022-06-20T23:13:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848Zd8U",
          "commit": {
            "abbreviatedOid": "7bfe5d9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T09:54:24Z",
          "updatedAt": "2022-06-21T09:54:24Z",
          "comments": [
            {
              "originalPosition": 236,
              "body": "It's meant to be plural (this isn't a new change). ",
              "createdAt": "2022-06-21T09:54:24Z",
              "updatedAt": "2022-06-21T09:54:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848Zd_L",
          "commit": {
            "abbreviatedOid": "7bfe5d9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T09:54:32Z",
          "updatedAt": "2022-06-21T09:54:32Z",
          "comments": [
            {
              "originalPosition": 236,
              "body": "```suggestion\r\n  from the group's key generation protocol, `Element` values in `G`.\r\n```",
              "createdAt": "2022-06-21T09:54:32Z",
              "updatedAt": "2022-06-21T09:54:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848bsRi",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:18:40Z",
          "updatedAt": "2022-06-21T16:18:41Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "\ud83d\udc4d ",
              "createdAt": "2022-06-21T16:18:40Z",
              "updatedAt": "2022-06-21T16:18:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848bsY-",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:19:02Z",
          "updatedAt": "2022-06-21T16:19:03Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:19:02Z",
              "updatedAt": "2022-06-21T16:19:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848bsbG",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:19:08Z",
          "updatedAt": "2022-06-21T16:19:09Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:19:08Z",
              "updatedAt": "2022-06-21T16:19:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848bsd1",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:19:15Z",
          "updatedAt": "2022-06-21T16:19:15Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:19:15Z",
              "updatedAt": "2022-06-21T16:19:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848bstd",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:19:59Z",
          "updatedAt": "2022-06-21T16:20:00Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:20:00Z",
              "updatedAt": "2022-06-21T16:20:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b0Wi",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:42:04Z",
          "updatedAt": "2022-06-21T16:42:04Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Not sure if we want to change this (if there is a note from iang on this I probably missed it) especially if we want to add a note about cofactor curves - doing the check for such curves involves multiplying `G.cofactor * ( l - r ) == G.Identity()`, so rearranging the check like this is fine and nice without any cofactor but showing where to insert the cofactor check is 'easier' in the text if it remains un-rearranged IMO",
              "createdAt": "2022-06-21T16:42:04Z",
              "updatedAt": "2022-06-21T16:42:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b182",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:47:09Z",
          "updatedAt": "2022-06-21T16:47:09Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "Uh, doesn't this mean the final value gets an extra x multiplication, when it shouldn't? // @chelseakomlo ",
              "createdAt": "2022-06-21T16:47:09Z",
              "updatedAt": "2022-06-21T16:48:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b3io",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:52:17Z",
          "updatedAt": "2022-06-21T16:52:18Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:52:17Z",
              "updatedAt": "2022-06-21T16:52:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b3k6",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:52:26Z",
          "updatedAt": "2022-06-21T16:52:26Z",
          "comments": [
            {
              "originalPosition": 139,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T16:52:26Z",
              "updatedAt": "2022-06-21T16:52:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b4a-",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:54:59Z",
          "updatedAt": "2022-06-21T16:54:59Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "I don't think we want to include a cofactor check in these routines since, as per the latest variant, all subgroup checks happen on _inputs_.",
              "createdAt": "2022-06-21T16:54:59Z",
              "updatedAt": "2022-06-21T16:54:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848b4p4",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T16:55:43Z",
          "updatedAt": "2022-06-21T16:55:43Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "Note that the POC was updated to match and it checks out \ud83d\udc4d ",
              "createdAt": "2022-06-21T16:55:43Z",
              "updatedAt": "2022-06-21T16:55:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848cjzj",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T19:14:29Z",
          "updatedAt": "2022-06-21T19:14:30Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "\ud83d\udc4d",
              "createdAt": "2022-06-21T19:14:30Z",
              "updatedAt": "2022-06-21T19:14:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs848cob8",
          "commit": {
            "abbreviatedOid": "858e248"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-21T19:30:49Z",
          "updatedAt": "2022-06-21T19:30:49Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "See above // @chelseakomlo \r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/208/files#r902847262",
              "createdAt": "2022-06-21T19:30:49Z",
              "updatedAt": "2022-06-21T19:30:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 209,
      "id": "PR_kwDOEpUZs846w6lK",
      "title": "Address (some) of ian's review comments",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/209",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-04T02:09:21Z",
      "updatedAt": "2022-07-05T15:49:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "57d79975aee540e18558e7be61537086c5b174bb",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "ian-review",
      "headRefOid": "65e7fab00720da50b8598a5140ee8c1b17a7f3d5",
      "closedAt": "2022-07-05T15:49:37Z",
      "mergedAt": "2022-07-05T15:49:37Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "7c22cf9532dd756e6fc0b45e29b2f18bf1af75c3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849TfcZ",
          "commit": {
            "abbreviatedOid": "c1ef1ab"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-05T12:05:22Z",
          "updatedAt": "2022-07-05T12:06:09Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "```suggestion\r\ncorresponding commitment after this round completes, and MUST use the nonce to generate at most one\r\nsignature share.\r\n```",
              "createdAt": "2022-07-05T12:05:22Z",
              "updatedAt": "2022-07-05T12:06:09Z"
            },
            {
              "originalPosition": 63,
              "body": "```suggestion\r\n    identity element and is in the prime-order subgroup.\r\n[[TODO: describe how this check is done.]]\r\n```",
              "createdAt": "2022-07-05T12:05:52Z",
              "updatedAt": "2022-07-05T12:06:09Z"
            },
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-07-05T12:06:07Z",
              "updatedAt": "2022-07-05T12:06:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 210,
      "id": "PR_kwDOEpUZs846255Q",
      "title": "Note that RandomScalar should use rejection sampling",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/210",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Since DeserializeScalar is fallible, just retry if it fails.",
      "createdAt": "2022-07-05T13:57:03Z",
      "updatedAt": "2022-07-05T14:10:37Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "57d79975aee540e18558e7be61537086c5b174bb",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/random-scalar-rejection-sampling",
      "headRefOid": "71df37ab7b25f9316b33213e93ece929b050f383",
      "closedAt": "2022-07-05T14:10:37Z",
      "mergedAt": "2022-07-05T14:10:37Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b10fdfff4f3e3a5efeeac2ab8a4a4c5c0979f328"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849ULG-",
          "commit": {
            "abbreviatedOid": "71df37a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-05T14:05:58Z",
          "updatedAt": "2022-07-05T14:05:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs849ULV1",
          "commit": {
            "abbreviatedOid": "71df37a"
          },
          "author": "conradoplg",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-05T14:06:33Z",
          "updatedAt": "2022-07-05T14:06:33Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "That particular wording can be a bit inefficient in some cases, e.g. here in ristretto255 approximately 7 out of 8 tries will fail because it's looking for a 253-bit scalar in a 256-bit buffer. We'd need to clear the upper bits. But it's becoming more and more awkward \ud83d\ude05 Maybe this warrants a new helper function?",
              "createdAt": "2022-07-05T14:06:33Z",
              "updatedAt": "2022-07-05T14:06:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849UM6w",
          "commit": {
            "abbreviatedOid": "71df37a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-05T14:10:30Z",
          "updatedAt": "2022-07-05T14:10:30Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I don't think that's necessary, but I'm happy to look at PRs.",
              "createdAt": "2022-07-05T14:10:30Z",
              "updatedAt": "2022-07-05T14:10:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 211,
      "id": "PR_kwDOEpUZs8464Cbs",
      "title": "Add lazy (expensive) prime-order subgroup check",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/211",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-05T19:24:40Z",
      "updatedAt": "2022-07-06T22:35:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "0856ecaae73c6b45abe36ba1fd956071155841b5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/subgroup-check-lazy",
      "headRefOid": "20201611f3492322baabdb7fd75b7102d61b1593",
      "closedAt": "2022-07-06T22:34:59Z",
      "mergedAt": "2022-07-06T22:34:59Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "28cc950f64284fd17460b00ce6e121f3da6e1218"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849bVaQ",
          "commit": {
            "abbreviatedOid": "2020161"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good to me.",
          "createdAt": "2022-07-06T19:08:31Z",
          "updatedAt": "2022-07-06T19:08:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs849cIJI",
          "commit": {
            "abbreviatedOid": "2020161"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Good enough for now \ud83d\udc4d",
          "createdAt": "2022-07-06T22:34:56Z",
          "updatedAt": "2022-07-06T22:34:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 212,
      "id": "PR_kwDOEpUZs846-W3j",
      "title": "Add the `frost-p256` implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/212",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-06T21:47:33Z",
      "updatedAt": "2022-07-06T22:30:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "0856ecaae73c6b45abe36ba1fd956071155841b5",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "dc0e8838216c80ae6c08b21c85515e3a3d9bdbdf",
      "closedAt": "2022-07-06T22:30:54Z",
      "mergedAt": "2022-07-06T22:30:53Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "d70f7cb6ee2985a86acb0e748dec1db6739cf91e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 215,
      "id": "PR_kwDOEpUZs847KvM1",
      "title": "Correct torsion check definition",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/215",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "```rs\r\n#[test]\r\nfn torsion() {\r\n  use curve25519_dalek::{\r\n    traits::IsIdentity,\r\n    constants::{ED25519_BASEPOINT_TABLE, EIGHT_TORSION},\r\n    scalar::Scalar\r\n  };\r\n  let point = (&Scalar::from(5u8) * &ED25519_BASEPOINT_TABLE) + EIGHT_TORSION[7];\r\n  assert!(!point.mul_by_cofactor().is_identity());\r\n  assert!(!point.is_torsion_free());\r\n}\r\n```\r\n\r\nhttps://github.com/dalek-cryptography/curve25519-dalek/blob/967d8b6c0e67100401ad66125b7399ccf509ae22/src/edwards.rs#L1184-L1186\r\n\r\nThe existing definition checks it's non-0, even when torsioned. It does not check it is in the prime order subgroup.",
      "createdAt": "2022-07-11T05:14:03Z",
      "updatedAt": "2022-07-11T19:53:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "28cc950f64284fd17460b00ce6e121f3da6e1218",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "patch-2",
      "headRefOid": "827504ef4d1e25f3b1c3ddbfb7886f33b76296c7",
      "closedAt": "2022-07-11T19:16:12Z",
      "mergedAt": "2022-07-11T19:16:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b69518346debb1d0b90bf2fa64f2406376174acb"
      },
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To clarify another aspect, the cofactor multiplication isn't practically considered expensive (at least, to the people I work with :D I'm sure it's something which differs when discussing resource constrained environments). It's 3 point additions. The multiplication by the curve order, which is just over 500 additions in constant time under a per-bit double and add (and ~100 with a small table), would be considered so however. It's also the sole method available to guarantee the lack of torsion on an existing point, unfortunately.\r\n\r\nFrom an implementation perspective, the trick becomes for the signers to publish `element * 8.invert()`, so they do a scalar mul on their elements alone, and all participants multiply by 8 on recipience. This will guarantee the element doesn't have torsion while being a fraction of the cost.\r\n\r\nWhen discussing this, I generated the following data on Ristretto and Ed25519, as I was trying to compare their efficiencies.\r\n\r\n```\r\n13ms R encode\r\n15ms R decode\r\n8ms E encode\r\n12ms E decode\r\n18ms E decode, 8\r\n286ms E decode with inv 8, 8\r\n```\r\n\r\nThe last two E (Ed25519) decodes are with * 8, clearing torsion, and then the last one also performed the inv 8. While the inv 8 is a full scalar mul, and around ~15x more expensive than decode + mul by 8 alone, the above implementation model makes each signer perform the scalar mul on themselves with a complexity of O(1), instead of with the curve order for everyone in O(n). The O(n) becomes the much cheaper mul by cofactor. \r\n\r\nWhile I wasn't planning on noting this to advocate for adoptance of such a pattern into the draft, which I appreciate the directness of, I will say the above numbers don't lie. This may be worth a follow up issue for discussion. Please let me know and I'll create one. Regardless, I'd like this PR to remain the immediate patch for the incorrect text.\r\n\r\nEDIT: I'd note the success of `assert!((point * Scalar::from(8u8).invert()).mul_by_cofactor().is_torsion_free());`, demonstrating the torsion clear (and prime order guarantee) using a fragment of the additions. I'd also note the above were measured in `ms` as it was over 1000 runs, with the data being from dalek under release, without SIMD, running on my personal computer.",
          "createdAt": "2022-07-11T05:33:58Z",
          "updatedAt": "2022-07-11T05:41:17Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The existing definition checks it's non-0, even when torsioned. It does not check it is in the prime order subgroup.\r\n\r\nI don't think this is true. The check currently asks whether or not the point has low order (which may be any order that divides the cofactor). My understanding is that, if it doesn't belong to one of these small groups, then it must belong to the larger prime-order subgroup. The dalek code [tests this sort of thing](https://docs.rs/curve25519-dalek/0.19.0/src/curve25519_dalek/edwards.rs.html#1106). Am I missing or misunderstanding something here?",
          "createdAt": "2022-07-11T11:59:44Z",
          "updatedAt": "2022-07-11T12:08:07Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I used the term \"order\", without providing a definition, because it was defined as a variable above the definition I edited. https://github.com/cfrg/draft-irtf-cfrg-frost/blob/28cc950f64284fd17460b00ce6e121f3da6e1218/draft-irtf-cfrg-frost.md?plain=1#L889-L898 I'm happy to provide a constant for it in parentheses or use a better term, if you can provide one.\r\n\r\nThe small order function has horribly written documentation for a more practical perspective. It doesn't check the point is in the prime order subgroup, which is what `is_torsion_free` does with this exact mechanism. It checks it's not explicitly one of the torsion subgroup points, as the linked test demonstrates. The torsion subgroup points have an order of 8, so multiplying a point by 8 and receiving identity means it was a torsion subgroup point. That said, as my code shows, it's possible to torsion a point with a large order component. Accordingly, it will have torsion, yet won't identify as small order because despite having a torsion component with a small order, it has a regular component with a large order. This is why it's a torsion clear, not a torsion check.\r\n\r\nWhile a torsion clear is valid and performant, as I quoted numbers on, its result is not carried as it would have to be. I'd also note that identity must be checked for *after* the torsion clear, since the cofactor multiplication will have non-identity points produce identity after it (as shown by `is_small_order`), due to their incredibly low order.",
          "createdAt": "2022-07-11T15:36:19Z",
          "updatedAt": "2022-07-11T15:36:49Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, I'm a bit confused. The torsion terminology is unhelpful here so I'm not going to use it. Having said that, here's how I understand the situation:\r\n\r\n1. The function `is_torsion_free` just checks that the order of the point matches that of the prime-order subgroup. \r\n2. The low-order check (as is described currently) rejects everything that has an order of 2, 4, or 8. \r\n3. If a point on the curve is not in a low-order group, it must be in the larger prime-order group.\r\n\r\nWhich of these are you saying is incorrect?",
          "createdAt": "2022-07-11T15:47:51Z",
          "updatedAt": "2022-07-11T15:47:51Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\\# 3. A point can have a component in the prime-order group AND another component in the small-order group. The latter is sufficient to make it non-prime order, yet due to the presence of the former, it won't be detected as small order. That's what my above snippet of code demonstrated.",
          "createdAt": "2022-07-11T16:08:38Z",
          "updatedAt": "2022-07-11T16:09:36Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> A point can have a component in the prime-order group AND in the small-order group. The latter is sufficient to make it non-prime order, yet due to the presence of the former, it won't be detected as small order.\r\n\r\nWhat is the order of such points?",
          "createdAt": "2022-07-11T16:09:34Z",
          "updatedAt": "2022-07-11T16:09:45Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "... both? I guess? They're not in the prime-order subgroup, yet they aren't small order. The issue becomes, when discussing torsion and the classic Cryptonote key image vulnerability, is the small order component will clear itself out most of the time. Accordingly, you end up with just the prime-order component, yet it's one that has multiple references which can have varying effects.\r\n\r\nIf there's a requirement on being prime-order, or not needing to do a full security review on the effects of non-prime-order components is desired, my sole resolving comment is we need either the prime-order subgroup presence check (distinct from the small order check) OR to ensure it's present in the prime-order subgroup by clearing any small-order components. While I'm happy to discuss the latter, as it's vastly more performant, I'd personally prefer this gets merged and then we open a discussion issue for the latter, if it's desired (though I'm obviously not the person with experience on how to manage topics for FROST here, and will defer to you ;) ).",
          "createdAt": "2022-07-11T16:14:13Z",
          "updatedAt": "2022-07-11T16:14:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849o_4H",
          "commit": {
            "abbreviatedOid": "f6f4dbd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't find this to be a useful clarification since the order could be misinterpreted to be the size of the desired subgroup, whereas the cofactor has a clear and unambiguous definition. ",
          "createdAt": "2022-07-11T10:58:57Z",
          "updatedAt": "2022-07-11T10:58:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs849rfgy",
          "commit": {
            "abbreviatedOid": "f6f4dbd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "OK, let's go with the known-correct thing now and revisit improvements later.",
          "createdAt": "2022-07-11T19:07:51Z",
          "updatedAt": "2022-07-11T19:08:05Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n    be implemented by multiplying the resulting point by the order of the group and\r\n```",
              "createdAt": "2022-07-11T19:07:51Z",
              "updatedAt": "2022-07-11T19:08:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rhxm",
          "commit": {
            "abbreviatedOid": "827504e"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T19:16:51Z",
          "updatedAt": "2022-07-11T19:16:52Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "The order of the prime order subgroup?",
              "createdAt": "2022-07-11T19:16:51Z",
              "updatedAt": "2022-07-11T19:16:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rig8",
          "commit": {
            "abbreviatedOid": "827504e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T19:19:56Z",
          "updatedAt": "2022-07-11T19:19:56Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Yeah, the group is defined to be prime-order.",
              "createdAt": "2022-07-11T19:19:56Z",
              "updatedAt": "2022-07-11T19:19:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rqzj",
          "commit": {
            "abbreviatedOid": "827504e"
          },
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T19:53:43Z",
          "updatedAt": "2022-07-11T19:53:43Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Right. \"Order\" is defined a few properties above this, which I showed in one of my comments.",
              "createdAt": "2022-07-11T19:53:43Z",
              "updatedAt": "2022-07-11T19:53:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 216,
      "id": "PR_kwDOEpUZs847MQSL",
      "title": "Use per-signer values of rho",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/216",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #214.",
      "createdAt": "2022-07-11T12:52:15Z",
      "updatedAt": "2022-07-11T13:33:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "28cc950f64284fd17460b00ce6e121f3da6e1218",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/per-signer-rhos",
      "headRefOid": "bc3fe92c6a54b7c1b83853eac72488791057f0e8",
      "closedAt": "2022-07-11T13:33:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 217,
      "id": "PR_kwDOEpUZs847MeTx",
      "title": "Use per-signer rhos",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/217",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #214.\r\n\r\nThe previous PR for this was incomplete (in the spec), but this would should be fixed. ",
      "createdAt": "2022-07-11T13:43:36Z",
      "updatedAt": "2022-07-12T20:31:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "28cc950f64284fd17460b00ce6e121f3da6e1218",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/per-signer-rhos",
      "headRefOid": "61e77825f0013f6b38497626e441b6dbe2b60c28",
      "closedAt": "2022-07-11T18:15:53Z",
      "mergedAt": "2022-07-11T18:15:53Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2363989ddb35c0d66b8f9231c68b8ae7e5bad1a9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849rEcR",
          "commit": {
            "abbreviatedOid": "934183d"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me, thanks @chris-wood ",
          "createdAt": "2022-07-11T17:30:56Z",
          "updatedAt": "2022-07-11T17:30:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs849rOrR",
          "commit": {
            "abbreviatedOid": "934183d"
          },
          "author": "conradoplg",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:04:43Z",
          "updatedAt": "2022-07-11T18:04:44Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "```suggestion\r\n  def compute_binding_factors(commitment_list, msg):\r\n```",
              "createdAt": "2022-07-11T18:04:43Z",
              "updatedAt": "2022-07-11T18:04:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rRUz",
          "commit": {
            "abbreviatedOid": "d5e92ad"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:14:56Z",
          "updatedAt": "2022-07-11T18:14:56Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\n  - binding_factor_list = [(i, binding_factor_i), ...],\r\n```",
              "createdAt": "2022-07-11T18:14:56Z",
              "updatedAt": "2022-07-11T18:14:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rRgB",
          "commit": {
            "abbreviatedOid": "0c9bf93"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:15:35Z",
          "updatedAt": "2022-07-11T18:15:35Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\n  - binding_factor_list = [(i, binding_factor), ...],\r\n```",
              "createdAt": "2022-07-11T18:15:35Z",
              "updatedAt": "2022-07-11T18:15:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 218,
      "id": "PR_kwDOEpUZs847NLlq",
      "title": "Add citation and reason to favor original frost",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/218",
      "state": "MERGED",
      "author": "chelseakomlo",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T16:26:12Z",
      "updatedAt": "2022-07-11T17:13:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "fe74a3e8a9b7c27ca33512dd2da768b9cfa1666b",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "frost1",
      "headRefOid": "cf83519016225b3dd373836ee07713e4acf050d2",
      "closedAt": "2022-07-11T17:12:58Z",
      "mergedAt": "2022-07-11T17:12:58Z",
      "mergedBy": "chelseakomlo",
      "mergeCommit": {
        "oid": "9a1277006df398430088a91d020d1573ae048553"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good besides a note on the last line\r\n\r\nWe should merge this after the change in #217 is merged",
          "createdAt": "2022-07-11T16:39:30Z",
          "updatedAt": "2022-07-11T16:39:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849q0y-",
          "commit": {
            "abbreviatedOid": "dc96f84"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:38:58Z",
          "updatedAt": "2022-07-11T16:38:58Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "We may want to be careful with this language here, because if they do implement it it will not conform or interoperate with other implementations of this spec @chris-wood ",
              "createdAt": "2022-07-11T16:38:58Z",
              "updatedAt": "2022-07-11T16:39:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q_Hq",
          "commit": {
            "abbreviatedOid": "dc96f84"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T17:12:20Z",
          "updatedAt": "2022-07-11T17:12:21Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nround two. \r\n```\r\n\r\nPer chat with Chelsea",
              "createdAt": "2022-07-11T17:12:21Z",
              "updatedAt": "2022-07-11T17:12:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q_Oh",
          "commit": {
            "abbreviatedOid": "cf83519"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T17:12:43Z",
          "updatedAt": "2022-07-11T17:12:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 219,
      "id": "PR_kwDOEpUZs847NMBm",
      "title": "Add verify() to each ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/219",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Remove the Schnorr signature operations sections.\r\n\r\nResolves #213 ",
      "createdAt": "2022-07-11T16:28:02Z",
      "updatedAt": "2022-07-11T18:48:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "fe74a3e8a9b7c27ca33512dd2da768b9cfa1666b",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "per-ciphersuite-singleton-verify",
      "headRefOid": "6df42e60840bd34c721b7f6bfd9a560d02aff459",
      "closedAt": "2022-07-11T18:48:14Z",
      "mergedAt": "2022-07-11T18:48:14Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "9eec94b9544460a61ba366f80748f6ffc949dde1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849qz2Q",
          "commit": {
            "abbreviatedOid": "f459d78"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:35:41Z",
          "updatedAt": "2022-07-11T16:35:42Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "```suggestion\r\nWe include explicit `verify()` functions for each ciphersuite that should also\r\napply to any singleton signature as well as signatures generated by FROST. By definition, this function assumes that all group Elements passed as input,\r\nincluding the signature R component and public key, belong to prime-order group G.\r\n\r\n## FROST(Ed25519, SHA-512)\r\n```",
              "createdAt": "2022-07-11T16:35:41Z",
              "updatedAt": "2022-07-11T16:35:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q0F0",
          "commit": {
            "abbreviatedOid": "07b5512"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:36:32Z",
          "updatedAt": "2022-07-11T16:36:32Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\nWe include explicit `verify()` functions for each ciphersuite that should also\r\napply to any singleton signature as well as signatures generated by FROST. By\r\ndefinition, this function assumes that all group Elements passed as input,\r\nincluding the signature R component and public key, belong to prime-order group G.\r\n```",
              "createdAt": "2022-07-11T16:36:32Z",
              "updatedAt": "2022-07-11T16:36:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q3dk",
          "commit": {
            "abbreviatedOid": "b88dcbb"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:48:14Z",
          "updatedAt": "2022-07-11T16:48:15Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2022-07-11T16:48:15Z",
              "updatedAt": "2022-07-11T16:48:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q4Mm",
          "commit": {
            "abbreviatedOid": "395fcde"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:50:12Z",
          "updatedAt": "2022-07-11T16:50:13Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "```suggestion\r\n    l = 8 * G.ScalarBaseMult(z)\r\n    r = 8 * (R + (c * PK))\r\n    return l == r\r\n```",
              "createdAt": "2022-07-11T16:50:12Z",
              "updatedAt": "2022-07-11T16:50:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q6Li",
          "commit": {
            "abbreviatedOid": "3c8730a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:54:50Z",
          "updatedAt": "2022-07-11T16:54:51Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "```suggestion\r\n\r\n{{!RFC8032}} instructs to check the group equation \"[8][S]B = [8]R + [8][k]A'\". We recommend this verification check as it maintains consistency with batch verification equations and handles any low-order group elements correctly, which the {{!RFC8032}} \"sufficient, but not required\" check does not.\r\n```",
              "createdAt": "2022-07-11T16:54:51Z",
              "updatedAt": "2022-07-11T16:55:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849q659",
          "commit": {
            "abbreviatedOid": "098762a"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T16:57:22Z",
          "updatedAt": "2022-07-11T16:57:23Z",
          "comments": [
            {
              "originalPosition": 193,
              "body": "```suggestion\r\n    l = 4 * G.ScalarBaseMult(z)\r\n    r = 4 * (R + (c * PK))\r\n    return l == r\r\n~~~\r\n\r\n{{!RFC8032}} instructs to check the group equation \"[4][S]B = [4]R + [4][k]A'\". We recommend this verification check as it maintains consistency with batch verification equations and handles any low-order group elements correctly, which the {{!RFC8032}} \"sufficient, but not required\" check does not.\r\n\r\n```",
              "createdAt": "2022-07-11T16:57:22Z",
              "updatedAt": "2022-07-11T16:57:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rE36",
          "commit": {
            "abbreviatedOid": "e494867"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-11T17:31:59Z",
          "updatedAt": "2022-07-11T17:33:56Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "I would re-word this since signatures generated by FROST are identical to signatures generated by a single signer.",
              "createdAt": "2022-07-11T17:31:59Z",
              "updatedAt": "2022-07-11T17:33:56Z"
            },
            {
              "originalPosition": 100,
              "body": "It would probably be good to say what the types are here.",
              "createdAt": "2022-07-11T17:33:37Z",
              "updatedAt": "2022-07-11T17:33:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rG6W",
          "commit": {
            "abbreviatedOid": "e494867"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T17:38:51Z",
          "updatedAt": "2022-07-11T17:38:52Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\nWe include explicit `verify()` functions for each ciphersuite. Since FROST-generated\r\nsignatures and singleton-generated Schnorr signatures are identical, these functions\r\nverify both. By definition, this function assumes that all group Elements passed as\r\ninput, including the signature R component and public key, belong to prime-order\r\ngroup G.\r\n```",
              "createdAt": "2022-07-11T17:38:51Z",
              "updatedAt": "2022-07-11T17:38:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rG9w",
          "commit": {
            "abbreviatedOid": "e494867"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T17:39:04Z",
          "updatedAt": "2022-07-11T17:39:04Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "@chelseakomlo better?",
              "createdAt": "2022-07-11T17:39:04Z",
              "updatedAt": "2022-07-11T17:39:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rR23",
          "commit": {
            "abbreviatedOid": "e494867"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:17:00Z",
          "updatedAt": "2022-07-11T18:17:00Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Either phrasing works for me.",
              "createdAt": "2022-07-11T18:17:00Z",
              "updatedAt": "2022-07-11T18:17:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rYdt",
          "commit": {
            "abbreviatedOid": "6df42e6"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:41:56Z",
          "updatedAt": "2022-07-11T18:41:56Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "@chelseakomlo ",
              "createdAt": "2022-07-11T18:41:56Z",
              "updatedAt": "2022-07-11T18:41:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rZ3P",
          "commit": {
            "abbreviatedOid": "6df42e6"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:46:38Z",
          "updatedAt": "2022-07-11T18:46:38Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "LGTM! Thanks @dconnolly ",
              "createdAt": "2022-07-11T18:46:38Z",
              "updatedAt": "2022-07-11T18:46:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 220,
      "id": "PR_kwDOEpUZs847NmlV",
      "title": "Consolidate prime-order verification check for relevant ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/220",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T18:29:19Z",
      "updatedAt": "2022-07-11T18:41:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "per-ciphersuite-singleton-verify",
      "baseRefOid": "e494867277fa4896522483b301b50e956edd2b38",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/consolidate-verify",
      "headRefOid": "5e903f3563c90436f12a01fa1003766b2f1823db",
      "closedAt": "2022-07-11T18:41:34Z",
      "mergedAt": "2022-07-11T18:41:34Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "6df42e60840bd34c721b7f6bfd9a560d02aff459"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849rVyx",
          "commit": {
            "abbreviatedOid": "5e903f3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T18:31:39Z",
          "updatedAt": "2022-07-11T18:31:39Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I have a suggested rewording on the base PR related to this, yours might be better language // @chelseakomlo \r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-frost/pull/219/files#r918194305\r\n\r\n<img width=\"622\" alt=\"image\" src=\"https://user-images.githubusercontent.com/552961/178333603-b107fe5a-f3a0-453d-90eb-6368c54244d5.png\">\r\n",
              "createdAt": "2022-07-11T18:31:39Z",
              "updatedAt": "2022-07-11T18:31:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849rYVz",
          "commit": {
            "abbreviatedOid": "5e903f3"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T18:41:28Z",
          "updatedAt": "2022-07-11T18:41:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 222,
      "id": "PR_kwDOEpUZs847OByF",
      "title": "Fix per-rho signers",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/222",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T20:37:58Z",
      "updatedAt": "2022-07-12T01:25:37Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1f79c89cc7417a87cc4eaa05b244fd2d2947e54e",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "caw/fix-per-rho-signers",
      "headRefOid": "35e2a6bb9d75a9356a85b5e7b8f7f458f0583ca4",
      "closedAt": "2022-07-11T21:57:53Z",
      "mergedAt": "2022-07-11T21:57:53Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "96248abd675f7ef3c8a495d78e98e6ac02bf12b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849r3b5",
          "commit": {
            "abbreviatedOid": "d57739e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T20:42:28Z",
          "updatedAt": "2022-07-11T20:42:29Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "This means that each `rho_input` is `H(msg_hash, B, id_i)`.",
              "createdAt": "2022-07-11T20:42:28Z",
              "updatedAt": "2022-07-11T20:42:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849r6Gb",
          "commit": {
            "abbreviatedOid": "d57739e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T20:53:12Z",
          "updatedAt": "2022-07-11T20:53:13Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n    rho_input_prefix = msg_hash || encoded_commitment_list\r\n```",
              "createdAt": "2022-07-11T20:53:12Z",
              "updatedAt": "2022-07-11T20:53:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849r6M9",
          "commit": {
            "abbreviatedOid": "362abb5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T20:53:39Z",
          "updatedAt": "2022-07-11T20:53:39Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\n      rho_input = rho_input_prefix || encode_uint16(identifier)\r\n```",
              "createdAt": "2022-07-11T20:53:39Z",
              "updatedAt": "2022-07-11T20:53:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849sHR6",
          "commit": {
            "abbreviatedOid": "35e2a6b"
          },
          "author": "chelseakomlo",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T21:55:13Z",
          "updatedAt": "2022-07-11T21:55:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOEpUZs849snvR",
          "commit": {
            "abbreviatedOid": "35e2a6b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-12T01:25:08Z",
          "updatedAt": "2022-07-12T01:25:09Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Could this be `H3(msg || encode_group_commitment_list(commitment_list))` ? // @chelseakomlo ",
              "createdAt": "2022-07-12T01:25:09Z",
              "updatedAt": "2022-07-12T01:25:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOEpUZs849snzZ",
          "commit": {
            "abbreviatedOid": "35e2a6b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-12T01:25:36Z",
          "updatedAt": "2022-07-12T01:25:37Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Perhaps not because chosen message something something",
              "createdAt": "2022-07-12T01:25:36Z",
              "updatedAt": "2022-07-12T01:25:37Z"
            }
          ]
        }
      ]
    },
    {
      "number": 223,
      "id": "PR_kwDOEpUZs847OIsA",
      "title": "Add a secp256k1 ciphersuite",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/223",
      "state": "OPEN",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Defines secp256k1, effectively mirroring P-256, as hash-to-curve did. Since the NIST document on point validity doesn't support secp256k1, the comparable SECG function from SEC1 (which was previously notated as SECG and is now SEC1) is instead referred to.\r\n\r\nNot yet tested against anything else, as my work has yet to update to per-signer rhos. This is intended to resolve #69, though it should be noted this is a naive attempt to do so on a largely untouched issue. This could be sent back for discussion, and I'd completely understand.\r\n\r\nConsidering this follows hash-to-curve, and there's a lack of Schnorr standardization, I'd personally advocate for this. While I can cite both Bitcoin and Bitcoin Cash's Schnorr schemes, as I personally know of their specs regarding Schnorr over secp256k1 yet don't know of another project's/organization's, I think it's largely irrelevant. This only matters for implementation regarding H2, and P-256 shows that the H2s provided are secure and practical, yet meant for reference.\r\n\r\nIf we did want to cite the most widely known spec, matching their H2, it'd be `SHA256(SHA256(\"challenge\") || SHA256(\"challenge\") || R || A || m) % n`, which doesn't follow best practice regarding bias nor does it follow other IETF documents.",
      "createdAt": "2022-07-11T21:08:25Z",
      "updatedAt": "2022-07-12T07:12:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "96248abd675f7ef3c8a495d78e98e6ac02bf12b5",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "secp256k1",
      "headRefOid": "43188ebc0ffe7c4edea78854df6d3af427ccdd5b",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unfortunately, this is built on v6 (which I'd appreciate if I could check my understanding of: re-instantiation of the application of wagner's for an adversary who controls multiple signers in a multisig?), due to the exact timing of when I grabbed it. I'll update it to v7 and do so shortly. I did want to ask about the other curves though, which appear to still have a version of v5? Was that an oversight? Not asking as it's relevant here (neither question is), yet in order to not create a new issue simply for minute questions (when both are somewhat relevant).",
          "createdAt": "2022-07-12T06:40:19Z",
          "updatedAt": "2022-07-12T06:40:19Z"
        },
        {
          "author": "kayabaNerve",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was able to verify these vectors using an independent implementation and the k256 library :) Just a bit of sanity about not having typo'd the curve parameters.",
          "createdAt": "2022-07-12T07:12:45Z",
          "updatedAt": "2022-07-12T07:12:45Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 224,
      "id": "PR_kwDOEpUZs847Pp7s",
      "title": "Update modular-frost's version",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/224",
      "state": "MERGED",
      "author": "kayabaNerve",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Updated in https://github.com/serai-dex/serai/commit/94f380f8575d4d3bdaa60483f384e8cd4a6fbbc9#diff-a133540275715be103deeb55f161a7a3172e85acd9b1e57a3269b7e62a7a16df, with the link being to the vectors being moved to v7's.",
      "createdAt": "2022-07-12T07:54:55Z",
      "updatedAt": "2022-07-12T20:24:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "96248abd675f7ef3c8a495d78e98e6ac02bf12b5",
      "headRepository": "kayabaNerve/draft-irtf-cfrg-frost",
      "headRefName": "modular-frost-07",
      "headRefOid": "75295d2635a14f37ba33fd476aae37a48f297860",
      "closedAt": "2022-07-12T09:35:15Z",
      "mergedAt": "2022-07-12T09:35:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1fa0551f36666e4b5df29a172a82bc000dab1215"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849uJmt",
          "commit": {
            "abbreviatedOid": "75295d2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-12T09:35:11Z",
          "updatedAt": "2022-07-12T09:35:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 226,
      "id": "PR_kwDOEpUZs847Qh3M",
      "title": "Bump actions/setup-python from 4.0.0 to 4.1.0",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/226",
      "state": "MERGED",
      "author": "dependabot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [
        "dependencies"
      ],
      "body": "Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4.0.0 to 4.1.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/setup-python/releases\">actions/setup-python's releases</a>.</em></p>\n<blockquote>\n<h2>v4.1.0</h2>\n<p>In scope of this pull request we updated <code>actions/cache</code> package as the new version contains fixes for <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/448\">caching error handling</a>. Moreover, we added a new input <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/411\">update-environment</a>. This option allows to specify if the action shall update environment variables (default) or not.</p>\n<h3>Update-environment input</h3>\n<pre lang=\"yaml\"><code>    - name: setup-python 3.9\n      uses: actions/setup-python@v4\n      with:\n        python-version: 3.9\n        update-environment: false\n</code></pre>\n<p><strong>Besides, we added such changes as:</strong></p>\n<ul>\n<li>Allow python-version-file to be a relative path: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/431\">actions/setup-python#431</a></li>\n<li>Added new environment variables for <code>Cmake</code>: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/440\">actions/setup-python#440</a></li>\n<li>Updated error message for resolveVersion: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/450\">actions/setup-python#450</a></li>\n<li>Assign default value of <code>AGENT_TOOLSDIRECTORY</code> if not set: <a href=\"https://github-redirect.dependabot.com/actions/setup-python/pull/394\">actions/setup-python#394</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/setup-python/commit/c4e89fac7e8767b327bbad6cb4d859eda999cf08\"><code>c4e89fa</code></a> Improve readme for 3.x and 3.11-dev style python-version (<a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/441\">#441</a>)</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/0ad0f6a0a50a468a2212f245334ee8c2f0013b17\"><code>0ad0f6a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/452\">#452</a> from mayeut/fix-env</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/f0bcf8be037eba11327da6eaf40cd99a2a092494\"><code>f0bcf8b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/456\">#456</a> from akx/patch-1</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/af97157ae6983e01c4eabbfb118b3e2ac549a4c0\"><code>af97157</code></a> doc: Add multiple wildcards example to readme</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/364e819741b50de0a275e36302d0ab3e69ce3010\"><code>364e819</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/394\">#394</a> from akv-platform/v-sedoli/set-env-by-default</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/782f81b91d778ca69644ac3076dc3fcbdfc50f89\"><code>782f81b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/450\">#450</a> from IvanZosimov/ResolveVersionFix</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/2c9de4ed413bf4466f2fde83041579ed45167427\"><code>2c9de4e</code></a> Remove duplicate code introduced in <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/440\">#440</a></li>\n<li><a href=\"https://github.com/actions/setup-python/commit/412091c1e06cd58dc0bacfdc5bcc07449ebd20c0\"><code>412091c</code></a> Fix tests for update-environment==false</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/78a2330b929a62f2f42dd70a65da3f141e45bec1\"><code>78a2330</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/setup-python/issues/451\">#451</a> from dmitry-shibanov/fx-pipenv-python-version</li>\n<li><a href=\"https://github.com/actions/setup-python/commit/96f494e18c81869c9d5eef39102df0b23b2bc4f2\"><code>96f494e</code></a> trigger checks</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/setup-python/compare/v4.0.0...v4.1.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/setup-python&package-manager=github_actions&previous-version=4.0.0&new-version=4.1.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
      "createdAt": "2022-07-12T11:48:22Z",
      "updatedAt": "2022-07-12T18:23:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "1fa0551f36666e4b5df29a172a82bc000dab1215",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dependabot/github_actions/actions/setup-python-4.1.0",
      "headRefOid": "d909dc8dd6acee8a7853957b6aa43bdfe92c16dd",
      "closedAt": "2022-07-12T18:22:57Z",
      "mergedAt": "2022-07-12T18:22:56Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "9a8d7aeb97c9c4838d29157b41189c7d25c999cf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOEpUZs849xIoN",
          "commit": {
            "abbreviatedOid": "d909dc8"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-12T18:22:50Z",
          "updatedAt": "2022-07-12T18:22:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 227,
      "id": "PR_kwDOEpUZs847ySAN",
      "title": "identifier MUST never be zero, vs 'will' never",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-frost/pull/227",
      "state": "OPEN",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As keygen / identifier gen is only part of the appendix, not the body of the specification",
      "createdAt": "2022-07-20T22:02:40Z",
      "updatedAt": "2022-07-20T22:02:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-frost",
      "baseRefName": "master",
      "baseRefOid": "9a8d7aeb97c9c4838d29157b41189c7d25c999cf",
      "headRepository": "cfrg/draft-irtf-cfrg-frost",
      "headRefName": "dconnolly-patch-2",
      "headRefOid": "d5bdaa89b7b9a8e60795f3e85f5c556670de80c0",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}